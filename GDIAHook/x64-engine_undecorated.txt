GAME::BaseCounter<1>::BaseCounter<1>(char const *,char const *)
GAME::BaseCounter<0>::BaseCounter<0>(char const *,char const *)
GAME::FilterFunction<class GAME::Entity>::FilterFunction<class GAME::Entity>(class GAME::FilterFunction<class GAME::Entity> const &)
GAME::FilterFunction<class GAME::Entity>::FilterFunction<class GAME::Entity>(void)
GAME::Singleton<class GAME::AsyncWorker>::Singleton<class GAME::AsyncWorker>(void)
GAME::Singleton<class GAME::CPUCoreDetector>::Singleton<class GAME::CPUCoreDetector>(void)
GAME::Singleton<class GAME::DebugRenderManager>::Singleton<class GAME::DebugRenderManager>(void)
GAME::Singleton<class GAME::EventManager>::Singleton<class GAME::EventManager>(void)
GAME::Singleton<class GAME::Jukebox>::Singleton<class GAME::Jukebox>(void)
GAME::Singleton<class GAME::NavManager>::Singleton<class GAME::NavManager>(void)
GAME::Singleton<class GAME::ObjectManager>::Singleton<class GAME::ObjectManager>(void)
GAME::Singleton<class GAME::RouterServices>::Singleton<class GAME::RouterServices>(void)
GAME::Singleton<class GAME::StyleManager>::Singleton<class GAME::StyleManager>(void)
GAME::Singleton<class GAME::Tracker>::Singleton<class GAME::Tracker>(void)
GAME::Actor::Actor(void)
GAME::ActorConfigCommand::ActorConfigCommand(class GAME::ActorConfigCommand const &)
GAME::ActorConfigCommand::ActorConfigCommand(unsigned int)
??0AdjustmentSectorData@GAME@@QEAA@$$QEAV01@@Z
GAME::AdjustmentSectorData::AdjustmentSectorData(class GAME::AdjustmentSectorData const &)
GAME::AdjustmentSectorData::AdjustmentSectorData(void)
GAME::AmbianceManager::AmbianceManager(void)
??0AmbientSectorData@GAME@@QEAA@$$QEAU01@@Z
GAME::AmbientSectorData::AmbientSectorData(struct GAME::AmbientSectorData const &)
GAME::AmbientSectorData::AmbientSectorData(void)
??0AnimChannel@GAME@@QEAA@$$QEAU01@@Z
GAME::AnimChannel::AnimChannel(struct GAME::AnimChannel const &)
GAME::AnimChannel::AnimChannel(void)
GAME::Archive::Archive(void)
GAME::AsyncWorker::AsyncWorker(void)
GAME::BaseResourceManager::BaseResourceManager(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::ResourceLoader *)
GAME::Billboard::Billboard(void)
??0BloomSectorData@GAME@@QEAA@$$QEAV01@@Z
GAME::BloomSectorData::BloomSectorData(class GAME::BloomSectorData const &)
GAME::BloomSectorData::BloomSectorData(void)
GAME::BoatOverlayActivity::BoatOverlayActivity(class GAME::BoatOverlayActivity const &)
GAME::BoatOverlayActivity::BoatOverlayActivity(void)
??0BossSectorData@GAME@@QEAA@$$QEAU01@@Z
GAME::BossSectorData::BossSectorData(struct GAME::BossSectorData const &)
GAME::BossSectorData::BossSectorData(void)
GAME::InputDevice::ButtonEvent::ButtonEvent(void)
GAME::CDKeyPacket::CDKeyPacket(class GAME::CDKeyPacket const &)
GAME::CDKeyPacket::CDKeyPacket(void)
??0CPUCoreDetector@GAME@@QEAA@$$QEAV01@@Z
GAME::CPUCoreDetector::CPUCoreDetector(class GAME::CPUCoreDetector const &)
GAME::CPUCoreDetector::CPUCoreDetector(void)
GAME::Camera::Camera(void)
??0ChallengeSectorData@GAME@@QEAA@$$QEAV01@@Z
GAME::ChallengeSectorData::ChallengeSectorData(class GAME::ChallengeSectorData const &)
GAME::ChallengeSectorData::ChallengeSectorData(void)
GAME::ChaosBeam::ChaosBeam(void)
GAME::CharacterAction::CharacterAction(class GAME::CharacterAction const &)
GAME::CharacterAction::CharacterAction(unsigned int)
GAME::CharacterActionPacket::CharacterActionPacket(class GAME::CharacterActionPacket const &)
GAME::CharacterActionPacket::CharacterActionPacket(enum GAME::PACKET_TYPE)
GAME::ChatPacket::ChatPacket(class GAME::ChatPacket const &)
GAME::ChatPacket::ChatPacket(void)
GAME::ClientConnectionManager::ClientConnectionManager(class GAME::ClientConnectionManager const &)
GAME::ClientConnectionManager::ClientConnectionManager(void)
GAME::ClientDisconnectPacket::ClientDisconnectPacket(class GAME::ClientDisconnectPacket const &)
GAME::ClientDisconnectPacket::ClientDisconnectPacket(void)
GAME::ClientEntityList::ClientEntityList(class GAME::ClientEntityList const &)
GAME::ClientEntityList::ClientEntityList(void)
GAME::ClientNetworkShim::ClientNetworkShim(class GAME::ClientNetworkShim const &)
GAME::ClientNetworkShim::ClientNetworkShim(void)
GAME::ClientReadyPacket::ClientReadyPacket(class GAME::ClientReadyPacket const &)
GAME::ClientReadyPacket::ClientReadyPacket(void)
GAME::ClientServerQueryPacket::ClientServerQueryPacket(class GAME::ClientServerQueryPacket const &)
GAME::ClientServerQueryPacket::ClientServerQueryPacket(void)
??0ClimateSectorData@GAME@@QEAA@$$QEAV01@@Z
GAME::ClimateSectorData::ClimateSectorData(class GAME::ClimateSectorData const &)
GAME::ClimateSectorData::ClimateSectorData(void)
GAME::ColorPulse::ColorPulse(class GAME::ColorPulse const &)
GAME::ColorPulse::ColorPulse(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::ColorPulse::ColorPulse(int,class GAME::Color const &,class GAME::Color const &)
GAME::ColorPulse::ColorPulse(void)
GAME::ConnectionManager::ConnectionManager(class GAME::ConnectionManager const &)
GAME::ConnectionManager::ConnectionManager(void)
GAME::ConnectionVerifyPacket::ConnectionVerifyPacket(class GAME::ConnectionVerifyPacket const &)
GAME::ConnectionVerifyPacket::ConnectionVerifyPacket(void)
GAME::InputDevice::ControllerEvent::ControllerEvent(void)
GAME::ConversationResource::ConversationResource(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::CriticalSection::CriticalSection(void)
GAME::CriticalSectionLock::CriticalSectionLock(char const *,class GAME::CriticalSection &,bool)
??0CurveData@GAME@@QEAA@$$QEAV01@@Z
GAME::CurveData::CurveData(class GAME::CurveData const &)
GAME::CurveData::CurveData(void)
??0DamageSectorData@GAME@@QEAA@$$QEAV01@@Z
GAME::DamageSectorData::DamageSectorData(class GAME::DamageSectorData const &)
GAME::DamageSectorData::DamageSectorData(void)
GAME::DayNightCycle::DayNightCycle(void)
GAME::DayNightLight::DayNightLight(void)
GAME::DebugMessagePacket::DebugMessagePacket(class GAME::DebugMessagePacket const &)
GAME::DebugMessagePacket::DebugMessagePacket(void)
GAME::DebugRenderManager::DebugRenderManager(void)
GAME::Decal::Decal(void)
GAME::DecalSet::DecalSet(class GAME::DecalSet const &)
GAME::DecalSet::DecalSet(class GAME::Region *)
??0DetailMapFilterFunction@GAME@@QEAA@$$QEAV01@@Z
GAME::DetailMapFilterFunction::DetailMapFilterFunction(class GAME::DetailMapFilterFunction const &)
GAME::DetailMapFilterFunction::DetailMapFilterFunction(void)
GAME::DirtyRect::DirtyRect(int,int,int,int)
GAME::DirtyRect::DirtyRect(void)
??0DirtyRectSet@GAME@@QEAA@$$QEAV01@@Z
GAME::DirtyRectSet::DirtyRectSet(class GAME::DirtyRectSet const &)
GAME::DirtyRectSet::DirtyRectSet(void)
GAME::DisconnectClientPacket::DisconnectClientPacket(class GAME::DisconnectClientPacket const &)
GAME::DisconnectClientPacket::DisconnectClientPacket(void)
GAME::Display::Display(void)
??0DisplayWidget@GAME@@QEAA@$$QEAV01@@Z
GAME::DisplayWidget::DisplayWidget(class GAME::DisplayWidget const &)
GAME::DisplayWidget::DisplayWidget(void)
GAME::EditorFilter::EditorFilter(void)
GAME::EditorFilter::EditorFilter(class GAME::EditorFilter const &)
GAME::Effect::Effect(class GAME::Effect const &)
GAME::Effect::Effect(class GAME::EffectData const *)
GAME::EffectData::EffectData(class GAME::EffectData const &)
GAME::EffectData::EffectData(void)
GAME::EffectEntity::EffectEntity(void)
GAME::EffectResource::EffectResource(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::Emitter::Emitter(class GAME::Emitter const &)
GAME::Emitter::Emitter(class GAME::EmitterData const *)
GAME::EmitterData::EmitterData(class GAME::EmitterData *)
GAME::EmitterData::EmitterData(void)
GAME::Engine::Engine(void)
GAME::Entity::Entity(void)
GAME::Event::Event(bool)
GAME::EventManager::EventManager(void)
GAME::FFDGizmo::FFDGizmo(class GAME::FFDGizmo const &)
GAME::FFDGizmo::FFDGizmo(void)
GAME::FOWManager::FOWManager(class GAME::FOWManager const &)
GAME::FOWManager::FOWManager(void)
GAME::File::File(class GAME::File const &)
GAME::File::File(void)
GAME::FileDirectory::FileDirectory(class GAME::FileSourceDirectory *)
GAME::FileSource::FileSource(class GAME::FileSource const &)
GAME::FileSource::FileSource(void)
GAME::FileSourceArchive::FileSourceArchive(bool)
GAME::FileSystem::FileSystem(class GAME::FileSystem const &)
GAME::FileSystem::FileSystem(void)
GAME::FireLight::FireLight(void)
GAME::FlickerLight::FlickerLight(void)
GAME::FlyingBolt::FlyingBolt(void)
GAME::FogOfWar::FogOfWar(void)
??0FogSectorData@GAME@@QEAA@$$QEAV01@@Z
GAME::FogSectorData::FogSectorData(class GAME::FogSectorData const &)
GAME::FogSectorData::FogSectorData(void)
??0FontStyle@GAME@@QEAA@$$QEAU01@@Z
GAME::FontStyle::FontStyle(struct GAME::FontStyle const &)
GAME::FontStyle::FontStyle(void)
GAME::FragmentPacket::FragmentPacket(class GAME::FragmentPacket const &)
GAME::FragmentPacket::FragmentPacket(void)
GAME::FrameCounter::FrameCounter(char const *,char const *)
GAME::FriendList::FriendList(void)
??0FusedBone@GAME@@QEAA@$$QEAU01@@Z
GAME::FusedBone::FusedBone(struct GAME::FusedBone const &)
GAME::FusedBone::FusedBone(void)
GAME::GMIEffect::GMIEffect(class GAME::GMIEffect const &)
GAME::GMIEffect::GMIEffect(class GAME::GraphicsMeshInstance *,class GAME::GMIEffectListener *,int)
GAME::GMIEffectIcey::GMIEffectIcey(class GAME::GMIEffectIcey const &)
GAME::GMIEffectIcey::GMIEffectIcey(class GAME::GraphicsMeshInstance *,class GAME::GMIEffectListener *,int,float,float,float,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
??0GMIEffectListener@GAME@@QEAA@$$QEAV01@@Z
GAME::GMIEffectListener::GMIEffectListener(class GAME::GMIEffectListener const &)
GAME::GMIEffectListener::GMIEffectListener(void)
??0GPDDefaultVertexBuilder@GAME@@QEAA@$$QEAV01@@Z
GAME::GPDDefaultVertexBuilder::GPDDefaultVertexBuilder(class GAME::GPDDefaultVertexBuilder const &)
GAME::GPDDefaultVertexBuilder::GPDDefaultVertexBuilder(void)
GAME::GPDTex2VertexBuilder::GPDTex2VertexBuilder(class GAME::GPDTex2VertexBuilder const &)
GAME::GPDTex2VertexBuilder::GPDTex2VertexBuilder(void)
GAME::GameInfo::GameInfo(class GAME::GameInfo const &)
GAME::GameInfo::GameInfo(void)
??0GameTimer@GAME@@QEAA@$$QEAV01@@Z
GAME::GameTimer::GameTimer(class GAME::GameTimer const &)
GAME::GameTimer::GameTimer(void)
GAME::GlobalCounter::GlobalCounter(char const *,char const *)
GAME::GraphicsAnim::GraphicsAnim(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::GraphicsCanvas::GraphicsCanvas(class GAME::RenderDevice *,class GAME::RenderSurface *)
GAME::GraphicsCursor::GraphicsCursor(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::GraphicsDeferredRenderer::GraphicsDeferredRenderer(class GAME::GraphicsCanvas &)
GAME::GraphicsEngine::GraphicsEngine(void)
??0GraphicsEngineSettings@GAME@@QEAA@$$QEAV01@@Z
GAME::GraphicsEngineSettings::GraphicsEngineSettings(class GAME::GraphicsEngineSettings const &)
GAME::GraphicsEngineSettings::GraphicsEngineSettings(void)
GAME::GraphicsFont2::GraphicsFont2(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
??0GraphicsLight@GAME@@QEAA@$$QEAV01@@Z
GAME::GraphicsLight::GraphicsLight(class GAME::GraphicsLight const &)
GAME::GraphicsLight::GraphicsLight(void)
GAME::GraphicsMTRenderer::GraphicsMTRenderer(class GAME::GraphicsCanvas &)
GAME::GraphicsMesh::GraphicsMesh(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::GraphicsMeshInstance::GraphicsMeshInstance(class GAME::GraphicsMeshInstance &)
GAME::GraphicsMeshInstance::GraphicsMeshInstance(void)
GAME::GraphicsPrimitiveDrawer::GraphicsPrimitiveDrawer(class GAME::GraphicsCanvas &)
??0GraphicsRenderable@GAME@@QEAA@$$QEAV01@@Z
GAME::GraphicsRenderable::GraphicsRenderable(class GAME::GraphicsRenderable const &)
GAME::GraphicsRenderable::GraphicsRenderable(void)
GAME::GraphicsScene::GraphicsScene(class GAME::GraphicsScene const &)
GAME::GraphicsScene::GraphicsScene(class GAME::GraphicsMTRenderer const &)
GAME::GraphicsShader2::GraphicsShader2(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::GraphicsTexture::GraphicsTexture(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::GrassObject::GrassObject(class GAME::GrassObject const &)
GAME::GrassObject::GrassObject(void)
GAME::GridBase::GridBase(class GAME::GridBase const &)
GAME::GridBase::GridBase(class GAME::Region *)
GAME::GridBase::GridBase(void)
GAME::GridRegion::GridRegion(class GAME::Region *)
GAME::GridRegion::GridRegion(void)
GAME::GridRegionRandom::GridRegionRandom(class GAME::Region *)
GAME::GridSystem::GridSystem(class GAME::GridSystem const &)
GAME::GridSystem::GridSystem(void)
GAME::HeartbeatPacket::HeartbeatPacket(class GAME::HeartbeatPacket const &)
GAME::HeartbeatPacket::HeartbeatPacket(void)
GAME::HeartbeatResponsePacket::HeartbeatResponsePacket(class GAME::HeartbeatResponsePacket const &)
GAME::HeartbeatResponsePacket::HeartbeatResponsePacket(void)
GAME::HookPack::HookPack(class GAME::HookPack const &)
GAME::HookPack::HookPack(unsigned int)
GAME::HwndWindow::HwndWindow(class GAME::HwndWindow const &)
GAME::HwndWindow::HwndWindow(struct HWND__ * const)
??0IGPDVertexBuilder@GAME@@QEAA@$$QEAV01@@Z
GAME::IGPDVertexBuilder::IGPDVertexBuilder(class GAME::IGPDVertexBuilder const &)
GAME::IGPDVertexBuilder::IGPDVertexBuilder(void)
GAME::IOAtomicRead::IOAtomicRead(char const *,enum GAME::IOStream::IOStreamType,int)
GAME::IOAtomicWrite::IOAtomicWrite(char const *,enum GAME::IOStream::IOStreamType,int)
GAME::IOStream::IOStream(enum GAME::IOStream::IOStreamType)
GAME::IOStreamRead::IOStreamRead(enum GAME::IOStream::IOStreamType)
GAME::IOStreamRead::IOStreamRead(char const *,enum GAME::IOStream::IOStreamType,int)
GAME::IOStreamRead::IOStreamRead(void const *,unsigned int)
GAME::IOStreamWrite::IOStreamWrite(char const *,enum GAME::IOStream::IOStreamType,int)
??0IPVNetworkAddress@GAME@@QEAA@$$QEAV01@@Z
GAME::IPVNetworkAddress::IPVNetworkAddress(union GAME::IPVNetworkAddress::ipv_storage const &)
GAME::IPVNetworkAddress::IPVNetworkAddress(struct in6_addr const &,unsigned short)
GAME::IPVNetworkAddress::IPVNetworkAddress(struct in_addr const &,unsigned short)
GAME::IPVNetworkAddress::IPVNetworkAddress(class GAME::IPVNetworkAddress const &)
GAME::IPVNetworkAddress::IPVNetworkAddress(class GAME::IPVNetworkAddress const &,unsigned short)
GAME::IPVNetworkAddress::IPVNetworkAddress(unsigned int,unsigned short)
GAME::IPVNetworkAddress::IPVNetworkAddress(enum GAME::NetworkAddressType,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned short)
GAME::IPVNetworkAddress::IPVNetworkAddress(void)
??0IPhysics2@GAME@@QEAA@$$QEAV01@@Z
GAME::IPhysics2::IPhysics2(class GAME::IPhysics2 const &)
GAME::IPhysics2::IPhysics2(void)
GAME::ITTEvent::ITTEvent(char const *)
GAME::Image::Image(void)
GAME::ImageResource::ImageResource(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::ImpassableData::ImpassableData(void)
GAME::InputDevice::InputDevice(class GAME::InputDevice const &)
GAME::InputDevice::InputDevice(void)
GAME::InstanceGroup::InstanceGroup(class GAME::InstanceGroup const &)
GAME::InstanceGroup::InstanceGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::InstanceGroupManager::InstanceGroupManager(void)
GAME::InterfaceSkin::InterfaceSkin(class GAME::InterfaceSkin const &)
GAME::InterfaceSkin::InterfaceSkin(char const *)
GAME::InternalParam::InternalParam(class GAME::InternalParam const &)
GAME::InternalParam::InternalParam(void)
GAME::Intersection::Intersection(void)
GAME::JointDescription::JointDescription(void)
GAME::InputDevice::JoystickEvent::JoystickEvent(void)
GAME::Jukebox::Jukebox(void)
GAME::Jukebox::Jukebox(class GAME::Jukebox const &)
GAME::Level::Level(class GAME::Region *)
??0LevelLimitSectorData@GAME@@QEAA@$$QEAV01@@Z
GAME::LevelLimitSectorData::LevelLimitSectorData(class GAME::LevelLimitSectorData const &)
GAME::LevelLimitSectorData::LevelLimitSectorData(void)
GAME::Light::Light(void)
??0LightRig@GAME@@QEAA@$$QEAV01@@Z
GAME::LightRig::LightRig(class GAME::LightRig const &)
GAME::LightRig::LightRig(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::LightRig::LightRig(void)
GAME::Lightning2::Lightning2(void)
GAME::LineEffect2::LineEffect2(void)
GAME::LineEffect::LineEffect(void)
GAME::LinkControlAckPacket::LinkControlAckPacket(class GAME::LinkControlAckPacket const &)
GAME::LinkControlAckPacket::LinkControlAckPacket(void)
GAME::LinkMTUTestPacket::LinkMTUTestPacket(class GAME::LinkMTUTestPacket const &)
GAME::LinkMTUTestPacket::LinkMTUTestPacket(void)
GAME::LoadTable::LoadTable(void)
GAME::LoadTableBinary::LoadTableBinary(class GAME::DatabaseArchive *)
GAME::LocalizationManager::LocalizationManager(void)
GAME::LocalizationManager::LocalizationManager(class GAME::LocalizationManager const &)
GAME::MapChunkCallback::MapChunkCallback(class GAME::MapChunkCallback const &)
GAME::MapChunkCallback::MapChunkCallback(unsigned int)
GAME::MemoryMappedFile::MemoryMappedFile(void)
GAME::InputDevice::MouseEvent::MouseEvent(void)
GAME::Name::Name(void)
??0NameSectorData@GAME@@QEAA@$$QEAU01@@Z
GAME::NameSectorData::NameSectorData(struct GAME::NameSectorData const &)
GAME::NameSectorData::NameSectorData(void)
GAME::NavManager::NavManager(void)
GAME::NavMesh::NavMesh(void)
??0NavMeshBuilder@GAME@@QEAA@$$QEAV01@@Z
GAME::NavMeshBuilder::NavMeshBuilder(class GAME::NavMeshBuilder const &)
GAME::NavMeshBuilder::NavMeshBuilder(void)
GAME::NetPacket::NetPacket(class GAME::NetPacket const &)
GAME::NetPacket::NetPacket(enum GAME::PACKET_TYPE)
??0NetPacketDescriber@GAME@@QEAA@$$QEAV01@@Z
GAME::NetPacketDescriber::NetPacketDescriber(class GAME::NetPacketDescriber const &)
GAME::NetPacketDescriber::NetPacketDescriber(class GAME::NetPacket *,bool)
GAME::NetPacketHeader::NetPacketHeader(class GAME::NetPacketHeader const &)
GAME::NetPacketHeader::NetPacketHeader(void)
GAME::NetPacketInBuffer::NetPacketInBuffer(class GAME::NetPacketHeader *,unsigned char *,int)
??0NetPacketOutBuffer@GAME@@QEAA@$$QEAV01@@Z
GAME::NetPacketOutBuffer::NetPacketOutBuffer(class GAME::NetPacketOutBuffer const &)
GAME::NetPacketOutBuffer::NetPacketOutBuffer(class GAME::NetPacket *)
??0NetworkAddress@GAME@@QEAA@$$QEAV01@@Z
GAME::NetworkAddress::NetworkAddress(class GAME::NetworkAddress const &)
GAME::NetworkAddress::NetworkAddress(enum GAME::NetworkInfrastructureType)
??0NetworkControllerBase@GAME@@QEAA@$$QEAV01@@Z
GAME::NetworkControllerBase::NetworkControllerBase(class GAME::NetworkControllerBase const &)
GAME::NetworkControllerBase::NetworkControllerBase(void)
GAME::NetworkEntityList::NetworkEntityList(class GAME::NetworkEntityList const &)
GAME::NetworkEntityList::NetworkEntityList(void)
GAME::NetworkLinkStats::NetworkLinkStats(class GAME::NetworkLinkStats const &)
GAME::NetworkLinkStats::NetworkLinkStats(void)
GAME::NetworkQueue::NetworkQueue(class GAME::NetworkQueue const &)
GAME::NetworkQueue::NetworkQueue(unsigned int)
GAME::NetworkRateCounter::NetworkRateCounter(class GAME::NetworkRateCounter const &)
GAME::NetworkRateCounter::NetworkRateCounter(unsigned int)
GAME::NetworkServerBrowser::NetworkServerBrowser(class GAME::NetworkServerBrowser const &)
GAME::NetworkServerBrowser::NetworkServerBrowser(void)
GAME::NetworkShim::NetworkShim(class GAME::NetworkShim const &)
GAME::NetworkShim::NetworkShim(void)
GAME::NetworkSocket::NetworkSocket(class GAME::NetworkSocket const &)
GAME::NetworkSocket::NetworkSocket(enum GAME::Socket::Type)
GAME::NoiseTexture::NoiseTexture(class GAME::NoiseTexture const &)
GAME::NoiseTexture::NoiseTexture(void)
GAME::Object::Object(class GAME::Object const &)
GAME::Object::Object(void)
GAME::ObjectContainerPacket::ObjectContainerPacket(class GAME::ObjectContainerPacket const &)
GAME::ObjectContainerPacket::ObjectContainerPacket(enum GAME::PACKET_TYPE)
GAME::ObjectInteractionPacket::ObjectInteractionPacket(class GAME::ObjectInteractionPacket const &)
GAME::ObjectInteractionPacket::ObjectInteractionPacket(enum GAME::PACKET_TYPE)
GAME::ObjectManager::ObjectManager(void)
GAME::Options::Options(void)
GAME::OverlayActivity::OverlayActivity(class GAME::OverlayActivity const &)
GAME::OverlayActivity::OverlayActivity(void)
GAME::OverlayActivityManager::OverlayActivityManager(void)
GAME::PIXEvent::PIXEvent(char const *)
GAME::PhysicsEngine2::PhysicsEngine2(enum GAME::PhysicsEngine2Impl::Type,bool)
GAME::PhysicsMesh::PhysicsMesh(class GAME::PhysicsMesh const &)
GAME::PhysicsMesh::PhysicsMesh(void)
GAME::PhysicsMeshBase::PhysicsMeshBase(class GAME::PhysicsMeshBase const &)
GAME::PhysicsMeshBase::PhysicsMeshBase(void)
GAME::PhysicsMesh_Bullet::PhysicsMesh_Bullet(class GAME::PhysicsMesh_Bullet const &)
GAME::PhysicsMesh_Bullet::PhysicsMesh_Bullet(void)
GAME::PhysicsObject2::PhysicsObject2(class GAME::PhysicsObject2 const &)
GAME::PhysicsObject2::PhysicsObject2(class GAME::IPhysics2 *,bool)
GAME::PhysicsRigidBody2::PhysicsRigidBody2(class GAME::PhysicsRigidBody2 const &)
GAME::PhysicsRigidBody2::PhysicsRigidBody2(class GAME::Name const &,class GAME::PhysicsObject2 *,void *)
GAME::PhysicsSystem2::PhysicsSystem2(class GAME::PhysicsSystem2 const &)
GAME::PhysicsSystem2::PhysicsSystem2(void)
GAME::PieOmatic::PieOmatic(class GAME::PieOmatic const &)
GAME::PieOmatic::PieOmatic(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)
GAME::PingPacket::PingPacket(class GAME::PingPacket const &)
GAME::PingPacket::PingPacket(void)
GAME::PointDisturbance::PointDisturbance(void)
GAME::PortableLocalization::PortableLocalization(class GAME::PortableLocalization const &)
GAME::PortableLocalization::PortableLocalization(void)
GAME::Portal::Portal(void)
GAME::Profile::Profile(char const *)
GAME::Profile::Profile(char const *,int,bool)
GAME::Profile::Profile(char const *,unsigned int)
GAME::PulseLight::PulseLight(void)
??0PvpSectorData@GAME@@QEAA@$$QEAU01@@Z
GAME::PvpSectorData::PvpSectorData(struct GAME::PvpSectorData const &)
GAME::PvpSectorData::PvpSectorData(void)
GAME::RandomUniformLocked::RandomUniformLocked(void)
GAME::Region::Region(class GAME::ABBox const &)
GAME::Region::Region(class GAME::World *,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::ABBox const &,class GAME::IntVec3 const &,class GAME::RegionId const &,unsigned int,unsigned int)
GAME::RegionId::RegionId(class GAME::RegionId const &)
GAME::RegionId::RegionId(void)
GAME::RegionLoader::RegionLoader(class GAME::WorldFrustum const &,bool)
GAME::RegionLoader::RegionLoader(class GAME::ResourceLoader *,class mem::vector<class GAME::Region *> const &,bool)
GAME::RemoveClientPacket::RemoveClientPacket(class GAME::RemoveClientPacket const &)
GAME::RemoveClientPacket::RemoveClientPacket(void)
GAME::RemoveEntityPacket::RemoveEntityPacket(class GAME::RemoveEntityPacket const &)
GAME::RemoveEntityPacket::RemoveEntityPacket(void)
GAME::RenderDevice::RenderDevice(class GAME::RenderDevice const &)
GAME::RenderDevice::RenderDevice(void)
GAME::RenderDynamicIndexBuffer::RenderDynamicIndexBuffer(class GAME::RenderDynamicIndexBuffer const &)
GAME::RenderDynamicIndexBuffer::RenderDynamicIndexBuffer(void)
GAME::RenderDynamicVertexBuffer::RenderDynamicVertexBuffer(class GAME::RenderDynamicVertexBuffer const &)
GAME::RenderDynamicVertexBuffer::RenderDynamicVertexBuffer(void)
GAME::RenderGeometryShader::RenderGeometryShader(class GAME::RenderGeometryShader const &)
GAME::RenderGeometryShader::RenderGeometryShader(void)
GAME::RenderIndexBuffer::RenderIndexBuffer(class GAME::RenderIndexBuffer const &)
GAME::RenderIndexBuffer::RenderIndexBuffer(void)
GAME::RenderPass::RenderPass(class GAME::RenderPass const &)
GAME::RenderPass::RenderPass(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::RenderPixelShader::RenderPixelShader(class GAME::RenderPixelShader const &)
GAME::RenderPixelShader::RenderPixelShader(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::RenderSurface::RenderSurface(class GAME::RenderSurface const &)
GAME::RenderSurface::RenderSurface(void)
GAME::RenderTexture::RenderTexture(class GAME::RenderTexture const &)
GAME::RenderTexture::RenderTexture(void)
GAME::RenderVertexBuffer::RenderVertexBuffer(class GAME::RenderVertexBuffer const &)
GAME::RenderVertexBuffer::RenderVertexBuffer(void)
GAME::RenderVertexDeclaration::RenderVertexDeclaration(class GAME::RenderVertexDeclaration const &)
GAME::RenderVertexDeclaration::RenderVertexDeclaration(void)
GAME::RenderVertexShader::RenderVertexShader(class GAME::RenderVertexShader const &)
GAME::RenderVertexShader::RenderVertexShader(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::RequestResendPacket::RequestResendPacket(class GAME::RequestResendPacket const &)
GAME::RequestResendPacket::RequestResendPacket(void)
GAME::ResetObject::ResetObject(class GAME::ResetObject const &)
GAME::ResetObject::ResetObject(void)
GAME::Resource::Resource(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,enum GAME::Resource::ResourceType)
GAME::ResourceLoader::ResourceLoader(int)
??0RiftgateSectorData@GAME@@QEAA@$$QEAU01@@Z
GAME::RiftgateSectorData::RiftgateSectorData(struct GAME::RiftgateSectorData const &)
GAME::RiftgateSectorData::RiftgateSectorData(void)
??0RiggedLight@GAME@@QEAA@$$QEAU01@@Z
GAME::RiggedLight::RiggedLight(struct GAME::RiggedLight const &)
GAME::RiggedLight::RiggedLight(void)
??0RigidBodyDescription@GAME@@QEAA@$$QEAU01@@Z
GAME::RigidBodyDescription::RigidBodyDescription(struct GAME::RigidBodyDescription const &)
GAME::RigidBodyDescription::RigidBodyDescription(void)
GAME::RouterServices::RouterServices(void)
GAME::RouterServices::RouterServices(class GAME::RouterServices const &)
GAME::SectorData::SectorData(class GAME::SectorData const &)
GAME::SectorData::SectorData(void)
GAME::SectorDataManager::SectorDataManager(class GAME::SectorDataManager const &)
GAME::SectorDataManager::SectorDataManager(void)
GAME::SectorLayers::SectorLayers(void)
GAME::Serializer::Serializer(class GAME::Serializer const &)
GAME::Serializer::Serializer(void)
GAME::ServerAnnouncePacket::ServerAnnouncePacket(class GAME::ServerAnnouncePacket const &)
GAME::ServerAnnouncePacket::ServerAnnouncePacket(void)
GAME::ServerConnectAckPacket::ServerConnectAckPacket(class GAME::ServerConnectAckPacket const &)
GAME::ServerConnectAckPacket::ServerConnectAckPacket(void)
GAME::ServerConnectRejectPacket::ServerConnectRejectPacket(class GAME::ServerConnectRejectPacket const &)
GAME::ServerConnectRejectPacket::ServerConnectRejectPacket(void)
GAME::ServerConnectRequestPacket::ServerConnectRequestPacket(class GAME::ServerConnectRequestPacket const &)
GAME::ServerConnectRequestPacket::ServerConnectRequestPacket(void)
GAME::ServerConnectionManager::ServerConnectionManager(class GAME::ServerConnectionManager const &)
GAME::ServerConnectionManager::ServerConnectionManager(void)
GAME::ServerEntityList::ServerEntityList(class GAME::ServerEntityList const &)
GAME::ServerEntityList::ServerEntityList(void)
??0ServerInfo@GAME@@QEAA@$$QEAU01@@Z
GAME::ServerInfo::ServerInfo(struct GAME::ServerInfo const &)
GAME::ServerInfo::ServerInfo(void)
GAME::ServerNetworkShim::ServerNetworkShim(class GAME::ServerNetworkShim const &)
GAME::ServerNetworkShim::ServerNetworkShim(void)
??0SkeletalPose@GAME@@QEAA@$$QEAV01@@Z
GAME::SkeletalPose::SkeletalPose(class GAME::SkeletalPose const &)
GAME::SkeletalPose::SkeletalPose(void)
GAME::Skybox::Skybox(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)
GAME::SmartObjectId::SmartObjectId(class GAME::SmartObjectId const &)
GAME::SmartObjectId::SmartObjectId(class GAME::ObjectInteractionPacket *)
GAME::SmartObjectIdList::SmartObjectIdList(class GAME::SmartObjectIdList const &)
GAME::SmartObjectIdList::SmartObjectIdList(class GAME::ObjectInteractionPacket *)
??0SmartObjectIdListNullable@GAME@@QEAA@$$QEAV01@@Z
GAME::SmartObjectIdListNullable::SmartObjectIdListNullable(class GAME::SmartObjectIdListNullable const &)
GAME::SmartObjectIdListNullable::SmartObjectIdListNullable(class GAME::ObjectInteractionPacket *)
??0SmartObjectIdNullable@GAME@@QEAA@$$QEAV01@@Z
GAME::SmartObjectIdNullable::SmartObjectIdNullable(class GAME::SmartObjectIdNullable const &)
GAME::SmartObjectIdNullable::SmartObjectIdNullable(class GAME::ObjectInteractionPacket *)
GAME::Socket::Socket(class GAME::Socket const &)
GAME::Socket::Socket(enum GAME::Socket::Type)
GAME::Sound::Sound(class GAME::Sound const &)
GAME::Sound::Sound(enum GAME::Sound::Type,bool)
??0SoundDescriptor@GAME@@QEAA@$$QEAV01@@Z
GAME::SoundDescriptor::SoundDescriptor(class GAME::SoundDescriptor const &)
GAME::SoundDescriptor::SoundDescriptor(void)
GAME::SoundEntity::SoundEntity(void)
GAME::SoundManager::SoundManager(class GAME::ResourceLoader *)
GAME::SoundPak::SoundPak(class GAME::SoundPak const &)
GAME::SoundPak::SoundPak(void)
GAME::SoundResource::SoundResource(class GAME::BaseResourceManager *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::SoundSample::SoundSample(class GAME::SoundSample const &)
GAME::SoundSample::SoundSample(bool)
GAME::SoundStream::SoundStream(class GAME::SoundStream const &)
GAME::SoundStream::SoundStream(bool)
GAME::SoundSystem::SoundSystem(class GAME::SoundSystem const &)
GAME::SoundSystem::SoundSystem(void)
GAME::SpawnActorPacket::SpawnActorPacket(class GAME::SpawnActorPacket const &)
GAME::SpawnActorPacket::SpawnActorPacket(void)
GAME::SteamAuthRequestPacket::SteamAuthRequestPacket(class GAME::SteamAuthRequestPacket const &)
GAME::SteamAuthRequestPacket::SteamAuthRequestPacket(void)
GAME::SteamAuthResponsePacket::SteamAuthResponsePacket(class GAME::SteamAuthResponsePacket const &)
GAME::SteamAuthResponsePacket::SteamAuthResponsePacket(void)
GAME::SteamControllerDevice::SteamControllerDevice(class GAME::SteamControllerDevice const &)
GAME::SteamControllerDevice::SteamControllerDevice(void)
GAME::SteamFriendList::SteamFriendList(void)
GAME::StubConnectionManager::StubConnectionManager(class GAME::StubConnectionManager const &)
GAME::StubConnectionManager::StubConnectionManager(void)
GAME::StubNetworkShim::StubNetworkShim(class GAME::StubNetworkShim const &)
GAME::StubNetworkShim::StubNetworkShim(void)
GAME::StyleManager::StyleManager(void)
??0SystemTimer@GAME@@QEAA@$$QEAV01@@Z
GAME::SystemTimer::SystemTimer(class GAME::SystemTimer const &)
GAME::SystemTimer::SystemTimer(void)
GAME::TableDepot::TableDepot(void)
GAME::Terrain::Terrain(class GAME::Terrain const &)
GAME::Terrain::Terrain(class GAME::Region *)
GAME::TerrainBase::TerrainBase(class GAME::TerrainBase const &)
GAME::TerrainBase::TerrainBase(enum GAME::TerrainBase::TerrainBaseType,class GAME::Region *)
GAME::TerrainPatch::TerrainPatch(class GAME::TerrainPatch const &)
GAME::TerrainPatch::TerrainPatch(class GAME::Actor *,float)
??0TerrainPatchRT@GAME@@QEAA@$$QEAV01@@Z
GAME::TerrainPatchRT::TerrainPatchRT(class GAME::TerrainPatchRT const &)
GAME::TerrainPatchRT::TerrainPatchRT(class GAME::Actor *,float)
??0TerrainRenderInterface@GAME@@QEAA@$$QEAV01@@Z
GAME::TerrainRenderInterface::TerrainRenderInterface(class GAME::TerrainRenderInterface const &)
GAME::TerrainRenderInterface::TerrainRenderInterface(class GAME::Terrain *)
GAME::TerrainRenderInterfaceBase::TerrainRenderInterfaceBase(class GAME::TerrainRenderInterfaceBase const &)
GAME::TerrainRenderInterfaceBase::TerrainRenderInterfaceBase(void)
??0TerrainRenderInterfaceRT@GAME@@QEAA@$$QEAV01@@Z
GAME::TerrainRenderInterfaceRT::TerrainRenderInterfaceRT(class GAME::TerrainRenderInterfaceRT const &)
GAME::TerrainRenderInterfaceRT::TerrainRenderInterfaceRT(class GAME::TerrainRT *)
GAME::TerrainType::TerrainType(class GAME::TerrainType const &)
GAME::TerrainType::TerrainType(void)
GAME::TheoraVideoPlayer::TheoraVideoPlayer(void)
??0Timer@GAME@@QEAA@$$QEAV01@@Z
GAME::Timer::Timer(class GAME::Timer const &)
GAME::Timer::Timer(void)
GAME::Tracker::Tracker(void)
GAME::TrailEffect::TrailEffect(void)
GAME::TransformGizmo::TransformGizmo(void)
GAME::TriggerToken::TriggerToken(struct GAME::TriggerToken const &)
GAME::TriggerToken::TriggerToken(void)
GAME::VideoPlayer::VideoPlayer(class GAME::VideoPlayer const &)
GAME::VideoPlayer::VideoPlayer(void)
??0ViewDistanceSectorData@GAME@@QEAA@$$QEAU01@@Z
GAME::ViewDistanceSectorData::ViewDistanceSectorData(struct GAME::ViewDistanceSectorData const &)
GAME::ViewDistanceSectorData::ViewDistanceSectorData(void)
GAME::Viewport::Viewport(int,int,int,int)
GAME::Viewport::Viewport(void)
GAME::VoiceChatPacket::VoiceChatPacket(class GAME::VoiceChatPacket const &)
GAME::VoiceChatPacket::VoiceChatPacket(void)
GAME::Water::Water(class GAME::Region *)
??0WaterCurve@GAME@@QEAA@$$QEAV01@@Z
GAME::WaterCurve::WaterCurve(class GAME::WaterCurve const &)
GAME::WaterCurve::WaterCurve(unsigned int,class GAME::Space<class GAME::WaterElement> &,class GAME::RenderDevice &,class GAME::Water *,enum GAME::WaterCurve::CurveType)
GAME::WaterLayer::WaterLayer(class GAME::WaterLayer const &)
GAME::WaterLayer::WaterLayer(unsigned int,unsigned int,unsigned int,float,class GAME::Space<class GAME::WaterElement> &,class GAME::RenderDevice &,class GAME::Water *)
GAME::WaterObject::WaterObject(class GAME::WaterObject const &)
GAME::WaterObject::WaterObject(unsigned int,class GAME::Space<class GAME::WaterElement> &,class GAME::RenderDevice &,class GAME::Water *)
GAME::WaterPath::WaterPath(class GAME::WaterPath const &)
GAME::WaterPath::WaterPath(unsigned int,class GAME::Space<class GAME::WaterElement> &,class GAME::RenderDevice &,class GAME::Water *)
GAME::WaterRenderInterface::WaterRenderInterface(class GAME::WaterRenderInterface const &)
GAME::WaterRenderInterface::WaterRenderInterface(void)
GAME::WaterType::WaterType(class GAME::WaterType const &)
GAME::WaterType::WaterType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
GAME::WaterType::WaterType(void)
GAME::WaterTypeManager::WaterTypeManager(void)
GAME::WaterTypeManager::WaterTypeManager(class GAME::WaterTypeManager const &)
GAME::WaterWaveSet::WaterWaveSet(class GAME::WaterWaveSet const &)
GAME::WaterWaveSet::WaterWaveSet(unsigned int,class GAME::Space<class GAME::WaterElement> &,class GAME::RenderDevice &,class GAME::Water *)
GAME::WeaponTrail::WeaponTrail(void)
GAME::WeatherManager::WeatherManager(class GAME::WeatherManager const &)
GAME::WeatherManager::WeatherManager(void)
GAME::WinWindow::WinWindow(class GAME::WinWindow const &)
GAME::WinWindow::WinWindow(void)
??0WindowEventHandler@GAME@@QEAA@$$QEAV01@@Z
GAME::WindowEventHandler::WindowEventHandler(class GAME::WindowEventHandler const &)
GAME::WindowEventHandler::WindowEventHandler(void)
GAME::World::World(void)
GAME::WorldABBox::WorldABBox(class GAME::WorldVec3 const &,class GAME::Vec3 const &)
GAME::WorldABBox::WorldABBox(void)
GAME::WorldCamera::WorldCamera(void)
GAME::WorldCoords::WorldCoords(class GAME::WorldVec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
GAME::WorldCoords::WorldCoords(class GAME::Region *)
GAME::WorldCoords::WorldCoords(class GAME::Region *,class GAME::Coords const &)
GAME::WorldCoords::WorldCoords(void)
GAME::WorldFile::WorldFile(class GAME::WorldFile const &)
GAME::WorldFile::WorldFile(void)
GAME::WorldFrustum::WorldFrustum(class GAME::Region *,class GAME::Frustum const &)
GAME::WorldFrustum::WorldFrustum(void)
GAME::WorldIntersection::WorldIntersection(void)
GAME::WorldVec3::WorldVec3(class GAME::Region *,class GAME::Vec3 const &)
GAME::WorldVec3::WorldVec3(void)
GAME::ZoneManager::ZoneManager(void)
GAME::ZoneManager::ZoneManager(class GAME::ZoneManager const &)
GAME::Singleton<class GAME::AsyncWorker>::~Singleton<class GAME::AsyncWorker>(void)
GAME::Singleton<class GAME::CPUCoreDetector>::~Singleton<class GAME::CPUCoreDetector>(void)
GAME::Singleton<class GAME::DebugRenderManager>::~Singleton<class GAME::DebugRenderManager>(void)
GAME::Singleton<class GAME::EventManager>::~Singleton<class GAME::EventManager>(void)
GAME::Singleton<class GAME::Jukebox>::~Singleton<class GAME::Jukebox>(void)
GAME::Singleton<class GAME::NavManager>::~Singleton<class GAME::NavManager>(void)
GAME::Singleton<class GAME::ObjectManager>::~Singleton<class GAME::ObjectManager>(void)
GAME::Singleton<class GAME::RouterServices>::~Singleton<class GAME::RouterServices>(void)
GAME::Singleton<class GAME::StyleManager>::~Singleton<class GAME::StyleManager>(void)
GAME::Singleton<class GAME::Tracker>::~Singleton<class GAME::Tracker>(void)
GAME::Actor::~Actor(void)
GAME::ActorConfigCommand::~ActorConfigCommand(void)
GAME::AdjustmentSectorData::~AdjustmentSectorData(void)
GAME::AmbianceManager::~AmbianceManager(void)
GAME::AmbientSectorData::~AmbientSectorData(void)
GAME::AnimChannel::~AnimChannel(void)
GAME::Archive::~Archive(void)
GAME::AsyncWorker::~AsyncWorker(void)
GAME::BaseResourceManager::~BaseResourceManager(void)
GAME::Billboard::~Billboard(void)
GAME::BloomSectorData::~BloomSectorData(void)
GAME::BoatOverlayActivity::~BoatOverlayActivity(void)
GAME::BossSectorData::~BossSectorData(void)
GAME::InputDevice::ButtonEvent::~ButtonEvent(void)
GAME::CDKeyPacket::~CDKeyPacket(void)
GAME::CPUCoreDetector::~CPUCoreDetector(void)
GAME::ChallengeSectorData::~ChallengeSectorData(void)
GAME::ChaosBeam::~ChaosBeam(void)
GAME::CharacterAction::~CharacterAction(void)
GAME::CharacterActionPacket::~CharacterActionPacket(void)
GAME::ChatPacket::~ChatPacket(void)
GAME::ClientConnectionManager::~ClientConnectionManager(void)
GAME::ClientDisconnectPacket::~ClientDisconnectPacket(void)
GAME::ClientEntityList::~ClientEntityList(void)
GAME::ClientNetworkShim::~ClientNetworkShim(void)
GAME::ClientReadyPacket::~ClientReadyPacket(void)
GAME::ClientServerQueryPacket::~ClientServerQueryPacket(void)
GAME::ClimateSectorData::~ClimateSectorData(void)
GAME::ColorPulse::~ColorPulse(void)
GAME::ConnectionManager::~ConnectionManager(void)
GAME::ConnectionVerifyPacket::~ConnectionVerifyPacket(void)
GAME::ConversationResource::~ConversationResource(void)
GAME::CriticalSection::~CriticalSection(void)
GAME::CriticalSectionLock::~CriticalSectionLock(void)
GAME::CurveData::~CurveData(void)
GAME::DamageSectorData::~DamageSectorData(void)
GAME::DayNightLight::~DayNightLight(void)
GAME::DebugMessagePacket::~DebugMessagePacket(void)
GAME::DebugRenderManager::~DebugRenderManager(void)
GAME::Decal::~Decal(void)
GAME::DecalSet::~DecalSet(void)
GAME::DirtyRectSet::~DirtyRectSet(void)
GAME::DisconnectClientPacket::~DisconnectClientPacket(void)
GAME::EditorFilter::~EditorFilter(void)
GAME::Effect::~Effect(void)
GAME::EffectData::~EffectData(void)
GAME::EffectEntity::~EffectEntity(void)
GAME::EffectResource::~EffectResource(void)
GAME::Emitter::~Emitter(void)
GAME::EmitterData::~EmitterData(void)
GAME::Engine::~Engine(void)
GAME::Entity::~Entity(void)
GAME::Event::~Event(void)
GAME::EventManager::~EventManager(void)
GAME::FFDGizmo::~FFDGizmo(void)
GAME::FOWManager::~FOWManager(void)
GAME::File::~File(void)
GAME::FileDirectory::~FileDirectory(void)
GAME::FileSource::~FileSource(void)
GAME::FileSourceArchive::~FileSourceArchive(void)
GAME::FileSourceDirectory::~FileSourceDirectory(void)
GAME::FileSystem::~FileSystem(void)
GAME::FireLight::~FireLight(void)
GAME::FlickerLight::~FlickerLight(void)
GAME::FlyingBolt::~FlyingBolt(void)
GAME::FogOfWar::~FogOfWar(void)
GAME::FogSectorData::~FogSectorData(void)
GAME::FontStyle::~FontStyle(void)
GAME::FragmentPacket::~FragmentPacket(void)
GAME::FriendList::~FriendList(void)
GAME::FusedBone::~FusedBone(void)
GAME::GMIEffect::~GMIEffect(void)
GAME::GMIEffectIcey::~GMIEffectIcey(void)
GAME::GPDTex2VertexBuilder::~GPDTex2VertexBuilder(void)
GAME::GameInfo::~GameInfo(void)
GAME::GraphicsAnim::~GraphicsAnim(void)
GAME::GraphicsCanvas::~GraphicsCanvas(void)
GAME::GraphicsCursor::~GraphicsCursor(void)
GAME::GraphicsDeferredRenderer::~GraphicsDeferredRenderer(void)
GAME::GraphicsEngine::~GraphicsEngine(void)
GAME::GraphicsEngineSettings::~GraphicsEngineSettings(void)
GAME::GraphicsFont2::~GraphicsFont2(void)
GAME::GraphicsLight::~GraphicsLight(void)
GAME::GraphicsMTRenderer::~GraphicsMTRenderer(void)
GAME::GraphicsMesh::~GraphicsMesh(void)
GAME::GraphicsMeshInstance::~GraphicsMeshInstance(void)
GAME::GraphicsPrimitiveDrawer::~GraphicsPrimitiveDrawer(void)
GAME::GraphicsScene::~GraphicsScene(void)
GAME::GraphicsShader2::~GraphicsShader2(void)
GAME::GraphicsTexture::~GraphicsTexture(void)
GAME::GrassObject::~GrassObject(void)
GAME::GridBase::~GridBase(void)
GAME::GridRegion::~GridRegion(void)
GAME::GridRegionRandom::~GridRegionRandom(void)
GAME::GridSystem::~GridSystem(void)
GAME::HeartbeatPacket::~HeartbeatPacket(void)
GAME::HeartbeatResponsePacket::~HeartbeatResponsePacket(void)
GAME::HookPack::~HookPack(void)
GAME::HwndWindow::~HwndWindow(void)
GAME::IOStreamRead::~IOStreamRead(void)
GAME::IOStreamWrite::~IOStreamWrite(void)
GAME::ITTEvent::~ITTEvent(void)
GAME::Image::~Image(void)
GAME::ImageResource::~ImageResource(void)
GAME::ImpassableData::~ImpassableData(void)
GAME::InputDevice::~InputDevice(void)
GAME::InstanceGroup::~InstanceGroup(void)
GAME::InstanceGroupManager::~InstanceGroupManager(void)
GAME::InterfaceSkin::~InterfaceSkin(void)
GAME::InternalParam::~InternalParam(void)
GAME::Jukebox::~Jukebox(void)
GAME::Level::~Level(void)
GAME::LevelLimitSectorData::~LevelLimitSectorData(void)
GAME::Light::~Light(void)
GAME::LightRig::~LightRig(void)
GAME::Lightning2::~Lightning2(void)
GAME::LineEffect2::~LineEffect2(void)
GAME::LineEffect::~LineEffect(void)
GAME::LinkControlAckPacket::~LinkControlAckPacket(void)
GAME::LinkMTUTestPacket::~LinkMTUTestPacket(void)
GAME::LoadTable::~LoadTable(void)
GAME::LoadTableBinary::~LoadTableBinary(void)
GAME::LocalizationManager::~LocalizationManager(void)
GAME::MapChunkCallback::~MapChunkCallback(void)
GAME::MemoryMappedFile::~MemoryMappedFile(void)
GAME::NameSectorData::~NameSectorData(void)
GAME::NavManager::~NavManager(void)
GAME::NavMesh::~NavMesh(void)
GAME::NavMeshBuilder::~NavMeshBuilder(void)
GAME::NetPacket::~NetPacket(void)
GAME::NetPacketDescriber::~NetPacketDescriber(void)
GAME::NetPacketHeader::~NetPacketHeader(void)
GAME::NetPacketOutBuffer::~NetPacketOutBuffer(void)
GAME::NetworkEntityList::~NetworkEntityList(void)
GAME::NetworkLinkStats::~NetworkLinkStats(void)
GAME::NetworkQueue::~NetworkQueue(void)
GAME::NetworkRateCounter::~NetworkRateCounter(void)
GAME::NetworkServerBrowser::~NetworkServerBrowser(void)
GAME::NetworkShim::~NetworkShim(void)
GAME::NetworkSocket::~NetworkSocket(void)
GAME::NoiseTexture::~NoiseTexture(void)
GAME::Object::~Object(void)
GAME::ObjectContainerPacket::~ObjectContainerPacket(void)
GAME::ObjectInteractionPacket::~ObjectInteractionPacket(void)
GAME::ObjectManager::~ObjectManager(void)
GAME::OverlayActivity::~OverlayActivity(void)
GAME::OverlayActivityManager::~OverlayActivityManager(void)
GAME::PIXEvent::~PIXEvent(void)
GAME::PhysicsEngine2::~PhysicsEngine2(void)
GAME::PhysicsMesh::~PhysicsMesh(void)
GAME::PhysicsMeshBase::~PhysicsMeshBase(void)
GAME::PhysicsMesh_Bullet::~PhysicsMesh_Bullet(void)
GAME::PhysicsObject2::~PhysicsObject2(void)
GAME::PhysicsRigidBody2::~PhysicsRigidBody2(void)
GAME::PhysicsSystem2::~PhysicsSystem2(void)
GAME::PieOmatic::~PieOmatic(void)
GAME::PingPacket::~PingPacket(void)
GAME::PointDisturbance::~PointDisturbance(void)
GAME::PortableLocalization::~PortableLocalization(void)
GAME::Portal::~Portal(void)
GAME::Profile::~Profile(void)
GAME::PulseLight::~PulseLight(void)
GAME::PvpSectorData::~PvpSectorData(void)
GAME::Region::~Region(void)
GAME::RegionId::~RegionId(void)
GAME::RemoveClientPacket::~RemoveClientPacket(void)
GAME::RemoveEntityPacket::~RemoveEntityPacket(void)
GAME::RenderDevice::~RenderDevice(void)
GAME::RenderDynamicIndexBuffer::~RenderDynamicIndexBuffer(void)
GAME::RenderDynamicVertexBuffer::~RenderDynamicVertexBuffer(void)
GAME::RenderGeometryShader::~RenderGeometryShader(void)
GAME::RenderIndexBuffer::~RenderIndexBuffer(void)
GAME::RenderPass::~RenderPass(void)
GAME::RenderPixelShader::~RenderPixelShader(void)
GAME::RenderSurface::~RenderSurface(void)
GAME::RenderTexture::~RenderTexture(void)
GAME::RenderVertexBuffer::~RenderVertexBuffer(void)
GAME::RenderVertexDeclaration::~RenderVertexDeclaration(void)
GAME::RenderVertexShader::~RenderVertexShader(void)
GAME::RequestResendPacket::~RequestResendPacket(void)
GAME::ResetObject::~ResetObject(void)
GAME::Resource::~Resource(void)
GAME::ResourceLoader::~ResourceLoader(void)
GAME::RiftgateSectorData::~RiftgateSectorData(void)
GAME::RigidBodyDescription::~RigidBodyDescription(void)
GAME::RouterServices::~RouterServices(void)
GAME::SectorData::~SectorData(void)
GAME::SectorDataManager::~SectorDataManager(void)
GAME::SectorLayers::~SectorLayers(void)
GAME::Serializer::~Serializer(void)
GAME::ServerAnnouncePacket::~ServerAnnouncePacket(void)
GAME::ServerConnectAckPacket::~ServerConnectAckPacket(void)
GAME::ServerConnectRejectPacket::~ServerConnectRejectPacket(void)
GAME::ServerConnectRequestPacket::~ServerConnectRequestPacket(void)
GAME::ServerConnectionManager::~ServerConnectionManager(void)
GAME::ServerEntityList::~ServerEntityList(void)
GAME::ServerInfo::~ServerInfo(void)
GAME::ServerNetworkShim::~ServerNetworkShim(void)
GAME::SkeletalPose::~SkeletalPose(void)
GAME::Skybox::~Skybox(void)
GAME::SmartObjectId::~SmartObjectId(void)
GAME::SmartObjectIdList::~SmartObjectIdList(void)
GAME::SmartObjectIdListNullable::~SmartObjectIdListNullable(void)
GAME::SmartObjectIdNullable::~SmartObjectIdNullable(void)
GAME::Socket::~Socket(void)
GAME::Sound::~Sound(void)
GAME::SoundDescriptor::~SoundDescriptor(void)
GAME::SoundEntity::~SoundEntity(void)
GAME::SoundManager::~SoundManager(void)
GAME::SoundPak::~SoundPak(void)
GAME::SoundResource::~SoundResource(void)
GAME::SoundSample::~SoundSample(void)
GAME::SoundStream::~SoundStream(void)
GAME::SoundSystem::~SoundSystem(void)
GAME::SpawnActorPacket::~SpawnActorPacket(void)
GAME::SteamAuthRequestPacket::~SteamAuthRequestPacket(void)
GAME::SteamAuthResponsePacket::~SteamAuthResponsePacket(void)
GAME::SteamControllerDevice::~SteamControllerDevice(void)
GAME::SteamFriendList::~SteamFriendList(void)
GAME::StubConnectionManager::~StubConnectionManager(void)
GAME::StubNetworkShim::~StubNetworkShim(void)
GAME::StyleManager::~StyleManager(void)
GAME::TableDepot::~TableDepot(void)
GAME::Terrain::~Terrain(void)
GAME::TerrainBase::~TerrainBase(void)
GAME::TerrainPatch::~TerrainPatch(void)
GAME::TerrainPatchRT::~TerrainPatchRT(void)
GAME::TerrainRenderInterface::~TerrainRenderInterface(void)
GAME::TerrainRenderInterfaceBase::~TerrainRenderInterfaceBase(void)
GAME::TerrainRenderInterfaceRT::~TerrainRenderInterfaceRT(void)
GAME::TerrainType::~TerrainType(void)
GAME::TheoraVideoPlayer::~TheoraVideoPlayer(void)
GAME::Tracker::~Tracker(void)
GAME::TrailEffect::~TrailEffect(void)
GAME::TriggerToken::~TriggerToken(void)
GAME::VideoPlayer::~VideoPlayer(void)
GAME::ViewDistanceSectorData::~ViewDistanceSectorData(void)
GAME::VoiceChatPacket::~VoiceChatPacket(void)
GAME::Water::~Water(void)
GAME::WaterCurve::~WaterCurve(void)
GAME::WaterLayer::~WaterLayer(void)
GAME::WaterObject::~WaterObject(void)
GAME::WaterPath::~WaterPath(void)
GAME::WaterRenderInterface::~WaterRenderInterface(void)
GAME::WaterType::~WaterType(void)
GAME::WaterTypeManager::~WaterTypeManager(void)
GAME::WaterWaveSet::~WaterWaveSet(void)
GAME::WeaponTrail::~WeaponTrail(void)
GAME::WeatherManager::~WeatherManager(void)
GAME::WinWindow::~WinWindow(void)
GAME::World::~World(void)
GAME::WorldFile::~WorldFile(void)
GAME::ZoneManager::~ZoneManager(void)
??4?$BaseCounter@$00@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::BaseCounter<1> & GAME::BaseCounter<1>::operator=(class GAME::BaseCounter<1> const &)
??4?$BaseCounter@$0A@@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::BaseCounter<0> & GAME::BaseCounter<0>::operator=(class GAME::BaseCounter<0> const &)
??4?$FilterFunction@VEntity@GAME@@@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::FilterFunction<class GAME::Entity> & GAME::FilterFunction<class GAME::Entity>::operator=(class GAME::FilterFunction<class GAME::Entity> const &)
class GAME::Singleton<class GAME::AsyncWorker> & GAME::Singleton<class GAME::AsyncWorker>::operator=(class GAME::Singleton<class GAME::AsyncWorker> const &)
class GAME::Singleton<class GAME::CPUCoreDetector> & GAME::Singleton<class GAME::CPUCoreDetector>::operator=(class GAME::Singleton<class GAME::CPUCoreDetector> const &)
class GAME::Singleton<class GAME::DebugRenderManager> & GAME::Singleton<class GAME::DebugRenderManager>::operator=(class GAME::Singleton<class GAME::DebugRenderManager> const &)
class GAME::Singleton<class GAME::EventManager> & GAME::Singleton<class GAME::EventManager>::operator=(class GAME::Singleton<class GAME::EventManager> const &)
class GAME::Singleton<class GAME::Jukebox> & GAME::Singleton<class GAME::Jukebox>::operator=(class GAME::Singleton<class GAME::Jukebox> const &)
class GAME::Singleton<class GAME::NavManager> & GAME::Singleton<class GAME::NavManager>::operator=(class GAME::Singleton<class GAME::NavManager> const &)
class GAME::Singleton<class GAME::ObjectManager> & GAME::Singleton<class GAME::ObjectManager>::operator=(class GAME::Singleton<class GAME::ObjectManager> const &)
class GAME::Singleton<class GAME::RouterServices> & GAME::Singleton<class GAME::RouterServices>::operator=(class GAME::Singleton<class GAME::RouterServices> const &)
class GAME::Singleton<class GAME::StyleManager> & GAME::Singleton<class GAME::StyleManager>::operator=(class GAME::Singleton<class GAME::StyleManager> const &)
class GAME::Singleton<class GAME::Tracker> & GAME::Singleton<class GAME::Tracker>::operator=(class GAME::Singleton<class GAME::Tracker> const &)
class GAME::ActorConfigCommand & GAME::ActorConfigCommand::operator=(class GAME::ActorConfigCommand const &)
??4AdjustmentSectorData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::AdjustmentSectorData & GAME::AdjustmentSectorData::operator=(class GAME::AdjustmentSectorData const &)
??4AmbientSectorData@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::AmbientSectorData & GAME::AmbientSectorData::operator=(struct GAME::AmbientSectorData const &)
??4AnimChannel@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::AnimChannel & GAME::AnimChannel::operator=(struct GAME::AnimChannel const &)
??4BloomSectorData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::BloomSectorData & GAME::BloomSectorData::operator=(class GAME::BloomSectorData const &)
class GAME::BoatOverlayActivity & GAME::BoatOverlayActivity::operator=(class GAME::BoatOverlayActivity const &)
??4BossSectorData@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::BossSectorData & GAME::BossSectorData::operator=(struct GAME::BossSectorData const &)
class GAME::CDKeyPacket & GAME::CDKeyPacket::operator=(class GAME::CDKeyPacket const &)
??4CPUCoreDetector@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::CPUCoreDetector & GAME::CPUCoreDetector::operator=(class GAME::CPUCoreDetector const &)
??4Camera@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::Camera & GAME::Camera::operator=(class GAME::Camera const &)
??4ChallengeSectorData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::ChallengeSectorData & GAME::ChallengeSectorData::operator=(class GAME::ChallengeSectorData const &)
class GAME::CharacterAction & GAME::CharacterAction::operator=(class GAME::CharacterAction const &)
class GAME::CharacterActionPacket & GAME::CharacterActionPacket::operator=(class GAME::CharacterActionPacket const &)
class GAME::ChatPacket & GAME::ChatPacket::operator=(class GAME::ChatPacket const &)
class GAME::ClientConnectionManager & GAME::ClientConnectionManager::operator=(class GAME::ClientConnectionManager const &)
class GAME::ClientDisconnectPacket & GAME::ClientDisconnectPacket::operator=(class GAME::ClientDisconnectPacket const &)
class GAME::ClientEntityList & GAME::ClientEntityList::operator=(class GAME::ClientEntityList const &)
class GAME::ClientNetworkShim & GAME::ClientNetworkShim::operator=(class GAME::ClientNetworkShim const &)
class GAME::ClientReadyPacket & GAME::ClientReadyPacket::operator=(class GAME::ClientReadyPacket const &)
class GAME::ClientServerQueryPacket & GAME::ClientServerQueryPacket::operator=(class GAME::ClientServerQueryPacket const &)
??4ClimateSectorData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::ClimateSectorData & GAME::ClimateSectorData::operator=(class GAME::ClimateSectorData const &)
class GAME::ColorPulse & GAME::ColorPulse::operator=(class GAME::ColorPulse const &)
class GAME::ConnectionManager & GAME::ConnectionManager::operator=(class GAME::ConnectionManager const &)
class GAME::ConnectionVerifyPacket & GAME::ConnectionVerifyPacket::operator=(class GAME::ConnectionVerifyPacket const &)
??4ControllerEvent@InputDevice@GAME@@QEAAAEAU012@$$QEAU012@@Z
struct GAME::InputDevice::ControllerEvent & GAME::InputDevice::ControllerEvent::operator=(struct GAME::InputDevice::ControllerEvent const &)
??4CurveData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::CurveData & GAME::CurveData::operator=(class GAME::CurveData const &)
??4DamageSectorData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::DamageSectorData & GAME::DamageSectorData::operator=(class GAME::DamageSectorData const &)
class GAME::DebugMessagePacket & GAME::DebugMessagePacket::operator=(class GAME::DebugMessagePacket const &)
??4DetailMapFilterFunction@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::DetailMapFilterFunction & GAME::DetailMapFilterFunction::operator=(class GAME::DetailMapFilterFunction const &)
??4DirtyRect@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::DirtyRect & GAME::DirtyRect::operator=(class GAME::DirtyRect const &)
??4DirtyRectSet@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::DirtyRectSet & GAME::DirtyRectSet::operator=(class GAME::DirtyRectSet const &)
class GAME::DisconnectClientPacket & GAME::DisconnectClientPacket::operator=(class GAME::DisconnectClientPacket const &)
??4DisplayWidget@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::DisplayWidget & GAME::DisplayWidget::operator=(class GAME::DisplayWidget const &)
class GAME::Effect & GAME::Effect::operator=(class GAME::Effect const &)
class GAME::EffectData & GAME::EffectData::operator=(class GAME::EffectData const &)
class GAME::Emitter & GAME::Emitter::operator=(class GAME::Emitter const &)
class GAME::EmitterData & GAME::EmitterData::operator=(class GAME::EmitterData const &)
class GAME::FFDGizmo & GAME::FFDGizmo::operator=(class GAME::FFDGizmo const &)
class GAME::FOWManager & GAME::FOWManager::operator=(class GAME::FOWManager const &)
class GAME::File & GAME::File::operator=(class GAME::File const &)
class GAME::FileSource & GAME::FileSource::operator=(class GAME::FileSource const &)
class GAME::FileSystem & GAME::FileSystem::operator=(class GAME::FileSystem const &)
??4FogSectorData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::FogSectorData & GAME::FogSectorData::operator=(class GAME::FogSectorData const &)
??4FontStyle@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::FontStyle & GAME::FontStyle::operator=(struct GAME::FontStyle const &)
class GAME::FragmentPacket & GAME::FragmentPacket::operator=(class GAME::FragmentPacket const &)
??4FrameCounter@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::FrameCounter & GAME::FrameCounter::operator=(class GAME::FrameCounter const &)
class GAME::FrameCounter & GAME::FrameCounter::operator=(int)
??4FusedBone@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::FusedBone & GAME::FusedBone::operator=(struct GAME::FusedBone const &)
class GAME::GMIEffect & GAME::GMIEffect::operator=(class GAME::GMIEffect const &)
class GAME::GMIEffectIcey & GAME::GMIEffectIcey::operator=(class GAME::GMIEffectIcey const &)
??4GMIEffectListener@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::GMIEffectListener & GAME::GMIEffectListener::operator=(class GAME::GMIEffectListener const &)
??4GPDDefaultVertexBuilder@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::GPDDefaultVertexBuilder & GAME::GPDDefaultVertexBuilder::operator=(class GAME::GPDDefaultVertexBuilder const &)
class GAME::GPDTex2VertexBuilder & GAME::GPDTex2VertexBuilder::operator=(class GAME::GPDTex2VertexBuilder const &)
class GAME::GameInfo & GAME::GameInfo::operator=(class GAME::GameInfo const &)
??4GameTimer@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::GameTimer & GAME::GameTimer::operator=(class GAME::GameTimer const &)
??4GlobalCounter@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::GlobalCounter & GAME::GlobalCounter::operator=(class GAME::GlobalCounter const &)
class GAME::GlobalCounter & GAME::GlobalCounter::operator=(int)
??4GraphicsEngineSettings@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::GraphicsEngineSettings & GAME::GraphicsEngineSettings::operator=(class GAME::GraphicsEngineSettings const &)
??4GraphicsLight@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::GraphicsLight & GAME::GraphicsLight::operator=(class GAME::GraphicsLight const &)
class GAME::GraphicsMeshInstance & GAME::GraphicsMeshInstance::operator=(class GAME::GraphicsMeshInstance &)
??4GraphicsRenderable@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::GraphicsRenderable & GAME::GraphicsRenderable::operator=(class GAME::GraphicsRenderable const &)
class GAME::GrassObject & GAME::GrassObject::operator=(class GAME::GrassObject const &)
class GAME::GridBase & GAME::GridBase::operator=(class GAME::GridBase const &)
class GAME::GridSystem & GAME::GridSystem::operator=(class GAME::GridSystem const &)
class GAME::HeartbeatPacket & GAME::HeartbeatPacket::operator=(class GAME::HeartbeatPacket const &)
class GAME::HeartbeatResponsePacket & GAME::HeartbeatResponsePacket::operator=(class GAME::HeartbeatResponsePacket const &)
class GAME::HookPack & GAME::HookPack::operator=(class GAME::HookPack const &)
class GAME::HwndWindow & GAME::HwndWindow::operator=(class GAME::HwndWindow const &)
??4IGPDVertexBuilder@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::IGPDVertexBuilder & GAME::IGPDVertexBuilder::operator=(class GAME::IGPDVertexBuilder const &)
??4IPVNetworkAddress@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::IPVNetworkAddress & GAME::IPVNetworkAddress::operator=(class GAME::IPVNetworkAddress const &)
??4IPhysics2@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::IPhysics2 & GAME::IPhysics2::operator=(class GAME::IPhysics2 const &)
class GAME::Image & GAME::Image::operator=(class GAME::Image const &)
class GAME::InputDevice & GAME::InputDevice::operator=(class GAME::InputDevice const &)
class GAME::InstanceGroup & GAME::InstanceGroup::operator=(class GAME::InstanceGroup const &)
class GAME::InterfaceSkin & GAME::InterfaceSkin::operator=(class GAME::InterfaceSkin const &)
class GAME::InternalParam & GAME::InternalParam::operator=(class GAME::InternalParam const &)
??4Intersection@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::Intersection & GAME::Intersection::operator=(class GAME::Intersection const &)
??4JointDescription@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::JointDescription & GAME::JointDescription::operator=(struct GAME::JointDescription const &)
??4JoystickEvent@InputDevice@GAME@@QEAAAEAU012@$$QEAU012@@Z
struct GAME::InputDevice::JoystickEvent & GAME::InputDevice::JoystickEvent::operator=(struct GAME::InputDevice::JoystickEvent const &)
class GAME::Jukebox & GAME::Jukebox::operator=(class GAME::Jukebox const &)
??4LevelLimitSectorData@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::LevelLimitSectorData & GAME::LevelLimitSectorData::operator=(class GAME::LevelLimitSectorData const &)
??4LightRig@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::LightRig & GAME::LightRig::operator=(class GAME::LightRig const &)
class GAME::LinkControlAckPacket & GAME::LinkControlAckPacket::operator=(class GAME::LinkControlAckPacket const &)
class GAME::LinkMTUTestPacket & GAME::LinkMTUTestPacket::operator=(class GAME::LinkMTUTestPacket const &)
class GAME::LocalizationManager & GAME::LocalizationManager::operator=(class GAME::LocalizationManager const &)
class GAME::MapChunkCallback & GAME::MapChunkCallback::operator=(class GAME::MapChunkCallback const &)
??4MouseEvent@InputDevice@GAME@@QEAAAEAU012@$$QEAU012@@Z
struct GAME::InputDevice::MouseEvent & GAME::InputDevice::MouseEvent::operator=(struct GAME::InputDevice::MouseEvent const &)
??4Name@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::Name & GAME::Name::operator=(class GAME::Name const &)
??4NameSectorData@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::NameSectorData & GAME::NameSectorData::operator=(struct GAME::NameSectorData const &)
class GAME::NavManager & GAME::NavManager::operator=(class GAME::NavManager const &)
class GAME::NavMesh & GAME::NavMesh::operator=(class GAME::NavMesh const &)
??4NavMeshBuilder@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::NavMeshBuilder & GAME::NavMeshBuilder::operator=(class GAME::NavMeshBuilder const &)
class GAME::NetPacket & GAME::NetPacket::operator=(class GAME::NetPacket const &)
??4NetPacketDescriber@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::NetPacketDescriber & GAME::NetPacketDescriber::operator=(class GAME::NetPacketDescriber const &)
class GAME::NetPacketHeader & GAME::NetPacketHeader::operator=(class GAME::NetPacketHeader const &)
??4NetPacketInBuffer@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::NetPacketInBuffer & GAME::NetPacketInBuffer::operator=(class GAME::NetPacketInBuffer const &)
??4NetPacketOutBuffer@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::NetPacketOutBuffer & GAME::NetPacketOutBuffer::operator=(class GAME::NetPacketOutBuffer const &)
??4NetworkAddress@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::NetworkAddress & GAME::NetworkAddress::operator=(class GAME::NetworkAddress const &)
??4NetworkControllerBase@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::NetworkControllerBase & GAME::NetworkControllerBase::operator=(class GAME::NetworkControllerBase const &)
class GAME::NetworkEntityList & GAME::NetworkEntityList::operator=(class GAME::NetworkEntityList const &)
class GAME::NetworkLinkStats & GAME::NetworkLinkStats::operator=(class GAME::NetworkLinkStats const &)
class GAME::NetworkQueue & GAME::NetworkQueue::operator=(class GAME::NetworkQueue const &)
class GAME::NetworkRateCounter & GAME::NetworkRateCounter::operator=(class GAME::NetworkRateCounter const &)
class GAME::NetworkServerBrowser & GAME::NetworkServerBrowser::operator=(class GAME::NetworkServerBrowser const &)
class GAME::NetworkShim & GAME::NetworkShim::operator=(class GAME::NetworkShim const &)
class GAME::NoiseTexture & GAME::NoiseTexture::operator=(class GAME::NoiseTexture const &)
class GAME::Object & GAME::Object::operator=(class GAME::Object const &)
class GAME::ObjectContainerPacket & GAME::ObjectContainerPacket::operator=(class GAME::ObjectContainerPacket const &)
class GAME::ObjectInteractionPacket & GAME::ObjectInteractionPacket::operator=(class GAME::ObjectInteractionPacket const &)
class GAME::OverlayActivity & GAME::OverlayActivity::operator=(class GAME::OverlayActivity const &)
class GAME::PhysicsMesh & GAME::PhysicsMesh::operator=(class GAME::PhysicsMesh const &)
class GAME::PhysicsMeshBase & GAME::PhysicsMeshBase::operator=(class GAME::PhysicsMeshBase const &)
class GAME::PhysicsMesh_Bullet & GAME::PhysicsMesh_Bullet::operator=(class GAME::PhysicsMesh_Bullet const &)
class GAME::PhysicsObject2 & GAME::PhysicsObject2::operator=(class GAME::PhysicsObject2 const &)
class GAME::PhysicsRigidBody2 & GAME::PhysicsRigidBody2::operator=(class GAME::PhysicsRigidBody2 const &)
class GAME::PhysicsSystem2 & GAME::PhysicsSystem2::operator=(class GAME::PhysicsSystem2 const &)
??4PhysicsUtil@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::PhysicsUtil & GAME::PhysicsUtil::operator=(class GAME::PhysicsUtil const &)
class GAME::PieOmatic & GAME::PieOmatic::operator=(class GAME::PieOmatic const &)
class GAME::PingPacket & GAME::PingPacket::operator=(class GAME::PingPacket const &)
class GAME::PortableLocalization & GAME::PortableLocalization::operator=(class GAME::PortableLocalization const &)
??4PvpSectorData@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::PvpSectorData & GAME::PvpSectorData::operator=(struct GAME::PvpSectorData const &)
class GAME::RegionId const & GAME::RegionId::operator=(class GAME::RegionId const &)
class GAME::RemoveClientPacket & GAME::RemoveClientPacket::operator=(class GAME::RemoveClientPacket const &)
class GAME::RemoveEntityPacket & GAME::RemoveEntityPacket::operator=(class GAME::RemoveEntityPacket const &)
class GAME::RenderDevice & GAME::RenderDevice::operator=(class GAME::RenderDevice const &)
class GAME::RenderDynamicIndexBuffer & GAME::RenderDynamicIndexBuffer::operator=(class GAME::RenderDynamicIndexBuffer const &)
class GAME::RenderDynamicVertexBuffer & GAME::RenderDynamicVertexBuffer::operator=(class GAME::RenderDynamicVertexBuffer const &)
class GAME::RenderGeometryShader & GAME::RenderGeometryShader::operator=(class GAME::RenderGeometryShader const &)
class GAME::RenderIndexBuffer & GAME::RenderIndexBuffer::operator=(class GAME::RenderIndexBuffer const &)
class GAME::RenderPixelShader & GAME::RenderPixelShader::operator=(class GAME::RenderPixelShader const &)
class GAME::RenderSurface & GAME::RenderSurface::operator=(class GAME::RenderSurface const &)
class GAME::RenderTexture & GAME::RenderTexture::operator=(class GAME::RenderTexture const &)
class GAME::RenderVertexBuffer & GAME::RenderVertexBuffer::operator=(class GAME::RenderVertexBuffer const &)
class GAME::RenderVertexDeclaration & GAME::RenderVertexDeclaration::operator=(class GAME::RenderVertexDeclaration const &)
class GAME::RenderVertexShader & GAME::RenderVertexShader::operator=(class GAME::RenderVertexShader const &)
class GAME::RequestResendPacket & GAME::RequestResendPacket::operator=(class GAME::RequestResendPacket const &)
class GAME::ResetObject & GAME::ResetObject::operator=(class GAME::ResetObject const &)
??4RiftgateSectorData@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::RiftgateSectorData & GAME::RiftgateSectorData::operator=(struct GAME::RiftgateSectorData const &)
??4RiggedLight@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::RiggedLight & GAME::RiggedLight::operator=(struct GAME::RiggedLight const &)
??4RigidBodyDescription@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::RigidBodyDescription & GAME::RigidBodyDescription::operator=(struct GAME::RigidBodyDescription const &)
class GAME::SectorData & GAME::SectorData::operator=(class GAME::SectorData const &)
class GAME::SectorDataManager & GAME::SectorDataManager::operator=(class GAME::SectorDataManager const &)
class GAME::Serializer & GAME::Serializer::operator=(class GAME::Serializer const &)
class GAME::ServerAnnouncePacket & GAME::ServerAnnouncePacket::operator=(class GAME::ServerAnnouncePacket const &)
class GAME::ServerConnectAckPacket & GAME::ServerConnectAckPacket::operator=(class GAME::ServerConnectAckPacket const &)
class GAME::ServerConnectRejectPacket & GAME::ServerConnectRejectPacket::operator=(class GAME::ServerConnectRejectPacket const &)
class GAME::ServerConnectRequestPacket & GAME::ServerConnectRequestPacket::operator=(class GAME::ServerConnectRequestPacket const &)
class GAME::ServerConnectionManager & GAME::ServerConnectionManager::operator=(class GAME::ServerConnectionManager const &)
class GAME::ServerEntityList & GAME::ServerEntityList::operator=(class GAME::ServerEntityList const &)
??4ServerInfo@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::ServerInfo & GAME::ServerInfo::operator=(struct GAME::ServerInfo const &)
class GAME::ServerNetworkShim & GAME::ServerNetworkShim::operator=(class GAME::ServerNetworkShim const &)
??4SkeletalPose@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::SkeletalPose & GAME::SkeletalPose::operator=(class GAME::SkeletalPose const &)
class GAME::Skybox & GAME::Skybox::operator=(class GAME::Skybox const &)
unsigned int & GAME::SmartObjectId::operator=(unsigned int const &)
class GAME::SmartObjectId & GAME::SmartObjectId::operator=(class GAME::SmartObjectId const &)
class GAME::SmartObjectIdList & GAME::SmartObjectIdList::operator=(class GAME::SmartObjectIdList const &)
class mem::vector<unsigned int> const & GAME::SmartObjectIdList::operator=(class mem::vector<unsigned int> const &)
??4SmartObjectIdListNullable@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::SmartObjectIdListNullable & GAME::SmartObjectIdListNullable::operator=(class GAME::SmartObjectIdListNullable const &)
class mem::vector<unsigned int> const & GAME::SmartObjectIdListNullable::operator=(class mem::vector<unsigned int> const &)
unsigned int & GAME::SmartObjectIdNullable::operator=(unsigned int const &)
??4SmartObjectIdNullable@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::SmartObjectIdNullable & GAME::SmartObjectIdNullable::operator=(class GAME::SmartObjectIdNullable const &)
class GAME::Sound & GAME::Sound::operator=(class GAME::Sound const &)
??4SoundDescriptor@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::SoundDescriptor & GAME::SoundDescriptor::operator=(class GAME::SoundDescriptor const &)
class GAME::SoundPak & GAME::SoundPak::operator=(class GAME::SoundPak const &)
class GAME::SoundSample & GAME::SoundSample::operator=(class GAME::SoundSample const &)
class GAME::SoundStream & GAME::SoundStream::operator=(class GAME::SoundStream const &)
class GAME::SoundSystem & GAME::SoundSystem::operator=(class GAME::SoundSystem const &)
class GAME::SpawnActorPacket & GAME::SpawnActorPacket::operator=(class GAME::SpawnActorPacket const &)
class GAME::SteamAuthRequestPacket & GAME::SteamAuthRequestPacket::operator=(class GAME::SteamAuthRequestPacket const &)
class GAME::SteamAuthResponsePacket & GAME::SteamAuthResponsePacket::operator=(class GAME::SteamAuthResponsePacket const &)
class GAME::SteamControllerDevice & GAME::SteamControllerDevice::operator=(class GAME::SteamControllerDevice const &)
class GAME::StubConnectionManager & GAME::StubConnectionManager::operator=(class GAME::StubConnectionManager const &)
class GAME::StubNetworkShim & GAME::StubNetworkShim::operator=(class GAME::StubNetworkShim const &)
class GAME::StyleManager & GAME::StyleManager::operator=(class GAME::StyleManager const &)
??4SystemTimer@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::SystemTimer & GAME::SystemTimer::operator=(class GAME::SystemTimer const &)
class GAME::TerrainPatch & GAME::TerrainPatch::operator=(class GAME::TerrainPatch const &)
??4TerrainPatchRT@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::TerrainPatchRT & GAME::TerrainPatchRT::operator=(class GAME::TerrainPatchRT const &)
??4TerrainRenderInterface@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::TerrainRenderInterface & GAME::TerrainRenderInterface::operator=(class GAME::TerrainRenderInterface const &)
class GAME::TerrainRenderInterfaceBase & GAME::TerrainRenderInterfaceBase::operator=(class GAME::TerrainRenderInterfaceBase const &)
??4TerrainRenderInterfaceRT@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::TerrainRenderInterfaceRT & GAME::TerrainRenderInterfaceRT::operator=(class GAME::TerrainRenderInterfaceRT const &)
class GAME::TerrainType & GAME::TerrainType::operator=(class GAME::TerrainType const &)
??4Timer@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::Timer & GAME::Timer::operator=(class GAME::Timer const &)
??4TransformGizmo@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::TransformGizmo & GAME::TransformGizmo::operator=(class GAME::TransformGizmo const &)
class GAME::VideoPlayer & GAME::VideoPlayer::operator=(class GAME::VideoPlayer const &)
??4ViewDistanceSectorData@GAME@@QEAAAEAU01@$$QEAU01@@Z
struct GAME::ViewDistanceSectorData & GAME::ViewDistanceSectorData::operator=(struct GAME::ViewDistanceSectorData const &)
??4Viewport@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::Viewport & GAME::Viewport::operator=(class GAME::Viewport const &)
class GAME::VoiceChatPacket & GAME::VoiceChatPacket::operator=(class GAME::VoiceChatPacket const &)
class GAME::WaterRenderInterface & GAME::WaterRenderInterface::operator=(class GAME::WaterRenderInterface const &)
class GAME::WaterType & GAME::WaterType::operator=(class GAME::WaterType const &)
class GAME::WeatherManager & GAME::WeatherManager::operator=(class GAME::WeatherManager const &)
class GAME::WinWindow & GAME::WinWindow::operator=(class GAME::WinWindow const &)
??4WindowEventHandler@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::WindowEventHandler & GAME::WindowEventHandler::operator=(class GAME::WindowEventHandler const &)
??4WorldABBox@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::WorldABBox & GAME::WorldABBox::operator=(class GAME::WorldABBox const &)
??4WorldCoords@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::WorldCoords & GAME::WorldCoords::operator=(class GAME::WorldCoords const &)
class GAME::WorldFile & GAME::WorldFile::operator=(class GAME::WorldFile const &)
??4WorldFrustum@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::WorldFrustum & GAME::WorldFrustum::operator=(class GAME::WorldFrustum const &)
??4WorldIntersection@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::WorldIntersection & GAME::WorldIntersection::operator=(class GAME::WorldIntersection const &)
??4WorldVec3@GAME@@QEAAAEAV01@$$QEAV01@@Z
class GAME::WorldVec3 & GAME::WorldVec3::operator=(class GAME::WorldVec3 const &)
class GAME::ZoneManager & GAME::ZoneManager::operator=(class GAME::ZoneManager const &)
void GAME::Serializer::operator<<(int &)
void GAME::Serializer::operator<<(unsigned int &)
void GAME::Serializer::operator<<(float &)
void GAME::Serializer::operator<<(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::Serializer::operator<<(bool &)
bool GAME::FogOfWar::operator==(class GAME::FogOfWar const &)
bool GAME::operator==(class GAME::WorldCoords const &,class GAME::WorldCoords const &)
bool GAME::operator==(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
bool GAME::IPVNetworkAddress::operator==(class GAME::IPVNetworkAddress const &)
bool GAME::Name::operator==(class GAME::Name const &)
bool GAME::RegionId::operator==(class GAME::RegionId const &)
bool GAME::TriggerToken::operator==(struct GAME::TriggerToken const &)
bool GAME::operator!=(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
bool GAME::IPVNetworkAddress::operator!=(class GAME::IPVNetworkAddress const &)
bool GAME::Name::operator!=(class GAME::Name const &)
class GAME::SmartObjectId * GAME::SmartObjectIdList::operator[](unsigned int)
GAME::Name::operator unsigned __int64(void)
class GAME::WorldCoords GAME::operator*(class GAME::WorldCoords const &,class GAME::Coords const &)
class GAME::Vec3 GAME::WorldVec3::operator-(class GAME::WorldVec3 const &)
bool GAME::Name::operator<(class GAME::Name const &)
bool GAME::RegionId::operator<(class GAME::RegionId const &)
bool GAME::DetailMapFilterFunction::operator()(class GAME::Entity const *)
const GAME::FilterFunction<class GAME::Entity>::`vftable'
const GAME::Actor::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::Actor::`vftable'{for `GAME::IPhysics2'}
const GAME::Actor::`vftable'{for `GAME::Object'}
const GAME::ActorConfigCommand::`vftable'
const GAME::AdjustmentSectorData::`vftable'
const GAME::AmbientSectorData::`vftable'
const GAME::BloomSectorData::`vftable'
const GAME::BoatOverlayActivity::`vftable'
const GAME::BossSectorData::`vftable'
const GAME::CDKeyPacket::`vftable'
const GAME::ChallengeSectorData::`vftable'
const GAME::ChaosBeam::`vftable'
const GAME::ChaosBeam::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::ChaosBeam::`vftable'{for `GAME::IPhysics2'}
const GAME::ChaosBeam::`vftable'{for `GAME::Object'}
const GAME::CharacterAction::`vftable'
const GAME::CharacterActionPacket::`vftable'
const GAME::ChatPacket::`vftable'
const GAME::ClientConnectionManager::`vftable'
const GAME::ClientDisconnectPacket::`vftable'
const GAME::ClientEntityList::`vftable'
const GAME::ClientNetworkShim::`vftable'
const GAME::ClientReadyPacket::`vftable'
const GAME::ClientServerQueryPacket::`vftable'
const GAME::ClimateSectorData::`vftable'
const GAME::ColorPulse::`vftable'
const GAME::ConnectionManager::`vftable'
const GAME::ConnectionVerifyPacket::`vftable'
const GAME::DamageSectorData::`vftable'
const GAME::DayNightLight::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::DayNightLight::`vftable'{for `GAME::IPhysics2'}
const GAME::DayNightLight::`vftable'{for `GAME::Object'}
const GAME::DebugMessagePacket::`vftable'
const GAME::DebugRenderManager::`vftable'
const GAME::Decal::`vftable'{for `GAME::GraphicsRenderable'}
const GAME::Decal::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::Decal::`vftable'{for `GAME::IPhysics2'}
const GAME::Decal::`vftable'{for `GAME::Object'}
const GAME::Decal::`vftable'{for `GAME::ResetObject'}
const GAME::DecalSet::`vftable'
const GAME::DetailMapFilterFunction::`vftable'
const GAME::DisconnectClientPacket::`vftable'
const GAME::DisplayWidget::`vftable'
const GAME::EditorFilter::`vftable'
const GAME::Effect::`vftable'
const GAME::EffectEntity::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::EffectEntity::`vftable'{for `GAME::IPhysics2'}
const GAME::EffectEntity::`vftable'{for `GAME::Object'}
const GAME::Emitter::`vftable'
const GAME::Engine::`vftable'
const GAME::Entity::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::Entity::`vftable'{for `GAME::IPhysics2'}
const GAME::Entity::`vftable'{for `GAME::Object'}
const GAME::EventManager::`vftable'
const GAME::File::`vftable'
const GAME::FileSource::`vftable'
const GAME::FileSourceArchive::`vftable'
const GAME::FileSystem::`vftable'
const GAME::FireLight::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::FireLight::`vftable'{for `GAME::IPhysics2'}
const GAME::FireLight::`vftable'{for `GAME::Object'}
const GAME::FlickerLight::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::FlickerLight::`vftable'{for `GAME::IPhysics2'}
const GAME::FlickerLight::`vftable'{for `GAME::Object'}
const GAME::FlyingBolt::`vftable'
const GAME::FlyingBolt::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::FlyingBolt::`vftable'{for `GAME::IPhysics2'}
const GAME::FlyingBolt::`vftable'{for `GAME::Object'}
const GAME::FogOfWar::`vftable'
const GAME::FogSectorData::`vftable'
const GAME::FragmentPacket::`vftable'
const GAME::GMIEffect::`vftable'
const GAME::GMIEffectIcey::`vftable'
const GAME::GMIEffectListener::`vftable'
const GAME::GPDDefaultVertexBuilder::`vftable'
const GAME::GPDTex2VertexBuilder::`vftable'
const GAME::GameInfo::`vftable'
const GAME::GameTimer::`vftable'
const GAME::GraphicsDeferredRenderer::`vftable'
const GAME::GraphicsRenderable::`vftable'
const GAME::GraphicsScene::`vftable'
const GAME::GrassObject::`vftable'
const GAME::GridBase::`vftable'
const GAME::GridRegion::`vftable'
const GAME::GridRegionRandom::`vftable'
const GAME::GridSystem::`vftable'
const GAME::HeartbeatPacket::`vftable'
const GAME::HeartbeatResponsePacket::`vftable'
const GAME::HookPack::`vftable'
const GAME::HwndWindow::`vftable'
const GAME::IGPDVertexBuilder::`vftable'
const GAME::IPVNetworkAddress::`vftable'
const GAME::IPhysics2::`vftable'
const GAME::InputDevice::`vftable'
const GAME::InterfaceSkin::`vftable'
const GAME::InternalParam::`vftable'
const GAME::Jukebox::`vftable'
const GAME::LevelLimitSectorData::`vftable'
const GAME::Light::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::Light::`vftable'{for `GAME::IPhysics2'}
const GAME::Light::`vftable'{for `GAME::Object'}
const GAME::Lightning2::`vftable'
const GAME::Lightning2::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::Lightning2::`vftable'{for `GAME::IPhysics2'}
const GAME::Lightning2::`vftable'{for `GAME::Object'}
const GAME::LineEffect2::`vftable'
const GAME::LineEffect2::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::LineEffect2::`vftable'{for `GAME::IPhysics2'}
const GAME::LineEffect2::`vftable'{for `GAME::Object'}
const GAME::LineEffect::`vftable'
const GAME::LineEffect::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::LineEffect::`vftable'{for `GAME::IPhysics2'}
const GAME::LineEffect::`vftable'{for `GAME::Object'}
const GAME::LinkControlAckPacket::`vftable'
const GAME::LinkMTUTestPacket::`vftable'
const GAME::LoadTable::`vftable'
const GAME::LoadTableBinary::`vftable'
const GAME::LocalizationManager::`vftable'
const GAME::MapChunkCallback::`vftable'
const GAME::NameSectorData::`vftable'
const GAME::NetPacket::`vftable'
const GAME::NetworkAddress::`vftable'
const GAME::NetworkControllerBase::`vftable'
const GAME::NetworkEntityList::`vftable'
const GAME::NetworkLinkStats::`vftable'
const GAME::NetworkRateCounter::`vftable'
const GAME::NetworkServerBrowser::`vftable'
const GAME::NetworkShim::`vftable'
const GAME::NetworkSocket::`vftable'
const GAME::NoiseTexture::`vftable'
const GAME::Object::`vftable'
const GAME::ObjectContainerPacket::`vftable'
const GAME::ObjectInteractionPacket::`vftable'
const GAME::OverlayActivity::`vftable'
const GAME::PhysicsMesh::`vftable'
const GAME::PhysicsMeshBase::`vftable'
const GAME::PhysicsMesh_Bullet::`vftable'
const GAME::PhysicsObject2::`vftable'
const GAME::PhysicsRigidBody2::`vftable'
const GAME::PhysicsSystem2::`vftable'
const GAME::PingPacket::`vftable'
const GAME::PointDisturbance::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::PointDisturbance::`vftable'{for `GAME::IPhysics2'}
const GAME::PointDisturbance::`vftable'{for `GAME::Object'}
const GAME::PulseLight::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::PulseLight::`vftable'{for `GAME::IPhysics2'}
const GAME::PulseLight::`vftable'{for `GAME::Object'}
const GAME::PvpSectorData::`vftable'
const GAME::RemoveClientPacket::`vftable'
const GAME::RemoveEntityPacket::`vftable'
const GAME::RenderDevice::`vftable'
const GAME::RenderDynamicIndexBuffer::`vftable'
const GAME::RenderDynamicVertexBuffer::`vftable'
const GAME::RenderGeometryShader::`vftable'
const GAME::RenderIndexBuffer::`vftable'
const GAME::RenderPass::`vftable'
const GAME::RenderPixelShader::`vftable'
const GAME::RenderSurface::`vftable'
const GAME::RenderTexture::`vftable'
const GAME::RenderVertexBuffer::`vftable'
const GAME::RenderVertexDeclaration::`vftable'
const GAME::RenderVertexShader::`vftable'
const GAME::RequestResendPacket::`vftable'
const GAME::ResetObject::`vftable'
const GAME::RiftgateSectorData::`vftable'
const GAME::SectorData::`vftable'
const GAME::ServerAnnouncePacket::`vftable'
const GAME::ServerConnectAckPacket::`vftable'
const GAME::ServerConnectRejectPacket::`vftable'
const GAME::ServerConnectRequestPacket::`vftable'
const GAME::ServerConnectionManager::`vftable'
const GAME::ServerEntityList::`vftable'
const GAME::ServerNetworkShim::`vftable'
const GAME::SmartObjectId::`vftable'
const GAME::SmartObjectIdList::`vftable'
const GAME::SmartObjectIdListNullable::`vftable'
const GAME::SmartObjectIdNullable::`vftable'
const GAME::Socket::`vftable'
const GAME::Sound::`vftable'
const GAME::SoundEntity::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::SoundEntity::`vftable'{for `GAME::IPhysics2'}
const GAME::SoundEntity::`vftable'{for `GAME::Object'}
const GAME::SoundManager::`vftable'
const GAME::SoundPak::`vftable'
const GAME::SoundSample::`vftable'
const GAME::SoundStream::`vftable'
const GAME::SoundSystem::`vftable'
const GAME::SpawnActorPacket::`vftable'
const GAME::SteamAuthRequestPacket::`vftable'
const GAME::SteamAuthResponsePacket::`vftable'
const GAME::StubConnectionManager::`vftable'
const GAME::StubNetworkShim::`vftable'
const GAME::SystemTimer::`vftable'
const GAME::Terrain::`vftable'
const GAME::TerrainBase::`vftable'
const GAME::TerrainPatch::`vftable'{for `GAME::GraphicsRenderable'}
const GAME::TerrainPatch::`vftable'{for `GAME::GrassObject'}
const GAME::TerrainPatchRT::`vftable'{for `GAME::GraphicsRenderable'}
const GAME::TerrainPatchRT::`vftable'{for `GAME::GrassObject'}
const GAME::TerrainRenderInterface::`vftable'
const GAME::TerrainRenderInterfaceBase::`vftable'
const GAME::TerrainRenderInterfaceRT::`vftable'
const GAME::TerrainType::`vftable'
const GAME::Timer::`vftable'
const GAME::Tracker::`vftable'
const GAME::TrailEffect::`vftable'
const GAME::TrailEffect::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::TrailEffect::`vftable'{for `GAME::IPhysics2'}
const GAME::TrailEffect::`vftable'{for `GAME::Object'}
const GAME::VideoPlayer::`vftable'
const GAME::ViewDistanceSectorData::`vftable'
const GAME::VoiceChatPacket::`vftable'
const GAME::WaterCurve::`vftable'
const GAME::WaterLayer::`vftable'{for `GAME::IPhysics2'}
const GAME::WaterLayer::`vftable'{for `GAME::WaterObject'}
const GAME::WaterObject::`vftable'
const GAME::WaterPath::`vftable'{for `GAME::IPhysics2'}
const GAME::WaterPath::`vftable'{for `GAME::WaterCurve'}
const GAME::WaterWaveSet::`vftable'
const GAME::WeaponTrail::`vftable'
const GAME::WeaponTrail::`vftable'{for `CROWD::ICrowdAgent'}
const GAME::WeaponTrail::`vftable'{for `GAME::IPhysics2'}
const GAME::WeaponTrail::`vftable'{for `GAME::Object'}
const GAME::WeatherManager::`vftable'
const GAME::WinWindow::`vftable'
const GAME::WindowEventHandler::`vftable'
const GAME::ZoneManager::`vftable'
void GAME::Effect::`default constructor closure'(void)
void GAME::Emitter::`default constructor closure'(void)
void GAME::Event::`default constructor closure'(void)
void GAME::FileSourceArchive::`default constructor closure'(void)
void GAME::IOStreamRead::`default constructor closure'(void)
void GAME::ResourceLoader::`default constructor closure'(void)
bool GAME::Steamworks::AchievementIsUnlocked(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Steamworks::AchievementReset(void)
void GAME::Steamworks::AchievementUnlock(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Entity::Activate(bool)
void GAME::HwndWindow::Activate(void)
void GAME::WinWindow::Activate(void)
void GAME::NetworkEntityList::ActivateClient(int)
void GAME::NetPacketOutBuffer::Add16Bit(int const *)
void GAME::NetPacketOutBuffer::Add16Bit(unsigned int const *)
void GAME::NetPacketOutBuffer::Add(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::NetPacketOutBuffer::Add(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
void GAME::NetPacketOutBuffer::Add(class GAME::SmartObjectIdList const &)
void GAME::NetPacketOutBuffer::Add(class GAME::SmartObjectIdListNullable const &)
void GAME::NetPacketOutBuffer::Add(char const *)
void GAME::NetPacketOutBuffer::Add(class GAME::IPVNetworkAddress const *)
void GAME::NetPacketOutBuffer::Add(class GAME::Name const *)
void GAME::NetPacketOutBuffer::Add(class GAME::SmartObjectId const *)
void GAME::NetPacketOutBuffer::Add(class GAME::SmartObjectIdNullable const *)
void GAME::NetPacketOutBuffer::Add(class GAME::WorldCoords const *)
void GAME::NetPacketOutBuffer::Add(class GAME::WorldVec3 const *)
void GAME::NetPacketOutBuffer::Add(bool const *)
void GAME::SkeletalPose::Add(class GAME::SkeletalPose const &)
unsigned int GAME::SteamControllerDevice::AddActionSet(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::OverlayActivityManager::AddActivity(class GAME::OverlayActivity *)
void GAME::SoundManager::AddBackgroundThreadSound(enum GAME::SoundManager::SoundType,class GAME::SoundDescriptor const &,bool)
int GAME::SteamControllerDevice::AddBinding(unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,enum GAME::SteamControllerDevice::EventType,int,float)
class GAME::WaterBlockBase * GAME::WaterLayer::AddBlock(unsigned int,unsigned int)
void GAME::ImpassableData::AddBox(int,class GAME::OBBox const &,bool)
void GAME::NavMeshBuilder::AddBox(class GAME::OBBox const &,enum GAME::NavMesh::Face)
void GAME::InstanceGroup::AddChild(class GAME::InstanceGroup *)
void GAME::WaterPath::AddControlPoint(class GAME::ControlPoint const &)
void GAME::WaterWaveSet::AddControlPoint(class GAME::ControlPoint const &)
void GAME::EditorFilter::AddCustomFilter(unsigned int)
void GAME::NavManager::AddData(class GAME::Region *)
bool GAME::DecalSet::AddDecal(class GAME::DecalType const *,class GAME::Coords const &,unsigned int)
void GAME::Terrain::AddDirtyRect(class GAME::DirtyRect const &)
void GAME::GrassObject::AddDisturbance(int,int,int,int,class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,bool)
void GAME::GrassObject::AddDisturbance(int,int,int,int,class GAME::Vec3 const &,float,float,bool)
unsigned int GAME::NavManager::AddDynamicObstacle(class GAME::Entity const *,float)
unsigned int GAME::NavManager::AddDynamicObstacle(class GAME::Region const *,class GAME::OBBox const &)
unsigned int GAME::NavManager::AddDynamicObstacle(class GAME::Region const *,class GAME::Sphere const &)
void GAME::Effect::AddEmitter(class GAME::EmitterData const *)
void GAME::EffectData::AddEmitterData(class GAME::EmitterData *)
void GAME::ClientEntityList::AddEntity(int,class GAME::Entity *,int)
void GAME::ImpassableData::AddEntity(class GAME::Entity *,bool)
void GAME::InstanceGroup::AddEntity(class GAME::Entity *)
bool GAME::Level::AddEntity(class GAME::Entity *,class GAME::Coords const &)
void GAME::NetworkEntityList::AddEntity(int,class GAME::Entity *,int)
bool GAME::Region::AddEntity(class GAME::Entity *,class GAME::WorldCoords const &,bool,bool)
void GAME::UniqueIdMap::AddEntity(class GAME::UniqueId const &,class GAME::Entity *)
bool GAME::World::AddEntity(class GAME::Entity *,class GAME::WorldCoords const &,bool)
void GAME::NetworkEntityList::AddEntityToAllClients(class GAME::Entity *)
void GAME::ServerEntityList::AddEntityToAllClients(class GAME::Entity *)
void GAME::Level::AddEntityToNetworkList(class GAME::Entity *)
void GAME::World::AddEntityToNetworkList(class GAME::Entity *)
void GAME::World::AddFOWVisibility(class GAME::WorldVec3 const &,int)
void GAME::NetPacketOutBuffer::AddFileName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::NetworkServerBrowser::AddFilter(char const *,char const *)
void GAME::EditorFilter::AddFilterObject(unsigned int,enum GAME::EditorFilter::EditorFilterType)
void GAME::InstanceGroupManager::AddGroupAffiliation(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class GAME::RTTI_ClassInfo const *)
void GAME::SmartObjectIdList::AddId(unsigned int)
void GAME::SmartObjectIdList::AddId(class GAME::SmartObjectId *)
void GAME::SmartObjectIdList::AddIdList(class mem::vector<unsigned int> const &)
void GAME::AsyncWorker::AddJob(class GAME::IAsyncJob *)
void GAME::SaveManager::AddJob(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,unsigned int,bool,bool)
bool GAME::Terrain::AddLayer(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsScene::AddLight(class GAME::GraphicsLight const &)
void GAME::LightRig::AddLight(struct GAME::RiggedLight const &)
unsigned int GAME::DayNightCycle::AddLightSetup(float,class GAME::Color const &,class GAME::Color const &,class GAME::Color const &)
void GAME::TerrainBase::AddLoadedObject(class GAME::TerrainObject *)
void GAME::Engine::AddLog(class GAME::DebugLog *)
void GAME::NavManager::AddObject(class GAME::Entity *)
void GAME::PhysicsEngine2::AddObject(class GAME::PhysicsObject2 *)
void GAME::TerrainBase::AddObjectToSpace(class GAME::TerrainObject *)
void GAME::Terrain::AddOpacityDirtyRect(class GAME::DirtyRect const &)
void GAME::NetworkLinkStats::AddPacketCounts(class mem::map<enum GAME::PACKET_TYPE,struct GAME::NetPacketCounterEntry> &,class mem::map<enum GAME::PACKET_TYPE,struct GAME::NetPacketCounterEntry> const &)
void GAME::ImpassableData::AddPathFace(int,class GAME::PathFace const &)
void GAME::GameInfo::AddPlayer(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<class GAME::GameInfoAttachedInventoryItem> const &,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<unsigned int> const &,unsigned int,bool,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::NavMeshBuilder::AddQuadXZ(class GAME::Vec3 const &,float)
void GAME::NetPacketOutBuffer::AddRaw(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::NetworkLinkStats::AddReceivePacketCounts(class mem::map<enum GAME::PACKET_TYPE,struct GAME::NetPacketCounterEntry> &)
void GAME::DirtyRectSet::AddRect(class GAME::DirtyRect const &,int,int)
void GAME::DirtyRectSet::AddRect(class GAME::DirtyRect const &)
void GAME::GraphicsMTRenderer::AddReflectionPlane(class GAME::GraphicsReflectionPlane &)
void GAME::Level::AddReflectionPlanes(class GAME::GraphicsMTRenderer &,class GAME::Frustum const &)
void GAME::Water::AddReflectionPlanes(class GAME::GraphicsMTRenderer &,class GAME::Region *,class GAME::Frustum const &)
void GAME::GraphicsScene::AddRegion(class GAME::Region *,bool)
int GAME::World::AddRegion(class GAME::Level *,class GAME::IntVec3 const &)
int GAME::World::AddRegion(char const *,class GAME::IntVec3 const &)
int GAME::World::AddRegion(char const *,class GAME::IntVec3 const &,class GAME::ABBox const &,class GAME::RegionId const &)
void GAME::GraphicsMTRenderer::AddRegionElementsToScene(class GAME::Region *,class GAME::Region *,class GAME::Frustum const &,class GAME::WorldFrustum const *,class GAME::GraphicsScene &)
class GAME::Coords GAME::GraphicsMTRenderer::AddRegionToScene(class GAME::Region *,class GAME::Region *,class GAME::GraphicsScene &)
void GAME::GraphicsScene::AddRenderable(class GAME::GraphicsRenderable *,class GAME::Region *)
void GAME::GraphicsMTRenderer::AddSceneLight(class GAME::GraphicsScene &,class GAME::Region *)
void GAME::NetworkServerBrowser::AddServer(struct GAME::ServerInfo *,enum GAME::NetworkInfrastructureType)
bool GAME::FileSystem::AddSource(enum GAME::FileSystem::Partition,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const *,bool,bool,bool)
bool GAME::FileSystem::AddSourceArchive(enum GAME::FileSystem::Partition,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const *,bool)
void GAME::Engine::AddStatisticGraph(char const *,float,class GAME::Color const &)
void GAME::Engine::AddStatisticText(char const *,...)
void GAME::Jukebox::AddStatisticText(void)
void GAME::LocalizationManager::AddTagToMap(char const *,char const *,bool)
void GAME::WaterType::AddTexture(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Actor::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::Decal::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::DecalSet::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const &)
void GAME::Effect::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::EffectEntity::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::Emitter::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::Entity::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::FlickerLight::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::GridBase::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const &,class GAME::Frustum const *)
void GAME::GridRegion::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const &,class GAME::Frustum const *)
void GAME::Level::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const &,class GAME::WorldFrustum const *)
void GAME::Light::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::LightRig::AddToScene(class GAME::GraphicsScene &,class GAME::WorldCoords const &,class mem::vector<class GAME::GraphicsRenderable const *> const &)
void GAME::Lightning2::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::LineEffect2::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::LineEffect::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::Region::AddToScene(class GAME::GraphicsScene &,class GAME::Coords const &,class GAME::Frustum const &,class GAME::WorldFrustum const *)
void GAME::Skybox::AddToScene(class GAME::Region *,class GAME::Coords const &,class GAME::GraphicsScene &)
void GAME::Terrain::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const &)
void GAME::TerrainPatch::AddToScene(class GAME::GraphicsScene &)
void GAME::TerrainRenderInterfaceBase::AddToScene(class GAME::GraphicsScene &,class GAME::Region *,class mem::vector<class GAME::TerrainObject *>)
void GAME::TrailEffect::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const *)
void GAME::Water::AddToScene(class GAME::GraphicsScene &,class GAME::Frustum const &)
bool GAME::WaterRenderInterface::AddToScene(class GAME::GraphicsScene &,class GAME::Region *,class GAME::Frustum const &)
void GAME::WeatherManager::AddToScene(class GAME::GraphicsScene &,class GAME::Region *)
class GAME::PhysicsObject2 * GAME::PhysicsEngine2::AddToSimulation(class GAME::IPhysics2 *,bool)
void GAME::Decal::AddToWorld(class GAME::WorldCoords const &)
void GAME::EffectEntity::AddToWorld(class GAME::WorldCoords const &,bool)
void GAME::SoundEntity::AddToWorld(class GAME::WorldCoords const &,bool)
void GAME::Jukebox::AddTrackedBoss(unsigned int)
void GAME::NetworkLinkStats::AddTransmitPacketCounts(class mem::map<enum GAME::PACKET_TYPE,struct GAME::NetPacketCounterEntry> &)
void GAME::FogOfWar::AddVisibility(class GAME::Vec3 const &,int)
class GAME::WaterCurve * GAME::Water::AddWaterCurve(char const *,float,class GAME::ControlPoint const &,enum GAME::WaterCurve::CurveType)
class GAME::WaterLayer * GAME::Water::AddWaterLayer(char const *,float)
class GAME::WaterPath * GAME::Water::AddWaterPath(char const *,float,class GAME::ControlPoint const &)
class GAME::WaterType * GAME::WaterTypeManager::AddWaterType(class GAME::WaterType const &)
void GAME::WaterTypeManager::AddWaterTypeReference(struct GAME::WaterTypeManager::WaterTypeRef const &)
class GAME::WaterWaveSet * GAME::Water::AddWaveSet(float,class GAME::ControlPoint const &)
void GAME::Display::AddWidget(class GAME::DisplayWidget *)
void GAME::Engine::AddWidget(class GAME::DisplayWidget *)
void GAME::GrassObject::AddWind(int,int,int,int,class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,bool)
class GAME::Vec2 GAME::GraphicsEngine::AlignPositionToScreen(class GAME::Vec2 const &,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign)
void GAME::Emitter::AllocateParticleArray(class GAME::EmitterData const *)
bool GAME::Engine::AllowAlphaToCoverage(void)
bool GAME::Engine::AllowLightrigSpec(void)
void GAME::Actor::AnimationCallback(int,class GAME::Name const &)
void GAME::Entity::AnimationCallback(int,class GAME::Name const &)
class GAME::IPVNetworkAddress GAME::IPVNetworkAddress::Any(enum GAME::NetworkAddressType,unsigned short)
void GAME::Actor::AppendDetailMapData(class mem::vector<struct GAME::MinimapGameNugget> &)
void GAME::Entity::AppendDetailMapData(class mem::vector<struct GAME::MinimapGameNugget> &)
void GAME::BaseResourceManager::AppendResourceList(class mem::vector<struct GAME::ResourceReference> &)
void GAME::GraphicsCanvas::ApplyAdjustment(class GAME::GraphicsShader2 const *,class GAME::GraphicsTexture const *)
void GAME::GraphicsCanvas::ApplyColorRemap(void)
void GAME::GraphicsCanvas::ApplyDepthOfField(class GAME::RenderTexture *,float,float,float,float)
void GAME::GraphicsCanvas::ApplyEnhancement(float,float,float,float,float,float)
void GAME::GraphicsCanvas::ApplyFXAA(void)
void GAME::GraphicsCanvas::ApplyGlow(class GAME::RenderSurface *)
void GAME::Entity::ApplyReplicationData(void)
void GAME::GraphicsCanvas::ApplySSAO(class GAME::RenderTexture *,float,float)
bool GAME::GraphicsEngine::AreDecalsEnabled(void)
bool GAME::GraphicsEngine::AreEffectsEnabled(void)
bool GAME::GraphicsEngine::AreGridTilesEnabled(void)
bool GAME::GraphicsEngine::AreMeshesEnabled(void)
bool GAME::GraphicsEngine::ArePostEffectsEnabled(void)
bool GAME::GraphicsEngine::AreReflectionsEnabled(void)
bool GAME::World::AreRegionsConnected(class GAME::Region const *,class GAME::Region const *,int)
bool GAME::GraphicsEngine::AreShadowsEnabled(void)
bool GAME::GraphicsEngine::AreStatsEnabled(void)
bool GAME::Jukebox::AreTrackedBossesDead(void)
void GAME::Actor::Attach(class GAME::Entity *,class GAME::Coords const &,class GAME::Name const &,bool,bool)
void GAME::Actor::Attach(class GAME::Entity *,class GAME::Coords const &,char const *,bool,bool)
void GAME::Entity::Attach(class GAME::Entity *,class GAME::Coords const &,class GAME::Name const &,bool,bool)
void GAME::Entity::Attach(class GAME::Entity *,class GAME::Coords const &,char const *,bool,bool)
bool GAME::FileSourceArchive::Attach(char const *,char const *)
bool GAME::FileSourceDirectory::Attach(char const *)
void GAME::Entity::AttachIllumination(char const *,class GAME::Vec3 const &)
void GAME::Entity::AttachPunctuation(char const *)
void GAME::ConnectionManager::AuthorizeMe(void)
void GAME::Region::BackgroundLoadLevel(bool)
class std::_List_const_iterator<class std::_List_val<struct std::_List_simple_types<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > > > GAME::ConfigFile::Begin(void)
void GAME::GraphicsPrimitiveDrawer::Begin(enum GAME::GraphicsPrimitiveDrawer::PrimitiveType)
void GAME::GraphicsShader2::Begin(void)
bool GAME::GraphicsShader2::Begin(unsigned int)
void GAME::IOStreamRead::BeginBlock(void)
void GAME::IOStreamWrite::BeginBlock(void)
void GAME::GraphicsMeshInstance::BeginDissolve(int,int,int,float,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
void GAME::GraphicsMeshInstance::BeginFade(int,int,int,float)
void GAME::GMIEffectIcey::BeginFinishing(void)
bool GAME::GraphicsCanvas::BeginFrame(void)
void GAME::Profile::BeginFrame(void)
void GAME::GraphicsEngine::BeginPerfEvent(char const *)
void GAME::GraphicsMeshInstance::BeginUnDissolve(int,int,int,float,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
void GAME::GraphicsMeshInstance::BeginUnFade(int,int,int,float)
void GAME::PhysicsEngine2::BeginUpdate(int)
void GAME::Entity::BillboardPunctuation(void)
void GAME::CurveData::BinaryRead(class GAME::BinaryReader &)
void GAME::EmitterData::BinaryRead(class GAME::BinaryReader &)
void GAME::CurveData::BinaryWrite(class GAME::BinaryWriter &)
void GAME::EmitterData::BinaryWrite(class GAME::BinaryWriter &)
bool GAME::NetworkSocket::Bind(class GAME::NetworkAddress const &)
void GAME::SkeletalPose::Blend(class GAME::SkeletalPose const &,float)
bool GAME::NavManager::BlockPoint(class GAME::WorldVec3 const &,float)
class GAME::RenderSurface * GAME::GraphicsCanvas::BlurFrameBuffer2(unsigned int,unsigned int,class GAME::Rect const &,enum GAME::RenderTextureFormat)
class GAME::RenderSurface * GAME::GraphicsCanvas::BlurFrameBuffer(unsigned int,unsigned int,class GAME::Rect const &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::BodySplashEffect(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::BodySplashEffect(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::BodySplashTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::BodySplashTexture(void)
void GAME::Engine::Break(void)
void GAME::EffectData::BufferLoad(void const *,int)
void GAME::GridRegion::BuildCellSpace(void)
void GAME::World::BuildConnectivity(void)
unsigned short const * GAME::LocalizationManager::BuildFinalString(int,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,enum GAME::SpecialFormat)
void GAME::GraphicsMTRenderer::BuildReflections(class GAME::GraphicsScene const &,class mem::vector<class GAME::GraphicsMTJob_BuildReflection *> &,bool)
void GAME::Region::BuildRegionConnectivity(class mem::vector<class GAME::Region *> const &)
void GAME::GraphicsMTRenderer::BuildScene(bool,class GAME::WorldFrustum const *,class GAME::GraphicsScene &,class mem::vector<class GAME::Region *> &)
void GAME::GraphicsMTRenderer::BuildShadowDirectional(class GAME::Vec3 const &,class GAME::Vec3 const &,struct GAME::LightEntry *,class GAME::GraphicsScene &,class mem::vector<class GAME::Entity *> &)
void GAME::GraphicsMTRenderer::BuildShadowPoint(struct GAME::LightEntry *,class GAME::GraphicsScene &,class mem::vector<class GAME::Entity *> &)
void GAME::GraphicsMTRenderer::BuildShadows(class GAME::GraphicsScene const &,class mem::vector<class GAME::GraphicsMTJob_BuildShadow *> &,bool)
void GAME::GraphicsAnim::CacheCreateEntities(void)
class GAME::Object * GAME::ObjectManager::CacheObjectEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const *,int)
void GAME::InstanceGroup::CalcCenter(void)
void GAME::WaterLayer::CalcSurfaceVelocity(class GAME::Vec3 &)
void GAME::WaterPath::CalcSurfaceVelocity(unsigned int,float,class GAME::Vec3 &)
unsigned int GAME::Actor::CalculateAllocatedMemory(void)
unsigned int GAME::EffectEntity::CalculateAllocatedMemory(void)
unsigned int GAME::Entity::CalculateAllocatedMemory(void)
unsigned int GAME::Object::CalculateAllocatedMemory(void)
unsigned int GAME::SoundPak::CalculateAllocatedMemory(void)
void GAME::WaterLayer::CalculateBlockBounds(unsigned int,unsigned int)
void GAME::TerrainPatch::CalculateEditorIntersection(class GAME::Coords const &,int,int,class GAME::Vec3 &,class GAME::Vec3 &)
class GAME::Coords & GAME::PhysicsUtil::CalculateFusedBoneCoords(class GAME::Coords const &,struct GAME::RigidBodyDescription const &,unsigned int,class GAME::Coords &)
void GAME::PhysicsUtil::CalculateJointCoords(struct GAME::JointDescription const &,struct GAME::RigidBodyDescription const &,class GAME::Coords const &,struct GAME::RigidBodyDescription const &,class GAME::Coords const &,class GAME::Coords &)
unsigned int GAME::Actor::CalculateMemoryUsage(void)
unsigned int GAME::Effect::CalculateMemoryUsage(void)
unsigned int GAME::EffectEntity::CalculateMemoryUsage(void)
unsigned int GAME::Emitter::CalculateMemoryUsage(void)
unsigned int GAME::Entity::CalculateMemoryUsage(void)
unsigned int GAME::Object::CalculateMemoryUsage(void)
unsigned int GAME::SoundPak::CalculateMemoryUsage(void)
float GAME::WaterType::CalculateOpacity(float)
void GAME::PhysicsUtil::CalculateRigidBodyCoords(class GAME::Coords &,class GAME::Coords const &,class GAME::Coords const &,float)
void GAME::GraphicsScene::CalculateSceneBounds(class GAME::Vec3 &,class GAME::Vec3 &)
void GAME::GraphicsMTRenderer::CalculateShadowBounds(class GAME::ABBox const &,class GAME::Sphere const &,class GAME::ABBox &)
class GAME::Vec2 GAME::WaterType::CalculateVelocity(void)
class GAME::WorldVec3 GAME::WorldCamera::CalculateViewPosition(class GAME::WorldVec3 const &)
bool GAME::Entity::CanBePlacedInEditor(void)
bool GAME::LocalizationManager::CanBeToken(unsigned short)
bool GAME::Entity::CanTriggerBoundingVolumes(void)
void GAME::AsyncWorker::CancelAll(void)
bool GAME::AsyncWorker::CancelJob(class GAME::IAsyncJob *)
void GAME::NetworkServerBrowser::CancelServerListUpdate(void)
bool GAME::GridRegion::CellContainsFeature(int,int,int)
void GAME::HwndWindow::Center(void)
void GAME::WinWindow::Center(void)
void GAME::GridRegion::ChangeCellVariation(int,int,int)
void GAME::WeatherManager::ChangeClimate(class GAME::ClimateSectorData *)
void GAME::PhysicsUtil::ChangeConetwistBasis(enum GAME::JointAxis,class GAME::Coords const &,class GAME::Coords &)
bool GAME::Image::ChangeFormat(enum GAME::Image::Format)
char const * GAME::CharacterActionPermissionToString(enum GAME::CharacterActionPermission)
char const * GAME::CharacterActionTypeToString(enum GAME::CharacterActionType)
void GAME::Engine::CharacterCommandLogEnable(bool)
void GAME::Engine::CharacterDataLogEnable(bool)
bool GAME::Actor::CheckLOS(class GAME::Ray const &,float)
bool GAME::Entity::CheckLOS(class GAME::Ray const &,float)
bool GAME::GraphicsMeshInstance::CheckLOS(class GAME::Ray const &,float)
bool GAME::Level::CheckLOS(class GAME::Ray const &,float)
bool GAME::World::CheckLOS(class GAME::WorldRay const &,float)
bool GAME::NetPacket::CheckObjects(int)
bool GAME::ObjectContainerPacket::CheckObjects(int)
bool GAME::ObjectInteractionPacket::CheckObjects(int)
enum GAME::PublicIPCheckState GAME::ConnectionManager::CheckPublicIP(class GAME::IPVNetworkAddress &,class GAME::IPVNetworkAddress &)
void GAME::Jukebox::Clean(void)
void GAME::SoundManager::CleanFadeList(struct GAME::SoundInstance *)
void GAME::ImpassableData::CleanForLoad(void)
void GAME::GrassObject::CleanOffsetField(void)
void GAME::GMIEffectIcey::CleanParent(void)
void GAME::TrailEffect::CleanSegmentList(void)
void GAME::Engine::CleanseDatabase(void)
void GAME::NavManager::Cleanup(void)
void GAME::Water::Cleanup(void)
void GAME::WaterLayer::Cleanup(void)
void GAME::DayNightCycle::Clear(void)
void GAME::DirtyRectSet::Clear(void)
void GAME::GraphicsCanvas::Clear(unsigned int,float)
void GAME::ImpassableData::Clear(void)
void GAME::LightRig::Clear(void)
void GAME::OverlayActivityManager::Clear(void)
void GAME::Tracker::Clear(void)
void GAME::GraphicsMeshInstance::ClearBaseTextures(void)
void GAME::GraphicsMeshInstance::ClearBumpTextures(void)
void GAME::TableDepot::ClearCache(void)
void GAME::ImpassableData::ClearCell(int,int,int)
void GAME::Engine::ClearCinematicText(void)
void GAME::GraphicsCanvas::ClearClippingPlane(int)
void GAME::GraphicsCanvas::ClearClippingRect(void)
void GAME::EditorFilter::ClearCustomFilter(void)
void GAME::NetworkEntityList::ClearDebugEntityList(void)
void GAME::Socket::ClearErrors(void)
void GAME::GraphicsMeshInstance::ClearGlowTextures(void)
void GAME::LocalizationManager::ClearParamBanks(void)
void GAME::GraphicsMTRenderer::ClearPendingJobs(void)
void GAME::GameInfo::ClearPlayerList(void)
void GAME::ObjectManager::ClearRecordData(void)
void GAME::GraphicsCanvas::ClearRenderSurface(class GAME::RenderSurface *,class GAME::Color const &,unsigned int)
void GAME::NavManager::ClearRequestPointData(void)
void GAME::WorldCoords::ClearRotation(void)
void GAME::NetworkServerBrowser::ClearServerList(void)
void GAME::GraphicsMeshInstance::ClearSpecTextures(void)
void GAME::LocalizationManager::ClearTagMap(void)
void GAME::WaterType::ClearTextures(void)
void GAME::GridRegion::ClearTransparency(void)
void GAME::Archive::Close(bool)
void GAME::HwndWindow::Close(void)
void GAME::MemoryMappedFile::Close(void)
void GAME::WinWindow::Close(void)
void GAME::FileSourceArchive::CloseFile(class GAME::File * &)
void GAME::FileSourceDirectory::CloseFile(class GAME::File * &)
void GAME::FileSystem::CloseFile(class GAME::File * &)
void GAME::FileSourceArchive::CloseFileStream(class GAME::FileStream * &)
void GAME::FileSourceDirectory::CloseFileStream(class GAME::FileStream * &)
void GAME::FileSystem::CloseFileStream(class GAME::FileStream * &)
void GAME::Engine::CloseLogFiles(void)
bool GAME::Steamworks::CloudClear(void)
bool GAME::Steamworks::CloudCopy(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
bool GAME::Steamworks::CloudDelete(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::Steamworks::CloudFileExists(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
char const * GAME::Steamworks::CloudGetFileByIndex(unsigned int,int *)
bool GAME::Steamworks::CloudGetFileNames(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
unsigned int GAME::Steamworks::CloudGetFileSize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
__int64 GAME::Steamworks::CloudGetFileTime(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
unsigned int GAME::Steamworks::CloudGetNumFiles(void)
bool GAME::Steamworks::CloudGetStorageSpace(int &,int &)
bool GAME::Steamworks::CloudRead(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void *,unsigned int)
void GAME::Engine::CloudSaveClear(void)
bool GAME::Steamworks::CloudWrite(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,unsigned int,bool)
int GAME::TerrainType::ClumpFind(class mem::vector<int> &,int,int,int)
int GAME::TerrainType::ClumpNeighbours(class mem::vector<int> &,int,int,int)
void GAME::LuaManager::CollectGarbage(void)
void GAME::GraphicsMTRenderer::CollectPassesForAllLights(bool,int,int,class mem::vector<struct GAME::RenderableEntry> const &,class mem::vector<struct GAME::RenderablePass> &)
void GAME::GraphicsMTRenderer::CollectPassesForLight(struct GAME::LightEntry const &,bool,int,int,class mem::vector<struct GAME::RenderableEntry> const &,class mem::vector<struct GAME::RenderablePass> &)
void GAME::GraphicsMTRenderer::CollectPassesForSphere(class GAME::Name const &,int,int,class GAME::Sphere const &,struct GAME::LightEntry const &,class mem::vector<struct GAME::RenderableEntry> const &,class mem::vector<struct GAME::RenderablePass> &)
void GAME::GraphicsMTRenderer::CollectPassesForStyle(class GAME::Name const &,int,int,class mem::vector<struct GAME::RenderableEntry> const &,class mem::vector<struct GAME::RenderablePass> &,struct GAME::LightEntry const *)
void GAME::Actor::CollisionCallback(struct GAME::CollisionData const &)
void GAME::Entity::CollisionCallback(struct GAME::CollisionData const &)
int GAME::FileSystem::CompareFileTimes(char const *,char const *)
int GAME::FileSystem::CompareFileTimes(char const *,struct GAME::FileTime const &)
bool GAME::TerrainPatch::CompareLayers(void)
void GAME::ConnectionManager::CompleteSteamAuth(class CSteamID)
void GAME::ServerConnectionManager::CompleteSteamAuth(class CSteamID)
char const * GAME::Socket::Compress(char const *,unsigned long &)
bool GAME::NetworkSocket::Connect(class GAME::NetworkAddress const &)
bool GAME::ClientConnectionManager::ConnectToInternetHost(struct GAME::ServerInfo *)
bool GAME::ConnectionManager::ConnectToInternetHost(struct GAME::ServerInfo *)
bool GAME::ClientConnectionManager::ConnectToLANServer(class GAME::IPVNetworkAddress const &)
bool GAME::ServerConnectionManager::ConnectToLANServer(class GAME::IPVNetworkAddress const &,unsigned short)
void GAME::ClientConnectionManager::ConnectionAttemptAborted(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::WaterLayer::ConstructBlockGeometry(void)
void GAME::TerrainBase::ConstructBlocks(void)
void GAME::WaterLayer::ConstructFromMap(unsigned char const *)
bool GAME::GraphicsMTRenderer::ConstructRenderPass(struct GAME::RenderablePass &,struct GAME::RenderableEntry const &,unsigned int,class GAME::Name const &,int,int,class GAME::Sphere const &,struct GAME::LightEntry const *)
void GAME::WaterPath::ConstructSegmentGeometry(void)
void GAME::WaterWaveSet::ConstructSegmentGeometry(void)
bool GAME::WorldABBox::Contains(class GAME::WorldVec3 const &)
bool GAME::SkeletalPose::ContainsBone(class GAME::Name const &)
void GAME::Steamworks::ControllerConfigure(void)
unsigned __int64 GAME::Steamworks::ControllerGetActionSet(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
struct ControllerAnalogActionData_t GAME::Steamworks::ControllerGetAnalogData(unsigned __int64)
bool GAME::Steamworks::ControllerGetAnalogGlyphs(unsigned __int64,unsigned __int64,class mem::vector<enum EControllerActionOrigin> &)
unsigned __int64 GAME::Steamworks::ControllerGetAnalogHandle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::SteamControllerDevice * GAME::Steamworks::ControllerGetDevice(void)
struct ControllerDigitalActionData_t GAME::Steamworks::ControllerGetDigitalData(unsigned __int64)
bool GAME::Steamworks::ControllerGetDigitalGlyphs(unsigned __int64,unsigned __int64,class mem::vector<enum EControllerActionOrigin> &)
unsigned __int64 GAME::Steamworks::ControllerGetDigitalHandle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Steamworks::ControllerGetTextInput(void)
bool GAME::Steamworks::ControllerIsConnected(void)
bool GAME::Steamworks::ControllerSetActionSet(unsigned __int64)
bool GAME::Steamworks::ControllerShowTextInput(bool,bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::Vec2 GAME::Viewport::ConvertFromDeviceCoords(class GAME::Vec2 const &)
bool GAME::InputDevice::JoystickEvent::ConvertToButtonEvent(class GAME::InputDevice::ButtonEvent &)
void GAME::InputDevice::MouseEvent::ConvertToButtonEvent(class GAME::InputDevice::ButtonEvent &)
bool GAME::InputDevice::JoystickEvent::ConvertToMouseEvent(struct GAME::InputDevice::MouseEvent &,class GAME::Vec2 const &)
void GAME::CurveData::Copy(class GAME::CurveData *)
void GAME::CDKeyPacket::CopyInbound(unsigned char *,int)
void GAME::CharacterActionPacket::CopyInbound(unsigned char *,int)
void GAME::ChatPacket::CopyInbound(unsigned char *,int)
void GAME::ClientDisconnectPacket::CopyInbound(unsigned char *,int)
void GAME::ClientReadyPacket::CopyInbound(unsigned char *,int)
void GAME::ClientServerQueryPacket::CopyInbound(unsigned char *,int)
void GAME::ConnectionVerifyPacket::CopyInbound(unsigned char *,int)
void GAME::DebugMessagePacket::CopyInbound(unsigned char *,int)
void GAME::DisconnectClientPacket::CopyInbound(unsigned char *,int)
void GAME::FragmentPacket::CopyInbound(unsigned char *,int)
void GAME::HeartbeatPacket::CopyInbound(unsigned char *,int)
void GAME::HeartbeatResponsePacket::CopyInbound(unsigned char *,int)
void GAME::LinkControlAckPacket::CopyInbound(unsigned char *,int)
void GAME::LinkMTUTestPacket::CopyInbound(unsigned char *,int)
void GAME::NetPacket::CopyInbound(unsigned char *,int)
void GAME::PingPacket::CopyInbound(unsigned char *,int)
void GAME::RemoveClientPacket::CopyInbound(unsigned char *,int)
void GAME::RemoveEntityPacket::CopyInbound(unsigned char *,int)
void GAME::RequestResendPacket::CopyInbound(unsigned char *,int)
void GAME::ServerAnnouncePacket::CopyInbound(unsigned char *,int)
void GAME::ServerConnectAckPacket::CopyInbound(unsigned char *,int)
void GAME::ServerConnectRejectPacket::CopyInbound(unsigned char *,int)
void GAME::ServerConnectRequestPacket::CopyInbound(unsigned char *,int)
void GAME::SpawnActorPacket::CopyInbound(unsigned char *,int)
void GAME::SteamAuthRequestPacket::CopyInbound(unsigned char *,int)
void GAME::SteamAuthResponsePacket::CopyInbound(unsigned char *,int)
void GAME::VoiceChatPacket::CopyInbound(unsigned char *,int)
bool GAME::SoundPak::CouldPossiblyHear(class GAME::WorldVec3 const &,float)
void GAME::CPUCoreDetector::CpuId(int,int *)
void GAME::Engine::Crash(void)
unsigned int GAME::Crc32(unsigned char const *,int)
void GAME::Image::Create(unsigned int,unsigned int,enum GAME::Image::Format,void const *)
class GAME::InputDevice * GAME::InputDevice::Create(void)
class GAME::Name GAME::Name::Create(char const *)
bool GAME::NavMeshBuilder::Create(class GAME::Entity const *,bool,class GAME::NavMesh * &)
bool GAME::NavMeshBuilder::Create(class GAME::Level const *,class GAME::NavMesh * &)
bool GAME::NavMeshBuilder::Create(class GAME::Portal const *,class GAME::NavMesh * &)
class GAME::RenderDevice * GAME::RenderDevice::Create(char const *,bool)
class GAME::NetworkAddressResolver * GAME::ClientConnectionManager::CreateAddressResolver(enum GAME::NetworkInfrastructureType,enum GAME::NetworkMode)
class GAME::NetworkAddressResolver * GAME::ConnectionManager::CreateAddressResolver(enum GAME::NetworkInfrastructureType,enum GAME::NetworkMode)
class GAME::NetworkAddressResolver * GAME::ServerConnectionManager::CreateAddressResolver(enum GAME::NetworkInfrastructureType,enum GAME::NetworkMode)
class GAME::Entity * GAME::Entity::CreateAttachedEntity(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Actor::CreateAttachmentsFromMesh(void)
class GAME::GraphicsMTJob_BuildReflection * GAME::GraphicsMTRenderer::CreateBuildReflectionJob(struct GAME::ReflectionGroup *,class GAME::Camera const &,class GAME::Region *,class GAME::Viewport const &,class GAME::Frustum const &,enum GAME::RenderFlag)
class GAME::GraphicsMTJob_BuildScene * GAME::GraphicsMTRenderer::CreateBuildSceneJob(class GAME::Camera const &,class GAME::Region *,class GAME::Viewport const &,class GAME::Frustum const &,enum GAME::RenderFlag,bool,class GAME::WorldFrustum const *)
class GAME::GraphicsMTJob_BuildShadow * GAME::GraphicsMTRenderer::CreateBuildShadowJob(class GAME::GraphicsScene const &,class GAME::Vec3 const &,class GAME::Vec3 const &,enum GAME::RenderFlag,struct GAME::LightEntry *)
void GAME::Terrain::CreateClutterIndexBuffer(int)
bool GAME::GraphicsEngine::CreateDevice(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
bool GAME::GraphicsEngine::CreateDevice(class GAME::EWindow *,class GAME::GraphicsEngineSettings const &)
void GAME::World::CreateDirectionalDisturbance(class GAME::WorldVec3 const &,class GAME::Vec3 const &,float,float,bool,enum GAME::SplashType)
void GAME::World::CreateDirectionalWind(class GAME::WorldVec3 const &,class GAME::Vec3 const &,float,float,bool,enum GAME::SplashType)
bool GAME::GraphicsCanvas::CreateDynamicBuffers(void)
void GAME::Decal::CreateGeometry(void)
bool GAME::TerrainPatch::CreateGeometry(class GAME::Vec3 const &,class GAME::GraphicsMeshInstance *,class GAME::Vec3 const &,bool)
void GAME::GrassObject::CreateGrass(class GAME::TerrainBase *,class mem::vector<unsigned int> const &,int,int,int,int,class GAME::TerrainPatch *)
void GAME::GrassObject::CreateGrassBuffers(class GAME::TerrainBase *,class mem::vector<unsigned int> const &,int,int,int,int,class GAME::TerrainPatch *)
void GAME::Terrain::CreateGrassDisturbance(class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,bool)
void GAME::Terrain::CreateGrassDisturbance(float,float,float,float,float,bool)
struct GAME::GrassObject::GrassGeometry GAME::Terrain::CreateGrassGeometry(int,int,int)
void GAME::Terrain::CreateGrassWind(class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,bool)
class GAME::SmartObjectId * GAME::SmartObjectIdList::CreateId(void)
class GAME::SmartObjectId * GAME::SmartObjectIdListNullable::CreateId(void)
class GAME::NetworkServerBrowserImpl * GAME::NetworkServerBrowser::CreateImplementation(enum GAME::NetworkInfrastructureType)
void GAME::World::CreateLineDisturbance(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,float,enum GAME::SplashType)
unsigned int GAME::Engine::CreateLogCategory(char const *)
void GAME::Terrain::CreateMapGeometry(void)
unsigned int GAME::ResourceLoader::CreateMarker(void)
class GAME::Name GAME::LoadTable::CreateName(char const *)
bool GAME::NavMeshBuilder::CreateNavMesh(class GAME::NavMesh * &)
void GAME::NavManager::CreateNavigationData(class GAME::Vec3 const &,class GAME::Vec3 const &,class mem::vector<class GAME::NavMesh *> const &,class mem::vector<class GAME::OBBox> const &,class mem::vector<struct GAME::NavArea> const &,class mem::vector<struct GAME::NavPortal> const &,void * &,unsigned int &)
class GAME::NetPacket * GAME::Engine::CreateNetPacket(enum GAME::PACKET_TYPE)
void GAME::NetworkEntityList::CreateNewClient(int)
void GAME::NetworkEntityList::CreateNewClient(int,class GAME::WorldFrustum const &)
void GAME::ServerEntityList::CreateNewClient(int)
void GAME::ServerEntityList::CreateNewClient(int,class GAME::WorldFrustum const &)
int GAME::ServerConnectionManager::CreateNewConnection(class GAME::NetworkConnection *,class GAME::NetworkAddress const *,class GAME::NetworkAddress const *,int)
void GAME::InstanceGroupManager::CreateNewGroup(void)
class GAME::Object * GAME::LoadTable::CreateObjectFromFile(char const *)
class GAME::Object * GAME::ObjectManager::CreateObjectFromFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,bool)
class GAME::Object * GAME::ObjectManager::CreateObjectFromFilePartial(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::Object * GAME::LoadTable::CreateObjectFromProperty(char const *)
unsigned int GAME::ObjectManager::CreateObjectID(void)
void GAME::NetPacket::CreateOutBuffer(unsigned int)
class GAME::NetPacket * GAME::NetPacket::CreatePacket(enum GAME::PACKET_TYPE)
bool GAME::Level::CreatePathMesh(void)
void GAME::Actor::CreatePathObstacles(void)
void GAME::Entity::CreatePathObstacles(void)
void GAME::Level::CreatePhysics(void)
void GAME::TerrainBase::CreatePhysics(void)
void GAME::Water::CreatePhysics(void)
void GAME::WaterLayer::CreatePhysics(void)
class GAME::PhysicsMeshBase * GAME::PhysicsEngine2::CreatePhysicsMesh(void)
void GAME::World::CreatePointDisturbance(class GAME::WorldVec3 const &,float,float,bool,enum GAME::SplashType)
class GAME::Portal * GAME::Region::CreatePortal(void)
class GAME::GraphicsMTJob_PrepareDepth * GAME::GraphicsMTRenderer::CreatePrepareDepthJob(class GAME::GraphicsScene &)
class GAME::GraphicsMTJob_PrepareReflection * GAME::GraphicsMTRenderer::CreatePrepareReflectionJob(struct GAME::LightEntry const *,struct GAME::ReflectionGroup *,class GAME::GraphicsScene &)
class GAME::GraphicsMTJob_PrepareScene * GAME::GraphicsMTRenderer::CreatePrepareSceneJob(struct GAME::LightEntry const *,class GAME::GraphicsScene &)
class GAME::GraphicsMTJob_PrepareShadow * GAME::GraphicsMTRenderer::CreatePrepareShadowJob(struct GAME::LightEntry const *,class GAME::GraphicsScene &)
class GAME::GraphicsMTJob_PrepareTransparency * GAME::GraphicsMTRenderer::CreatePrepareTransparencyJob(struct GAME::LightEntry const *,class GAME::GraphicsScene &)
struct GAME::ReflectionGroup * GAME::GraphicsMTRenderer::CreateReflectionGroup(class GAME::GraphicsReflectionPlane &)
void GAME::GraphicsMTRenderer::CreateRenderTargets(void)
bool GAME::Water::CreateRipple(class GAME::Vec3 const &,float,float,unsigned int)
class GAME::GraphicsScene * GAME::GraphicsMTRenderer::CreateScene(enum GAME::GraphicsScene::SceneType,class GAME::Camera const &,class GAME::Region *,class GAME::Viewport const &,class GAME::Frustum const &,enum GAME::RenderFlag)
void GAME::WeatherManager::CreateSharedResources(void)
class GAME::NetPacket * GAME::Entity::CreateSpawnNetPacket(void)
class GAME::RenderSurface * GAME::GraphicsCanvas::CreateTemporaryTextureSurface(int,int,enum GAME::RenderTextureFormat,enum GAME::RenderTextureFormat,bool)
void GAME::FogOfWar::CreateTexture(void)
class GAME::RenderSurface * GAME::GraphicsCanvas::CreateTextureSurface(int,int,class GAME::RenderTexture const *,enum GAME::RenderTextureFormat)
class GAME::RenderSurface * GAME::GraphicsCanvas::CreateTextureSurface(int,int,enum GAME::RenderTextureFormat,enum GAME::RenderTextureFormat)
void GAME::RegionId::CreateUnique(void)
void GAME::Region::CreateUniqueId(void)
void GAME::DebugRenderManager::CreateVertexDeclaration(void)
class GAME::WaterType * GAME::WaterTypeManager::CreateWaterType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::World::CreateWorldGrid(void)
void GAME::Entity::CrowdAgentCreated(class GAME::Vec3 &,class GAME::Vec3 &,struct CROWD::CrowdAgentParams &)
void GAME::Entity::CrowdAgentDestroyed(void)
void GAME::Entity::CrowdAgentError(struct CROWD::CrowdAgentData const &,enum CROWD::CrowdError)
void GAME::Entity::CrowdAgentMoved(struct CROWD::CrowdAgentData const &)
void GAME::Entity::CrowdAgentReachedGoal(struct CROWD::CrowdAgentData const &)
void GAME::Entity::CrowdAgentStopped(struct CROWD::CrowdAgentData const &)
void GAME::Entity::CrowdAgentUpdate(int,struct CROWD::CrowdAgentParams &)
void GAME::NetworkEntityList::DebugDumpDiscrepancies(int)
void GAME::NavManager::DebugHighlightPoly(class GAME::WorldVec3 const &,class GAME::Color const &)
void GAME::FileSystem::DebugLog(void)
void GAME::Decal::DebugRender(void)
void GAME::NavManager::DebugRender(class GAME::Region *)
void GAME::NetworkEntityList::DebugRender(class GAME::WorldFrustum const *)
void GAME::PhysicsEngine2::DebugRender(void)
void GAME::PhysicsMesh::DebugRender(int,class GAME::Coords const &)
void GAME::PhysicsMesh::DebugRender(class GAME::Coords const &)
void GAME::PhysicsMesh_Bullet::DebugRender(class GAME::Coords const &)
void GAME::ImpassableData::DebugRenderBoxes(void)
void GAME::NetworkEntityList::DebugValidateClient(int,class mem::vector<unsigned int> const *)
int GAME::Sound::DecLoopCount(void)
void GAME::PhysicsMeshBase::DecRefCount(void)
char const * GAME::Socket::Decompress(char const *,unsigned long &)
void GAME::TrailEffect::DecrementAlpha(int)
void GAME::NetworkQueue::DecrementFreeSpace(int)
void GAME::Tracker::DecrementInt(char const *,char const *)
void GAME::Tracker::DecrementInt(char const *,char const *,bool)
void GAME::BaseResourceManager::DecrementMemoryUsage(unsigned int)
void GAME::Engine::DecrementPathingCounter(void)
void GAME::InstanceGroupManager::DeleteGroup(int)
void GAME::Terrain::DeleteLayer(unsigned int)
bool GAME::Entity::DeleteOnEnteringUnloadedLevel(void)
void GAME::SectorDataManager::DeleteSectorData(unsigned int,unsigned int)
void GAME::NetPacketDescriber::Describe(class GAME::NetPacket *,bool)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class GAME::Coords &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class GAME::Vec3 &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class GAME::WorldCoords &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class GAME::WorldVec3 &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class GAME::Plane const &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class GAME::SmartObjectId const &,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,char,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,unsigned int,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,float,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,struct in_addr,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,enum GAME::PACKET_TYPE,int)
void GAME::NetPacketDescriber::Describe(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,bool,int)
void GAME::CharacterActionPacket::Deserialize(class GAME::NetPacketInBuffer &)
void GAME::LoadTable::Deserialize(class GAME::BasicTextParser<char> &)
void GAME::LoadTable::Deserialize(class GAME::BinaryReader &)
void GAME::LoadTableBinary::Deserialize(class GAME::BinaryReader &)
void GAME::NetPacketHeader::Deserialize(unsigned char const *)
void GAME::Serializer::Deserialize(class GAME::BinaryReader *,bool)
void GAME::Singleton<class GAME::AsyncWorker>::Destroy(void)
void GAME::Singleton<class GAME::CPUCoreDetector>::Destroy(void)
void GAME::Singleton<class GAME::DebugRenderManager>::Destroy(void)
void GAME::Singleton<class GAME::EventManager>::Destroy(void)
void GAME::Singleton<class GAME::Jukebox>::Destroy(void)
void GAME::Singleton<class GAME::NavManager>::Destroy(void)
void GAME::Singleton<class GAME::ObjectManager>::Destroy(void)
void GAME::Singleton<class GAME::RouterServices>::Destroy(void)
void GAME::Singleton<class GAME::StyleManager>::Destroy(void)
void GAME::Singleton<class GAME::Tracker>::Destroy(void)
void GAME::ConversationResource::Destroy(void)
void GAME::EditorFilter::Destroy(void)
void GAME::EffectResource::Destroy(void)
void GAME::FogOfWar::Destroy(void)
void GAME::GraphicsAnim::Destroy(void)
void GAME::GraphicsCursor::Destroy(void)
void GAME::GraphicsFont2::Destroy(void)
void GAME::GraphicsMesh::Destroy(void)
void GAME::GraphicsShader2::Destroy(void)
void GAME::GraphicsTexture::Destroy(void)
void GAME::Image::Destroy(void)
void GAME::ImageResource::Destroy(void)
void GAME::InputDevice::Destroy(class GAME::InputDevice * &)
void GAME::InstanceGroupManager::Destroy(void)
void GAME::RenderDevice::Destroy(class GAME::RenderDevice * &)
void GAME::SectorLayers::Destroy(void)
void GAME::SoundResource::Destroy(void)
void GAME::Steamworks::Destroy(void)
void GAME::UniqueIdMap::Destroy(void)
void GAME::WaterRenderInterface::Destroy(void)
void GAME::WaterTypeManager::Destroy(void)
void GAME::WinWindow::Destroy(void)
void GAME::ZoneManager::Destroy(void)
bool GAME::Level::DestroyAllEntities(int)
void GAME::World::DestroyAllEntities(void)
bool GAME::BaseResourceManager::DestroyAllResources(void)
void GAME::WaterLayer::DestroyBlockGeometry(void)
void GAME::WaterLayer::DestroyBlocks(void)
void GAME::TerrainPatch::DestroyBuffers(void)
void GAME::GraphicsMTRenderer::DestroyBuildReflectionJob(class GAME::GraphicsMTJob_BuildReflection *)
void GAME::GraphicsMTRenderer::DestroyBuildSceneJob(class GAME::GraphicsMTJob_BuildScene *)
void GAME::GraphicsMTRenderer::DestroyBuildShadowJob(class GAME::GraphicsMTJob_BuildShadow *)
void GAME::GridRegion::DestroyCell(int,int,int)
void GAME::GridRegion::DestroyCells(void)
bool GAME::GraphicsCanvas::DestroyDynamicBuffers(void)
void GAME::GrassObject::DestroyGrass(class GAME::TerrainBase *)
void GAME::GrassObject::DestroyGrass(void)
void GAME::Terrain::DestroyGrassGeometry(struct GAME::GrassObject::GrassGeometry &)
void GAME::TerrainPatch::DestroyLayer(struct GAME::TerrainPatch::Layer *)
void GAME::TerrainPatch::DestroyLayers(void)
void GAME::Region::DestroyLevelEntities(void)
void GAME::Terrain::DestroyMapGeometry(void)
void GAME::ObjectManager::DestroyObjectEx(class GAME::Object *,char const *,int)
void GAME::ObjectManager::DestroyPendingObjects(unsigned int)
void GAME::Level::DestroyPhysics(void)
void GAME::TerrainBase::DestroyPhysics(void)
void GAME::Water::DestroyPhysics(void)
void GAME::WaterLayer::DestroyPhysics(void)
void GAME::Region::DestroyPortal(class GAME::Portal *)
void GAME::GraphicsMTRenderer::DestroyPrepareDepthJob(class GAME::GraphicsMTJob_PrepareDepth *)
void GAME::GraphicsMTRenderer::DestroyPrepareReflectionJob(class GAME::GraphicsMTJob_PrepareReflection *)
void GAME::GraphicsMTRenderer::DestroyPrepareSceneJob(class GAME::GraphicsMTJob_PrepareScene *)
void GAME::GraphicsMTRenderer::DestroyPrepareShadowJob(class GAME::GraphicsMTJob_PrepareShadow *)
void GAME::GraphicsMTRenderer::DestroyPrepareTransparencyJob(class GAME::GraphicsMTJob_PrepareTransparency *)
void GAME::GraphicsMTRenderer::DestroyReflectionGroup(struct GAME::ReflectionGroup *)
void GAME::GraphicsMTRenderer::DestroyRenderTargets(void)
void GAME::GraphicsMTRenderer::DestroyScene(class GAME::GraphicsScene *)
void GAME::WaterPath::DestroySegmentGeometry(void)
void GAME::WaterWaveSet::DestroySegmentGeometry(void)
void GAME::WeatherManager::DestroySharedResources(void)
void GAME::SoundEntity::DestroySoundPak(void)
void GAME::GraphicsCanvas::DestroySurface(class GAME::RenderSurface *)
void GAME::TerrainBase::DestroyTerrainBlocks(void)
void GAME::FogOfWar::DestroyTexture(void)
void GAME::Actor::Detach(class GAME::Entity *)
void GAME::Entity::Detach(class GAME::Entity *)
void GAME::FileSourceArchive::Detach(void)
void GAME::PhysicsObject2::Detach(void)
void GAME::Entity::DetachIllumination(void)
void GAME::Entity::DetachPunctuation(void)
void GAME::CPUCoreDetector::Detect(void)
bool GAME::RenderDevice::DeviceLost(void)
bool GAME::SaveManager::DirectRead(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void * &,unsigned int &,bool,bool)
bool GAME::SaveManager::DirectWrite(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,unsigned int,bool,bool,bool)
float & GAME::WaterType::Direction(void)
float GAME::WaterType::Direction(void)
void GAME::SoundManager::Disable2D(void)
void GAME::SoundManager::Disable3D(void)
void GAME::DebugRenderManager::Disable(void)
void GAME::Light::Disable(void)
void GAME::EffectEntity::DisableCameraShake(void)
void GAME::Engine::DisableCharacterProcessing(void)
void GAME::Actor::DisableCreateAttachements(void)
void GAME::GraphicsMeshInstance::DisableDbrShader(bool)
void GAME::SoundManager::DisableDistanceCheck(void)
void GAME::ImpassableData::DisableInvalidate(void)
void GAME::Engine::DisableLog(void)
void GAME::Effect::DisableLooping(void)
void GAME::EffectEntity::DisableLooping(void)
void GAME::Emitter::DisableLooping(void)
void GAME::HwndWindow::DisableSetCursor(void)
void GAME::WinWindow::DisableSetCursor(void)
void GAME::SoundManager::DisableSound(void)
void GAME::InstanceGroupManager::DisavowAllKnowledge(class GAME::Entity *)
void GAME::NetworkSocket::Disconnect(void)
void GAME::ClientConnectionManager::DisconnectFromServer(void)
void GAME::ConnectionManager::DisconnectFromServer(void)
void GAME::ServerConnectionManager::DisconnectFromServer(void)
void GAME::ConnectionManager::DisconnectHost(int,char const *)
void GAME::ServerConnectionManager::DisconnectHost(int,char const *)
void GAME::ThreadMonitor::Display(void)
void GAME::Engine::DisplayD3D9Stats(void)
void GAME::SoundManager::DisplayDebuggingInfo(void)
void GAME::Tracker::DisplayFrameStats(void)
void GAME::SoundManager::DisplayStats(void)
void GAME::Tracker::DisplayStats(char const *)
bool GAME::Engine::DoCharacterProcessing(void)
void GAME::SoundPak::DoFalloffCheck(bool)
void GAME::LineEffect::DoSetPauseAtTarget(void)
bool GAME::NetworkEntityList::DoesEntityExistOnAnyClient(class GAME::Entity *)
bool GAME::FileSystem::DoesFileExist(char const *)
unsigned int GAME::NetPacketOutBuffer::Done(bool)
void GAME::Draw2DDirectionalQuad(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec2 const &,class GAME::Vec2 const &,class GAME::Vec2 const &,class GAME::Color const &)
void GAME::Draw2DOrientedQuad(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec2 const &,class GAME::Vec2 const &,class GAME::Vec2 const &)
void GAME::Draw2DRectangle(class GAME::GraphicsPrimitiveDrawer &,class GAME::Rect const &,class GAME::Rect const &)
void GAME::Draw2DRectangle(class GAME::GraphicsPrimitiveDrawer &,class GAME::Rect const &)
void GAME::Draw2DRectangle(class GAME::GraphicsPrimitiveDrawer &,class GAME::Rect const &,float)
void GAME::DrawArc(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,float,unsigned int)
void GAME::DrawArrow(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Color const &,class GAME::Color const &,class GAME::Vec3 const &)
void GAME::DrawAxisLines(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,float)
void GAME::DrawAxisSphere(class GAME::GraphicsPrimitiveDrawer &,class GAME::Coords const &,float,unsigned int)
void GAME::DrawAxisSphere(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,float,unsigned int)
void GAME::DrawCapsule(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,unsigned int)
void GAME::Water::DrawCurveSelectionPoints(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,enum GAME::WaterCurve::CurveType)
void GAME::Emitter::DrawDebugLines(class GAME::EmitterData const *)
void GAME::GraphicsCanvas::DrawDynamicRect(class GAME::Rect const &,class GAME::Rect const &,class GAME::Color const &,float)
void GAME::GraphicsCanvas::DrawDynamicRect(class GAME::Rect const &,class GAME::Color const &,class GAME::Color const &,float)
void GAME::WaterCurve::DrawEditing(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &)
void GAME::WaterPath::DrawEditing(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &)
void GAME::TerrainRenderInterface::DrawLayerCountLabels(class GAME::TerrainRenderBatch const *,class GAME::Coords const &)
void GAME::TerrainRenderInterfaceBase::DrawLayerCountLabels(class GAME::Coords const &)
void GAME::GraphicsMTRenderer::DrawLightBounds(class GAME::GraphicsScene const &,class mem::vector<struct GAME::LightEntry> const &)
void GAME::WaterCurve::DrawSelectionPoints(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &)
void GAME::DrawSolidBox(class GAME::GraphicsPrimitiveDrawer &,class GAME::ABBox const &)
void GAME::DrawSolidBox(class GAME::GraphicsPrimitiveDrawer &,class GAME::OBBox const &)
void GAME::DrawSolidCircle(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,float,unsigned int)
void GAME::DrawSolidTetrahedron(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,float)
void GAME::DrawWireTetrahedron(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,float)
void GAME::DrawWireframeBox(class GAME::GraphicsPrimitiveDrawer &,class GAME::ABBox const &)
void GAME::DrawWireframeBox(class GAME::GraphicsPrimitiveDrawer &,class GAME::OBBox const &)
void GAME::DrawWireframeCircle(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,float,unsigned int)
void GAME::EffectData::DropDecalLoad(int,char const *)
void GAME::SoundManager::Dump(void)
void GAME::Engine::DumpCharacterStatsToFile(char const *)
void GAME::ObjectManager::DumpDetailedObjectList(void)
void GAME::ClientConnectionManager::DumpHostTable(void)
void GAME::ConnectionManager::DumpHostTable(void)
void GAME::Engine::DumpHostTable(void)
void GAME::ServerConnectionManager::DumpHostTable(void)
void GAME::NetworkSocket::DumpInterfaceInfo(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Socket::DumpInterfaceInfo(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Engine::DumpNetworkStats(void)
void GAME::ObjectManager::DumpObjectList(void)
void GAME::NetworkShim::DumpPacketStatsToFile(char const *)
void GAME::Engine::DumpProfiler(void)
void GAME::LuaManager::DumpStack(void)
void GAME::ClientConnectionManager::DumpStats(void)
void GAME::ConnectionManager::DumpStats(void)
void GAME::NetworkLinkStats::DumpStats(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ServerConnectionManager::DumpStats(void)
void GAME::TableDepot::DumpStats(void)
void GAME::ClientConnectionManager::DumpStatsToString(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::ConnectionManager::DumpStatsToString(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::NetworkLinkStats::DumpStatsToString(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,bool)
void GAME::ServerConnectionManager::DumpStatsToString(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::Profile::DumpToFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
enum GAME::Entity::DynamicOccluderType GAME::Entity::DynamicPathingOccluder(void)
void GAME::SectorLayers::Edit(int,int,bool)
void GAME::WaterLayer::EditorUpdateArea(class GAME::Vec3 const &,float,bool)
float GAME::ElapsedMilliseconds(__int64 const &,__int64 const &)
void GAME::Emitter::EmitAnchoredParticle(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,class GAME::EmitterData const *)
void GAME::Emitter::EmitBoneParticles(int,class GAME::EmitterData const *,class mem::vector<struct GAME::EmitterBone> *)
void GAME::Emitter::EmitBoneParticles(class GAME::EmitterData const *,struct GAME::EmitterBone &)
void GAME::Emitter::EmitParticle(class GAME::Coords const &,class GAME::EmitterData const *,int)
void GAME::Emitter::EmitParticles(class GAME::EmitterData const *,class mem::vector<struct GAME::EmitterBone> const *)
void GAME::SoundManager::Enable2D(void)
void GAME::GraphicsPrimitiveDrawer::Enable2DMode(class GAME::Viewport const &,float)
void GAME::SoundManager::Enable3D(void)
void GAME::DebugRenderManager::Enable(void)
void GAME::Light::Enable(void)
void GAME::Profile::Enable(bool)
void GAME::GraphicsEngine::EnableBloom(bool)
void GAME::Engine::EnableCharacterProcessing(void)
void GAME::Engine::EnableD3D9Stats(bool)
void GAME::EventManager::EnableDebugging(bool)
void GAME::ObjectManager::EnableDebugging(bool)
void GAME::ResourceLoader::EnableDebugging(bool)
void GAME::SoundManager::EnableDebugging(bool)
void GAME::World::EnableDebugging(bool)
void GAME::GraphicsEngine::EnableDecals(bool)
void GAME::SoundManager::EnableDistanceCheck(void)
void GAME::GraphicsEngine::EnableEffects(bool)
void GAME::AmbianceManager::EnableEnvironmentEffects(bool)
void GAME::GraphicsEngine::EnableFPS(bool)
void GAME::GraphicsEngine::EnableFog(bool)
void GAME::LuaManager::EnableGarbageCollection(bool)
void GAME::GraphicsEngine::EnableGrass(bool)
void GAME::GraphicsEngine::EnableGridTiles(bool)
void GAME::ConnectionManager::EnableHeartbeat(bool)
void GAME::ImpassableData::EnableInvalidate(void)
void GAME::GraphicsEngine::EnableLighting(bool)
void GAME::Engine::EnableLog(void)
void GAME::GraphicsEngine::EnableMeshes(bool)
void GAME::Actor::EnableOutline(bool)
void GAME::SoundPak::EnablePauseHack(void)
void GAME::Engine::EnablePerfStats(bool)
void GAME::BaseResourceManager::EnablePreLoading(bool)
void GAME::GraphicsEngine::EnableReflections(bool)
void GAME::GraphicsEngine::EnableRegionList(bool)
void GAME::GraphicsEngine::EnableRendering(bool)
void GAME::GraphicsEngine::EnableShadows(bool)
void GAME::GraphicsEngine::EnableShowBoundingBoxes(bool)
void GAME::GraphicsEngine::EnableShowLights(bool)
void GAME::ResourceLoader::EnableSingleProcessorMode(bool)
void GAME::SoundManager::EnableSound(void)
void GAME::GraphicsEngine::EnableStats(bool)
void GAME::SoundManager::EnableStats(bool)
void GAME::GraphicsEngine::EnableTerrain(bool)
void GAME::Engine::EnableTimeSmoothing(bool)
void GAME::GraphicsEngine::EnableTransparency(bool)
void GAME::GraphicsEngine::EnableWater(bool)
void GAME::GraphicsCanvas::EnableWireframe(bool)
void GAME::GraphicsEngine::EnableWireframe(bool)
class std::_List_const_iterator<class std::_List_val<struct std::_List_simple_types<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > > > GAME::ConfigFile::End(void)
void GAME::GraphicsPrimitiveDrawer::End(void)
void GAME::GraphicsShader2::End(void)
void GAME::IOStreamRead::EndBlock(void)
void GAME::IOStreamWrite::EndBlock(void)
void GAME::Profile::EndCycleCount(unsigned __int64 &)
void GAME::GraphicsCanvas::EndFrame(void)
void GAME::Profile::EndFrame(void)
void GAME::GraphicsEngine::EndPerfEvent(void)
void GAME::PhysicsEngine2::EndUpdate(int)
bool GAME::Actor::Enqueue(class GAME::ActorConfigCommand *)
void GAME::ResourceLoader::EnqueueResource(class GAME::Resource const *,enum GAME::ResourcePriority,bool,bool)
void GAME::Resource::EnsureAvailable(void)
void GAME::Entity::EnsureUniqueID(bool)
void GAME::CriticalSection::Enter(char const *)
void GAME::CriticalSection::EnterNoProfile(char const *)
void GAME::BaseResourceManager::EvictOldResources(unsigned int,unsigned int,unsigned int,unsigned int)
void GAME::Engine::EvictOldResources(void)
void GAME::GraphicsEngine::EvictOldResources(unsigned int)
void GAME::SoundManager::EvictOldResources(unsigned int)
void GAME::ActorConfigCommand::Execute(void)
void GAME::GraphicsMTRenderer::ExecuteBuildReflection(class GAME::GraphicsScene &,class mem::vector<class GAME::Region *> &)
void GAME::GraphicsMTRenderer::ExecuteBuildScene(bool,class GAME::WorldFrustum const *,class GAME::GraphicsScene &,class mem::vector<class GAME::Region *> &)
void GAME::GraphicsMTRenderer::ExecuteBuildShadow(class GAME::Vec3 const &,class GAME::Vec3 const &,struct GAME::LightEntry *,class GAME::GraphicsScene &,class mem::vector<class GAME::Entity *> &)
void GAME::HookPack::ExecuteEventHook(unsigned int)
void GAME::GraphicsMTRenderer::ExecuteJob(class GAME::GraphicsMTJob *)
void GAME::GraphicsMTRenderer::ExecutePrepareDepth(class GAME::GraphicsScene &,class mem::vector<struct GAME::RenderablePass> &)
void GAME::GraphicsMTRenderer::ExecutePrepareReflection(class GAME::GraphicsScene &,struct GAME::LightEntry const *)
void GAME::GraphicsMTRenderer::ExecutePrepareScene(class GAME::GraphicsScene &,struct GAME::LightEntry const *)
void GAME::GraphicsMTRenderer::ExecutePrepareShadow(struct GAME::LightEntry const *,class GAME::GraphicsScene &)
void GAME::GraphicsMTRenderer::ExecutePrepareTransparency(class GAME::GraphicsScene &,struct GAME::LightEntry const *,class mem::vector<struct GAME::RenderablePass> &)
bool GAME::HookPack::ExecuteQueryHook(unsigned int)
void GAME::CriticalSection::Exit(void)
bool GAME::Engine::Expansion1FilesExist(void)
bool GAME::Engine::Expansion2FilesExist(void)
float GAME::RandomUniformLocked::FGenerate(float,float)
float GAME::TerrainPatch::FaceAreaXZ(class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::PieOmatic::FadeIn(void)
void GAME::SoundPak::FadeLastPlayedSound(int,bool)
void GAME::EffectEntity::FadeLight(void)
void GAME::PieOmatic::FadeOut(void)
bool GAME::SoundManager::FadeSound(int,int,int,bool)
class GAME::Property * GAME::Serializer::FastGetProperty(bool &)
void GAME::SoundManager::FastPause(void)
void GAME::SoundManager::FastUnPause(bool)
void GAME::Actor::FastUpdate(int)
void GAME::Entity::FastUpdate(int)
void GAME::Serializer::FastWritePropertyID(unsigned int)
void GAME::Serializer::FastWriteTerminator(void)
void GAME::SectorLayers::Fill(void)
void GAME::InstanceGroup::FillIdList(class mem::vector<class GAME::UniqueId> &)
bool GAME::NavManager::FillPointSet(class mem::vector<class GAME::WorldVec3> &,class GAME::WorldVec3 const &,float,class mem::vector<float> const &,bool,bool)
void GAME::TrailEffect::FillPoints(void)
bool GAME::InstanceGroup::FilterEntity(class GAME::Entity *)
bool GAME::InstanceGroupManager::FilterEntity(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Entity *)
enum GAME::NavResult GAME::NavManager::FindClosestPointOnPathMesh(class GAME::WorldVec3 const &,class GAME::WorldVec3 &,float)
int GAME::RenderDevice::FindDeviceLibrary(class GAME::RenderDevice *)
bool GAME::FileSourceArchive::FindFilePath(char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
bool GAME::FileSourceDirectory::FindFilePath(char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
bool GAME::FileSystem::FindFullFilePath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::ClientConnectionManager::FindLANServer(void)
class GAME::WaterLayer * GAME::Water::FindLayer(char const *,float)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ConnectionManager::FindLocalHostName(void)
void GAME::ConnectionManager::FindLocalIP(void)
unsigned int GAME::Archive::FindMatchingFiles(class mem::vector<int> &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::LocalizationManager::FindParamTypes(int &,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
bool GAME::NavManager::FindPath(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,float,class GAME::WorldVec3 *,unsigned int *,float *,class mem::vector<class GAME::WorldVec3> *,class GAME::Vec3 *,bool)
enum GAME::NavResult GAME::NavManager::FindRandomPointInRadius(class GAME::WorldVec3 const &,float,class GAME::WorldVec3 &)
enum GAME::NavResult GAME::NavManager::FindStraightMovePoint(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,class GAME::WorldVec3 &)
void GAME::NavManager::FindStraightMovePointOnSlopes(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,class GAME::WorldVec3 &)
unsigned int GAME::GraphicsShader2::FindStyleByName(class GAME::Name const &)
class GAME::WeatherSystem * GAME::WeatherManager::FindSystem(int)
struct GAME::WaterTypeManager::WaterTypeRef * GAME::WaterTypeManager::FindWaterType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ObjectManager::FinishCreateObjectFromFilePartial(class GAME::Object *,unsigned int)
void GAME::NetPacket::FinishObjectProcessing(void)
void GAME::ObjectInteractionPacket::FinishObjectProcessing(void)
void GAME::SmartObjectId::FinishReplication(void)
bool GAME::OverlayActivity::Finished(void)
void GAME::TerrainPatch::FixLayers(void)
void GAME::Image::FlipDiagonally(void)
void GAME::Image::FlipHorizontally(void)
void GAME::PieOmatic::FlipSegment(int)
void GAME::Image::FlipVertically(void)
void GAME::DebugRenderManager::Flush(class GAME::GraphicsCanvas &,class GAME::Region *,class GAME::Camera const &,class GAME::Viewport const &)
void GAME::GraphicsPrimitiveDrawer::Flush(void)
void GAME::Socket::FlushSendQueue(void)
void GAME::Actor::ForceDefaultMeshFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsEngine::ForceDeviceReset(void)
void GAME::RouterServices::ForceInitialize(void)
void GAME::Actor::ForcePoseUpdate(void)
void GAME::AmbianceManager::ForceUpdateFog(void)
void GAME::Entity::ForcedUpdate(int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::FormatNetworkErrorMessage(int)
class GAME::IPVNetworkAddress const & GAME::IPVNetworkAddress::FromNetworkAddress(class GAME::NetworkAddress const &)
void GAME::GraphicsCanvas::GammaCorrect(void)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > GAME::LocalizationManager::GenderizeText(bool,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,bool)
void GAME::Lightning2::Generate(void)
void GAME::LineEffect2::Generate(void)
unsigned int GAME::RandomUniformLocked::GenerateSeed(void)
void GAME::Lightning2::GenerateSubTendril(class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,bool)
void GAME::Lightning2::GenerateTendril(class GAME::Vec3 const &,class GAME::Vec3 const &,float)
void GAME::Actor::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &)
void GAME::Actor::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,float)
void GAME::GraphicsMesh::GeometryBusStop(class GAME::WorldCoords const &,class GAME::Vec3 const &,class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &)
void GAME::GraphicsMesh::GeometryBusStop(class GAME::WorldCoords const &,class GAME::Vec3 const &,class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,float)
void GAME::GridBase::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &,class GAME::IntVec3 const &)
void GAME::GridBase::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,class GAME::IntVec3 const &,float)
void GAME::GridRegion::GeometryBusStop(class GAME::Region *,class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,class GAME::IntVec3 const &)
void GAME::GridRegion::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &,class GAME::IntVec3 const &)
void GAME::Region::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &,class GAME::Region *)
void GAME::Region::GeometryBusStop(class GAME::Region *,class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,float)
void GAME::Terrain::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &,class GAME::IntVec3 const &)
void GAME::Terrain::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,class GAME::IntVec3 const &,float)
void GAME::TerrainBase::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &,class GAME::IntVec3 const &)
void GAME::TerrainBase::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,class GAME::IntVec3 const &,float)
void GAME::World::GeometryBusStop(class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBus::SimpleFace> &,class GAME::Region *,bool)
void GAME::World::GeometryBusStop(class GAME::Region *,class GAME::ABBox const &,class mem::vector<struct GAME::GeometryBusAdvanced::Vertex> &,class mem::vector<struct GAME::GeometryBusAdvanced::Face> &,bool,float)
class GAME::AsyncWorker * GAME::Singleton<class GAME::AsyncWorker>::Get(void)
class GAME::CPUCoreDetector * GAME::Singleton<class GAME::CPUCoreDetector>::Get(void)
class GAME::DebugRenderManager * GAME::Singleton<class GAME::DebugRenderManager>::Get(void)
class GAME::EventManager * GAME::Singleton<class GAME::EventManager>::Get(void)
class GAME::Jukebox * GAME::Singleton<class GAME::Jukebox>::Get(void)
class GAME::NavManager * GAME::Singleton<class GAME::NavManager>::Get(void)
class GAME::ObjectManager * GAME::Singleton<class GAME::ObjectManager>::Get(void)
class GAME::RouterServices * GAME::Singleton<class GAME::RouterServices>::Get(void)
class GAME::StyleManager * GAME::Singleton<class GAME::StyleManager>::Get(void)
class GAME::Tracker * GAME::Singleton<class GAME::Tracker>::Get(void)
class GAME::DecalTypeMgr & GAME::DecalTypeMgr::Get(void)
class GAME::EditorFilter * GAME::EditorFilter::Get(void)
class GAME::InstanceGroupManager * GAME::InstanceGroupManager::Get(void)
class GAME::Steamworks * GAME::Steamworks::Get(void)
class GAME::UniqueIdMap * GAME::UniqueIdMap::Get(void)
class GAME::WaterTypeManager & GAME::WaterTypeManager::Get(void)
class GAME::ZoneManager * GAME::ZoneManager::Get(void)
class GAME::Coords GAME::GraphicsMesh::GetAbsCoords(class GAME::SkeletalPose const &,class GAME::Name const &)
class GAME::Coords GAME::GraphicsMesh::GetAbsCoords(class GAME::SkeletalPose const &,int)
void GAME::GraphicsMesh::GetAbsCoords(class GAME::SkeletalPose const &,class GAME::Coords * const)
void GAME::GraphicsMesh::GetAbsCoords(class GAME::SkeletalPose const &,class GAME::Coords * const,class GAME::GraphicsMesh const *,class GAME::SkeletalPose const &)
enum GAME::ZonePage GAME::ZoneManager::GetActFromRegion(class GAME::Region const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const GAME::TerrainType::GetActorName(void)
struct sockaddr * GAME::IPVNetworkAddress::GetAddressAsSockAddr(void)
enum GAME::NetworkAddressType GAME::IPVNetworkAddress::GetAddressType(void)
struct GAME::AdjustmentParams GAME::AmbianceManager::GetAdjustmentParameters(enum GAME::AmbianceManager::Environment)
bool GAME::TerrainType::GetAffectedByWind(void)
void GAME::GraphicsMesh::GetAllAttachedPoints(class mem::vector<class GAME::Name> &)
void GAME::GraphicsMeshInstance::GetAllAttachedPoints(class mem::vector<class GAME::Name> &)
void GAME::Level::GetAllIntersections(class GAME::Ray const &,class mem::vector<class GAME::Entity *> &,bool,float)
void GAME::World::GetAllIntersections(class GAME::WorldRay const &,class mem::vector<class GAME::Entity *> &,bool,float)
void GAME::TerrainBase::GetAllObjects(class mem::vector<class GAME::TerrainObject *> &)
unsigned int GAME::CurveData::GetAllocatedSize(void)
unsigned int GAME::EffectData::GetAllocatedSize(void)
unsigned int GAME::EmitterData::GetAllocatedSize(void)
unsigned int GAME::PhysicsMesh::GetAllocatedSize(void)
unsigned int GAME::PhysicsMesh_Bullet::GetAllocatedSize(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetAlternateMeshName(void)
float GAME::Actor::GetAmbientHighlight(void)
void GAME::WeaponTrail::GetAnchorPoints(void)
struct GAME::AnimChannel * GAME::GraphicsMeshInstance::GetAnimChannel(int)
float GAME::GraphicsAnim::GetAnimSpeed(void)
float GAME::Actor::GetAnimationSpeedMultiplier(int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Steamworks::GetAnonymousId(void)
unsigned int GAME::Steamworks::GetAppId(void)
class GAME::Archive * GAME::FileSourceArchive::GetArchive(void)
char const * GAME::FileSourceArchive::GetArchiveRelativePath(char const *)
bool GAME::RegionLoader::GetAreLevelsLoaded(void)
struct GAME::InterfaceSkin::Area const * GAME::InterfaceSkin::GetArea(char const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetAreaNameTag(void)
float GAME::LoadTable::GetArrayFloat(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,float)
float GAME::LoadTable::GetArrayFloat(char const *,unsigned int,float)
void GAME::LoadTable::GetArrayFloat(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<float> &)
void GAME::LoadTable::GetArrayFloat(char const *,class mem::vector<float> &)
float GAME::LoadTableBinary::GetArrayFloat(int,unsigned int,float)
void GAME::LoadTableBinary::GetArrayFloat(int,class mem::vector<float> &)
float GAME::LoadTableBinary::GetArrayFloat(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,float)
float GAME::LoadTableBinary::GetArrayFloat(char const *,unsigned int,float)
void GAME::LoadTableBinary::GetArrayFloat(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<float> &)
void GAME::LoadTableBinary::GetArrayFloat(char const *,class mem::vector<float> &)
int GAME::LoadTable::GetArrayInt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,int)
int GAME::LoadTable::GetArrayInt(char const *,unsigned int,int)
void GAME::LoadTable::GetArrayInt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<int> &)
void GAME::LoadTable::GetArrayInt(char const *,class mem::vector<int> &)
int GAME::LoadTableBinary::GetArrayInt(int,unsigned int,int)
void GAME::LoadTableBinary::GetArrayInt(int,class mem::vector<int> &)
int GAME::LoadTableBinary::GetArrayInt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,int)
int GAME::LoadTableBinary::GetArrayInt(char const *,unsigned int,int)
void GAME::LoadTableBinary::GetArrayInt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<int> &)
void GAME::LoadTableBinary::GetArrayInt(char const *,class mem::vector<int> &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LoadTable::GetArrayValue(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,char const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LoadTable::GetArrayValue(char const *,unsigned int,char const *)
void GAME::LoadTable::GetArrayValue(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
void GAME::LoadTable::GetArrayValue(char const *,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
char const * GAME::LoadTableBinary::GetArrayValue(int,unsigned int,char const *)
void GAME::LoadTableBinary::GetArrayValue(int,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LoadTableBinary::GetArrayValue(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,char const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LoadTableBinary::GetArrayValue(char const *,unsigned int,char const *)
void GAME::LoadTableBinary::GetArrayValue(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
void GAME::LoadTableBinary::GetArrayValue(char const *,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
float GAME::Viewport::GetAspectRatio(void)
bool GAME::Engine::GetAtomicCommit(void)
struct GAME::AttachPoint const * GAME::GraphicsMesh::GetAttachPoint(class GAME::Name const &)
class GAME::WorldCoords GAME::Actor::GetAttachedCoords(class GAME::Name const &)
class GAME::WorldCoords GAME::Entity::GetAttachedCoords(class GAME::Name const &)
void GAME::GraphicsMesh::GetAttachedCoords(class GAME::SkeletalPose const &,class GAME::Name const &,class GAME::Coords &)
class GAME::WorldCoords GAME::Actor::GetAttachedCoordsInRegion(class GAME::Name const &,bool)
class GAME::WorldCoords GAME::Entity::GetAttachedCoordsInRegion(class GAME::Name const &,bool)
class GAME::Entity * GAME::Entity::GetAttachedEntity(int)
unsigned int GAME::NetPacketHeader::GetAuthenticationOffset(void)
unsigned int GAME::NetPacketHeader::GetAuthenticationSize(void)
bool GAME::GameInfo::GetAutoParty(void)
bool GAME::InternalParam::GetAutoSpacing(void)
bool GAME::Portal::GetBackToFrontCoords(class GAME::Coords &,class GAME::Region * &)
void GAME::Engine::GetBaseDataPathFromOptions(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,bool)
float GAME::Terrain::GetBaseHeight(unsigned int,unsigned int)
class GAME::Vec3 const & GAME::Actor::GetBaseScale(void)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetBaseTexture(unsigned int)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetBaseTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetBaseTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetBaseTextureName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetBaseTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetBaseTextureName(void)
unsigned int GAME::Actor::GetBaseTexturesSize(void)
unsigned int GAME::GraphicsMeshInstance::GetBaseTexturesSize(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetBaseUserPath(void)
class GAME::GraphicsShader2 const * GAME::GraphicsEngine::GetBasicShader(void)
class GAME::RenderVertexDeclaration const * GAME::GraphicsEngine::GetBasicVertexDeclaration(void)
unsigned int GAME::Image::GetBitsPerPixel(void)
float GAME::TerrainType::GetBladeHeight(void)
unsigned int GAME::TerrainType::GetBladeSpacing(void)
class GAME::GraphicsTexture const * GAME::TerrainType::GetBladeTexture(void)
float GAME::TerrainType::GetBladeWidth(void)
float GAME::AnimChannel::GetBlendAmount(void)
class GAME::WaterBlockBase * GAME::WaterLayer::GetBlock(unsigned int,unsigned int)
class GAME::RenderIndexBuffer const * GAME::Water::GetBlockIndexBuffer(void)
void GAME::Terrain::GetBlocksInDirtySet(class GAME::DirtyRectSet const &,class mem::vector<int> &)
void GAME::Water::GetBlocksInFrustum(class mem::vector<class GAME::WaterElement *> &,class GAME::Frustum const * const,unsigned int)
void GAME::TerrainRenderInterface::GetBlocksInLayer(class GAME::TerrainRenderBatch const *,int,class mem::vector<class GAME::TerrainBlock *> &,class GAME::Sphere const &)
void GAME::TerrainRenderInterfaceRT::GetBlocksInLayer(class GAME::TerrainRenderBatch const *,int,class mem::vector<class GAME::TerrainBlock *> &,class GAME::Sphere const &)
class GAME::Vec3 const GAME::AmbianceManager::GetBloomParameters(enum GAME::AmbianceManager::Environment)
struct GAME::GraphicsMesh::Bone const & GAME::GraphicsMesh::GetBone(unsigned int)
struct GAME::SkeletalPose::AffineParts GAME::SkeletalPose::GetBone(class GAME::Name const &)
class GAME::WorldCoords GAME::Actor::GetBoneCoords(class GAME::Name const &)
void GAME::GraphicsAnim::GetBoneCoords(class GAME::Name const &,class GAME::Vec3 &,bool)
class GAME::Coords GAME::SkeletalPose::GetBoneCoords(class GAME::Name const &)
class GAME::WorldCoords GAME::Actor::GetBoneCoordsInRegion(class GAME::Name const &,bool)
class GAME::WorldCoords GAME::Entity::GetBoneCoordsInRegion(class GAME::Name const &,bool)
int GAME::GraphicsMesh::GetBoneIndex(class GAME::Name const &)
char const * GAME::GraphicsAnim::GetBoneName(unsigned int)
bool GAME::LoadTable::GetBool(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
bool GAME::LoadTable::GetBool(char const *,bool)
bool GAME::LoadTableBinary::GetBool(int,bool)
bool GAME::LoadTableBinary::GetBool(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
bool GAME::LoadTableBinary::GetBool(char const *,bool)
bool GAME::Options::GetBool(enum GAME::Options::BoolName)
bool GAME::EffectData::GetBoolean(int,int)
bool GAME::EmitterData::GetBoolean(int)
class GAME::ABBox const & GAME::GraphicsMesh::GetBoundingBox(void)
class GAME::ABBox GAME::GridBase::GetBoundingBox(void)
class GAME::ABBox GAME::Level::GetBoundingBox(void)
class GAME::ABBox GAME::PhysicsMesh::GetBoundingBox(void)
class GAME::ABBox GAME::PhysicsMesh_Bullet::GetBoundingBox(void)
class GAME::ABBox const & GAME::Region::GetBoundingBox(void)
class GAME::ABBox GAME::TerrainBase::GetBoundingBox(void)
class GAME::DirtyRect GAME::DirtyRectSet::GetBoundingRect(void)
class GAME::ABBox const & GAME::WeatherManager::GetBounds(void)
class GAME::ABBox const & GAME::WeatherManager::GetBoundsInRegion(void)
class GAME::ABBox GAME::Terrain::GetBoxForRect(class GAME::DirtyRect const &)
void * GAME::Image::GetBuffer(void)
class GAME::GraphicsTexture const * GAME::TerrainType::GetBumpMapTexture(unsigned int)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetBumpTexture(unsigned int)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetBumpTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GridSystem::GetBumpTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetBumpTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetBumpTextureName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetBumpTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetBumpTextureName(void)
unsigned int GAME::Actor::GetBumpTexturesSize(void)
unsigned int GAME::GraphicsMeshInstance::GetBumpTexturesSize(void)
unsigned __int64 GAME::Socket::GetBytesRecvCompressed(void)
unsigned __int64 GAME::Socket::GetBytesRecvUncompressed(void)
unsigned __int64 GAME::Socket::GetBytesSentCompressed(void)
unsigned __int64 GAME::Socket::GetBytesSentUncompressed(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Engine::GetCDKey(void)
struct GAME::GraphicsAnim::CallbackPoint const & GAME::GraphicsAnim::GetCallbackPoint(unsigned int)
class GAME::Camera const & GAME::GraphicsPrimitiveDrawer::GetCamera(void)
class GAME::Camera const & GAME::GraphicsScene::GetCamera(void)
float GAME::Camera::GetCameraAspect(void)
float GAME::WorldCamera::GetCameraDistance(void)
float GAME::WorldCamera::GetCameraDistanceDefault(void)
float GAME::WorldCamera::GetCameraFOV(void)
float GAME::WorldCamera::GetCameraFarPlane(void)
float GAME::SoundManager::GetCameraLerp(void)
float GAME::WorldCamera::GetCameraNearPlane(void)
class GAME::Vec3 & GAME::WorldCamera::GetCameraOffset(void)
class GAME::Vec3 const & GAME::WorldCamera::GetCameraOffset(void)
float GAME::WorldCamera::GetCameraPitch(void)
float GAME::WorldCamera::GetCameraPitchDefault(void)
class GAME::Region const * GAME::GraphicsPrimitiveDrawer::GetCameraRegion(void)
class GAME::Region * GAME::GraphicsScene::GetCameraRegion(void)
class GAME::WorldVec3 const & GAME::GraphicsMTRenderer::GetCameraTarget(void)
void GAME::Camera::GetCameraToScreenMatrix(class GAME::Mat4 &,class GAME::Viewport const &)
float GAME::WorldCamera::GetCameraYaw(void)
class GAME::GraphicsCanvas & GAME::GraphicsEngine::GetCanvas(void)
class GAME::GraphicsCanvas * GAME::GraphicsPrimitiveDrawer::GetCanvas(void)
bool GAME::Actor::GetCastsShadows(void)
bool GAME::GraphicsLight::GetCastsShadows(void)
bool GAME::GraphicsMeshInstance::GetCastsShadows(unsigned int)
bool GAME::GraphicsRenderable::GetCastsShadows(unsigned int)
bool GAME::Portal::GetCastsShadows(void)
bool GAME::GraphicsLight::GetCastsSpecular(void)
struct GAME::GridRegion::Cell & GAME::GridRegion::GetCell(int,int,int)
struct GAME::GridRegion::Cell const & GAME::GridRegion::GetCell(int,int,int)
class GAME::Vec3 GAME::GridRegion::GetCellCenter(int,int,int)
class GAME::Coords GAME::GridRegion::GetCellCoords(int,int,int,int)
struct GAME::GridRegion::FeatureCell const & GAME::GridRegion::GetCellFeature(int,int,int)
signed char GAME::GridRegion::GetCellFloor(int,int,int)
void GAME::GridRegion::GetCellMeshesInBox(class GAME::ABBox const &,class mem::vector<class GAME::GraphicsMeshInstance const *> &)
void GAME::ImpassableData::GetCellMeshesInBox(class GAME::ABBox const &,class mem::vector<struct GAME::ImpassableData::PassableFace> &)
class GAME::Vec3 GAME::GridBase::GetCellSize(void)
class GAME::Vec3 GAME::GridRegion::GetCellSize(void)
class GAME::Vec3 GAME::GridSystem::GetCellSpacing(void)
int GAME::GridRegion::GetCellVariation(int,int,int)
class GAME::WorldVec3 & GAME::InstanceGroup::GetCenter(void)
class GAME::Vec3 GAME::Actor::GetCenterOfMass(void)
class GAME::Vec3 GAME::Entity::GetCenterOfMass(void)
unsigned int GAME::GameInfo::GetChallenge(void)
int GAME::ImageResource::GetChannels(void)
class GAME::UniqueId const & GAME::InstanceGroup::GetChildId(unsigned int)
class GAME::WorldCoords GAME::Portal::GetChokePoint(void)
class mem::map<unsigned int,class GAME::MapChunkCallback *> & GAME::Engine::GetChunkCallbackMap(void)
unsigned int GAME::MapChunkCallback::GetChunkId(void)
class mem::vector<struct GAME::CinematicText> const & GAME::Engine::GetCinematicTextEvents(void)
struct GAME::FrustumEntry * GAME::NetworkEntityList::GetClient(int)
struct GAME::FrustumEntry * GAME::NetworkEntityList::GetClientByIndex(unsigned int)
void GAME::NetworkEntityList::GetClientFrustumList(class mem::vector<class GAME::WorldFrustum> &,class mem::vector<class GAME::Sphere> &)
void GAME::ServerEntityList::GetClientFrustumList(class mem::vector<class GAME::WorldFrustum> &,class mem::vector<class GAME::Sphere> &)
int GAME::HwndWindow::GetClientHeight(void)
int GAME::WinWindow::GetClientHeight(void)
bool GAME::ServerConnectionManager::GetClientTagHasAuthKey(int,class mem::vector<unsigned char> &)
int GAME::HwndWindow::GetClientWidth(void)
int GAME::WinWindow::GetClientWidth(void)
class GAME::Rect const & GAME::GraphicsCanvas::GetClippingRect(void)
class GAME::GraphicsMesh const * GAME::TerrainType::GetClutterMesh(void)
class GAME::GraphicsShader2 const * GAME::TerrainRenderInterfaceBase::GetClutterShader(void)
bool GAME::Actor::GetCollisionBox(class GAME::OBBox &)
bool GAME::Entity::GetCollisionBox(class GAME::OBBox &)
char const * GAME::ImpassableData::GetCollisionBuffer(int)
int GAME::ImpassableData::GetCollisionBufferLength(int)
enum GAME::PhysicsShape GAME::Actor::GetCollisionShape(void)
enum GAME::PhysicsShape GAME::Entity::GetCollisionShape(void)
class btBvhTriangleMeshShape * GAME::PhysicsMesh_Bullet::GetCollisionShape(void)
enum GAME::Entity::CollisionType GAME::Entity::GetCollisionType(void)
enum GAME::PSColor GAME::CurveData::GetColor(void)
class GAME::Color const & GAME::GraphicsLight::GetColor(void)
class GAME::Color const & GAME::Light::GetColor(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::LocalizationManager::GetCommunityLocalizationFile(void)
class GAME::Portal * GAME::Portal::GetConnectedPortal(void)
class GAME::UniqueId const & GAME::Portal::GetConnectedPortalId(void)
class GAME::Region * GAME::Portal::GetConnectedRegion(void)
class GAME::RegionId const & GAME::Portal::GetConnectedRegionId(void)
void GAME::World::GetConnectedRegionSet(class GAME::Region const *,class mem::set<class GAME::Region *,struct std::less<class GAME::Region *> > &,int)
class mem::list<class GAME::Region *> const & GAME::Region::GetConnectedRegions(void)
struct GAME::GraphicsMesh::Contour const & GAME::GraphicsMesh::GetContour(unsigned int)
bool GAME::Engine::GetControllerDebugging(void)
class GAME::ResourceManager<class GAME::ConversationResource> * GAME::Engine::GetConversationResourceManager(void)
class GAME::Coords const & GAME::Camera::GetCoords(void)
class GAME::WorldCoords GAME::Entity::GetCoords(void)
class GAME::Coords const & GAME::Portal::GetCoords(void)
class GAME::Coords const & GAME::TransformGizmo::GetCoords(void)
class GAME::WorldCoords GAME::WorldCamera::GetCoords(void)
void GAME::CPUCoreDetector::GetCoreInfo(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,int &,int &)
struct GAME::GraphicsAnim::CreateEntity const & GAME::GraphicsAnim::GetCreateEntity(unsigned int)
bool GAME::GraphicsMesh::GetCreationData(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::AnimChannel::GetCurrentAnimationName(void)
class GAME::Color const & GAME::ColorPulse::GetCurrentColor(void)
class GAME::ControlPoint & GAME::WaterCurve::GetCurrentControlPoint(void)
int GAME::AnimChannel::GetCurrentFrame(void)
unsigned int GAME::LocalizationManager::GetCurrentLanguage(void)
int GAME::SectorDataManager::GetCurrentLayer(void)
class GAME::Vec3 const & GAME::Actor::GetCurrentScale(void)
class GAME::CurveData * GAME::EmitterData::GetCurve(int)
class GAME::CurveData const * GAME::EmitterData::GetCurve(int)
enum GAME::WaterCurve::CurveType GAME::WaterCurve::GetCurveType(void)
class GAME::GraphicsTexture const * GAME::Actor::GetCustomNuggetBitmap(void)
class GAME::GraphicsScene * GAME::GraphicsMTRenderer::GetCustomScene(class GAME::Camera const &,class GAME::Region *,class GAME::Viewport const &,class GAME::Frustum const &,enum GAME::RenderFlag)
void * GAME::ConversationResource::GetData(void)
unsigned char * GAME::FogOfWar::GetData(void)
char * GAME::ImageResource::GetData(void)
int GAME::RegionId::GetData(int)
unsigned int GAME::GraphicsTexture::GetDataLength(class GAME::File *)
unsigned int GAME::ConversationResource::GetDataSize(void)
unsigned int GAME::ImageResource::GetDataSize(void)
int GAME::NetworkQueue::GetDataSize(void)
unsigned int GAME::SoundResource::GetDataSize(void)
class GAME::DatabaseArchive * GAME::Engine::GetDatabaseArchive(void)
unsigned int GAME::Engine::GetDatabaseArchiveChecksum(void)
class GAME::DayNightCycle & GAME::DayNightCycleSectorData::GetDayNightCycle(void)
class GAME::DayNightCycle const & GAME::DayNightCycleSectorData::GetDayNightCycle(void)
float GAME::DayNightCycle::GetDayTime(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetDbrShaderName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GraphicsMeshInstance::GetDbrShaderName(void)
bool GAME::NavManager::GetDebug(void)
class mem::vector<unsigned int> const * GAME::NetworkEntityList::GetDebugEntityList(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsTexture::GetDebugInfo(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Resource::GetDebugInfo(void)
bool GAME::EmitterData::GetDebugLines(void)
class GAME::DecalSet * GAME::Level::GetDecalSet(void)
class GAME::DecalSet const * GAME::Level::GetDecalSet(void)
bool GAME::InputDevice::GetDefaultButtonName(enum GAME::InputDevice::Button,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
char const * GAME::GraphicsAnim::GetDefaultName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetDefaultSettingsPath(void)
float GAME::Engine::GetDefaultShadowBias(void)
bool GAME::InputDevice::GetDefaultShortButtonName(enum GAME::InputDevice::Button,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
class GAME::RenderTexture * GAME::GraphicsEngine::GetDefaultTexture(void)
bool GAME::Engine::GetDeferredRenderer(void)
bool GAME::GraphicsCanvas::GetDeferredRendering(void)
float GAME::GridBase::GetDepth(void)
float GAME::GridRegion::GetDepth(void)
unsigned int GAME::NetworkRateCounter::GetDepth(void)
int GAME::TerrainPatch::GetDepth(void)
class GAME::Vec3 const & GAME::AmbianceManager::GetDepthFog(enum GAME::AmbianceManager::Environment)
int GAME::GridBase::GetDepthInCells(void)
int GAME::GridRegion::GetDepthInCells(void)
void GAME::Engine::GetDepthOfFieldRange(float &,float &)
class GAME::RenderSurface * GAME::GraphicsCanvas::GetDepthTarget(void)
class GAME::RenderTexture const * GAME::GraphicsMTRenderer::GetDepthTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::NetPacketDescriber::GetDescription(void)
char const * GAME::Actor::GetDescriptionTag(void)
enum GAME::Options::Device GAME::Options::GetDevice(void)
unsigned int GAME::GameInfo::GetDifficulty(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GridSystem::GetDiffuseTexture(void)
unsigned int GAME::Name::GetDigest(void)
class GAME::Vec3 GAME::LineEffect2::GetDirection(void)
class GAME::Vec3 GAME::World::GetDirection(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
class GAME::Vec3 GAME::PhysicsUtil::GetDirectionVec(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
float const GAME::GraphicsMeshInstance::GetDissolveParam(void)
float GAME::World::GetDistance(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
float GAME::WorldCamera::GetDistance(void)
float GAME::World::GetDistanceSquared(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
float GAME::TransformGizmo::GetDistanceToCircle(class GAME::Vec2 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Camera const &,class GAME::Viewport const &,class GAME::Vec3 &)
float GAME::CurveData::GetDomain(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::EmitterData::GetDropDecalName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetDumpPath(void)
class GAME::RenderDynamicIndexBuffer * GAME::GraphicsCanvas::GetDynamicIndexBuffer(void)
class GAME::RenderDynamicVertexBuffer * GAME::GraphicsCanvas::GetDynamicVertexBuffer(void)
class GAME::WorldVec3 GAME::SoundManager::GetEarsPosition(void)
class GAME::Terrain * GAME::Level::GetEditableTerrain(void)
class GAME::Terrain const * GAME::Level::GetEditableTerrain(void)
class GAME::EffectData const * GAME::EffectResource::GetEffectData(void)
enum GAME::PhysicsMotion::Type GAME::PhysicsUtil::GetEffectEnum(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::ResourceManager<class GAME::EffectResource> * GAME::Engine::GetEffectResourceManager(void)
int GAME::Timer::GetElapsedTime(void)
class GAME::Vec3 GAME::PhysicsUtil::GetElevationVec(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::EmitterData * GAME::EffectData::GetEmitterData(int)
class GAME::EmitterData const * GAME::EffectData::GetEmitterData(int)
int GAME::SoundManager::GetEmptyCurrentPlayingIndex(void)
class GAME::RenderTexture * GAME::GraphicsEngine::GetEmptyTexture(void)
bool GAME::EmitterData::GetEnabled(void)
void GAME::Region::GetEnclosingFrustum(class GAME::Frustum &)
unsigned int GAME::InternalParam::GetEndPos(void)
void GAME::Level::GetEntities(class mem::vector<class GAME::Entity *> &,class GAME::FilterFunction<class GAME::Entity> const &,enum GAME::EntityListType)
void GAME::Level::GetEntities(class mem::vector<class GAME::Entity *> &,enum GAME::EntityListType)
void GAME::World::GetEntities(class mem::vector<class GAME::Entity *> &,class GAME::FilterFunction<class GAME::Entity> const &,enum GAME::EntityListType)
void GAME::World::GetEntities(class mem::vector<class GAME::Entity *> &,enum GAME::EntityListType)
void GAME::Level::GetEntitiesAroundRay(class GAME::Ray const &,class mem::vector<class GAME::Entity *> &,bool,float,float)
void GAME::World::GetEntitiesAroundRay(class GAME::WorldRay const &,class mem::vector<class GAME::Entity *> &,bool,float,float)
void GAME::Level::GetEntitiesInBox(class mem::vector<class GAME::Entity *> &,class GAME::ABBox const &,bool,enum GAME::EntityListType)
void GAME::World::GetEntitiesInBox(class mem::vector<class GAME::Entity *> &,class GAME::ABBox const &,class GAME::Region *,bool,bool,enum GAME::EntityListType)
void GAME::World::GetEntitiesInCone(class mem::vector<class GAME::Entity *> &,class GAME::WorldVec3 const &,class GAME::Vec3 const &,float,float,bool,enum GAME::EntityListType)
void GAME::Level::GetEntitiesInFrustum(class mem::vector<class GAME::Entity *> &,class GAME::Frustum const * const,unsigned int,bool,enum GAME::EntityListType,bool)
void GAME::Region::GetEntitiesInFrustum(class mem::vector<class GAME::Entity *> &,class GAME::Frustum const &,bool,enum GAME::EntityListType,bool)
void GAME::Region::GetEntitiesInFrustum(class mem::vector<class GAME::Entity *> &,class GAME::Frustum const &,bool,class GAME::Region const *,enum GAME::EntityListType,bool,bool)
void GAME::World::GetEntitiesInFrustum(class mem::vector<class GAME::Entity *> &,class GAME::WorldFrustum const &,bool,enum GAME::EntityListType,bool,bool)
bool GAME::Engine::GetEntitiesInPriorFrameFrustum(class mem::vector<class GAME::Entity *> &)
void GAME::Level::GetEntitiesInSphere(class mem::vector<class GAME::Entity *> &,class GAME::Sphere const &,bool,enum GAME::EntityListType)
void GAME::Region::GetEntitiesInSphere(class mem::vector<class GAME::Entity *> &,class GAME::Sphere const &,bool,enum GAME::EntityListType)
void GAME::World::GetEntitiesInSphere(class mem::vector<class GAME::Entity *> &,class GAME::Region *,class GAME::Sphere const &,bool,enum GAME::EntityListType)
class GAME::Entity * GAME::UniqueIdMap::GetEntity(class GAME::UniqueId const &)
struct GAME::InstanceGroup::EntityData const & GAME::InstanceGroup::GetEntityData(int)
struct GAME::InstanceGroup::EntityData const * GAME::InstanceGroup::GetEntityData(class GAME::UniqueId const &)
struct GAME::InstanceGroup::EntityData const * GAME::InstanceGroupManager::GetEntityData(class GAME::UniqueId &)
class GAME::FilterFunction<class GAME::Entity> * GAME::Engine::GetEntityRenderFilter(void)
bool GAME::AmbianceManager::GetEnvironmentEffects(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GetErrorAsText(int)
long GAME::Socket::GetErrorCount(void)
void GAME::Socket::GetErrors(class mem::vector<int> &)
bool GAME::GameInfo::GetEventInProgress(void)
class mem::vector<struct GAME::InputDevice::ControllerEvent> const & GAME::SteamControllerDevice::GetEvents(void)
float GAME::Actor::GetExtents(void)
float GAME::Entity::GetExtents(void)
float GAME::SoundManager::GetExternalStreamTime(void)
class GAME::Vec3 GAME::FFDGizmo::GetFFDBasePoint(int)
class GAME::Vec3 GAME::FFDGizmo::GetFFDControlPoint(int)
float GAME::Camera::GetFOV(void)
class GAME::FOWManager & GAME::World::GetFOWManager(void)
struct GAME::PhysicsMeshBase::Face const & GAME::PhysicsMesh::GetFace(int)
struct GAME::PhysicsMeshBase::Face const & GAME::PhysicsMesh_Bullet::GetFace(int)
float GAME::TerrainBase::GetFaceIntersection(struct GAME::TerrainBase::IntersectionFace const &,class GAME::Ray const &)
struct GAME::GraphicsMesh::FaceSet const & GAME::GraphicsMesh::GetFaceSet(unsigned int)
void GAME::GraphicsMesh::GetFaces(class mem::vector<struct GAME::GraphicsMesh::LocalFace> &)
float GAME::LineEffect::GetFadeMultiplier(int)
float GAME::SoundPak::GetFalloff(void)
float GAME::Camera::GetFarPlane(void)
class GAME::Vec3 GAME::Terrain::GetFastNormal(unsigned int,unsigned int)
class GAME::GraphicsMesh const * GAME::GridSystem::GetFeatureMesh(unsigned int)
char const * GAME::GridSystem::GetFeatureName(unsigned int)
bool GAME::GridSystem::GetFeatureTexturesOverriden(unsigned int)
bool GAME::Actor::GetFellFaceDown(void)
char const * GAME::IOStreamRead::GetFileBuffer(void)
char const * GAME::IOStreamWrite::GetFileBuffer(void)
struct GAME::Archive::FileEntry const & GAME::Archive::GetFileEntry(int)
unsigned int GAME::IOStreamRead::GetFileLength(void)
unsigned int GAME::IOStreamWrite::GetFileLength(void)
void GAME::FileSystem::GetFileList(class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
char const * GAME::Resource::GetFileName(void)
char const * GAME::SoundDescriptor::GetFileName(void)
char const * GAME::World::GetFileName(void)
int GAME::FileSystem::GetFileSize(char const *)
class GAME::FileSystem * GAME::Engine::GetFileSystem(void)
bool GAME::FileSourceArchive::GetFileTime(char const *,struct GAME::FileTime &)
bool GAME::FileSourceDirectory::GetFileTime(char const *,struct GAME::FileTime &)
void GAME::FileSystem::GetFileTime(char const *,struct GAME::FileTime &)
bool GAME::EditorFilter::GetFilter(enum GAME::EditorFilter::EditorFilterType)
bool GAME::EditorFilter::GetFilterAll(void)
bool GAME::EditorFilter::GetFilterNone(void)
unsigned short const * GAME::LocalizationManager::GetFlagTextureName(int)
float GAME::EffectData::GetFloat(int,int)
float GAME::EmitterData::GetFloat(int)
float GAME::InternalParam::GetFloat(void)
float GAME::LoadTable::GetFloat(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float)
float GAME::LoadTable::GetFloat(char const *,float)
float GAME::LoadTableBinary::GetFloat(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float)
float GAME::LoadTableBinary::GetFloat(char const *,float)
float GAME::Options::GetFloat(enum GAME::Options::FloatName)
class GAME::Color const & GAME::AmbianceManager::GetFogColor(enum GAME::AmbianceManager::Environment)
class GAME::FogOfWar * GAME::Region::GetFogOfWar(bool)
bool GAME::Engine::GetFontDebugging(void)
bool GAME::SoundPak::GetForce2D(void)
void GAME::Engine::GetForcedUpdateEntities(class mem::vector<unsigned int> &)
enum GAME::Image::Format GAME::Image::GetFormat(void)
bool GAME::LocalizationManager::GetFormattedTime(unsigned short *,unsigned int)
unsigned int GAME::Engine::GetFrameCount(void)
void GAME::GraphicsAnim::GetFramePose(class GAME::SkeletalPose &,float,bool)
int GAME::GraphicsAnim::GetFrameRate(void)
float GAME::GraphicsTexture::GetFrameRate(void)
float GAME::Effect::GetFrameScore(void)
float GAME::Emitter::GetFrameScore(void)
unsigned int GAME::Region::GetFramesNotUpdated(void)
struct GAME::SoundInstance * GAME::SoundManager::GetFreeInstance(void)
class GAME::TerrainRenderBatch * GAME::TerrainRenderInterfaceBase::GetFreeRenderBatch(void)
class GAME::WaterRenderBatch * GAME::WaterRenderInterface::GetFreeRenderBatch(void)
struct GAME::FriendInfo const & GAME::SteamFriendList::GetFriendById(unsigned int)
struct GAME::FriendInfo const & GAME::FriendList::GetFriendByIndex(unsigned int)
unsigned int GAME::FriendList::GetFriendCount(void)
bool GAME::Portal::GetFrontToBackCoords(class GAME::Coords &,class GAME::Region * &)
class GAME::Frustum GAME::Camera::GetFrustum(class GAME::Viewport const &)
class GAME::Frustum GAME::Camera::GetFrustum(class GAME::Viewport const &,float)
class GAME::Frustum const & GAME::GraphicsScene::GetFrustum(void)
class GAME::WorldFrustum const & GAME::RegionLoader::GetFrustum(void)
class GAME::WorldFrustum GAME::WorldCamera::GetFrustum(class GAME::Viewport const &)
class GAME::WorldFrustum GAME::WorldCamera::GetFrustum(class GAME::Viewport const &,float)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::FileSourceArchive::GetFullPath(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::FileSourceDirectory::GetFullPath(void)
float GAME::Engine::GetFxQualityModifier(void)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > GAME::Actor::GetGameDescription(bool,bool)
class GAME::GameInfo * GAME::Engine::GetGameInfo(void)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const & GAME::GameInfo::GetGameName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GameInfo::GetGameNameAsStr(void)
unsigned int GAME::GameInfo::GetGamePlusChallengeDifficulty(void)
unsigned int GAME::GameInfo::GetGameStartTime(void)
int GAME::GetGameTime(void)
bool GAME::GameInfo::GetGender(void)
enum GAME::InternalParam::Gender GAME::InternalParam::GetGender(void)
enum GAME::RenderGenerationId GAME::RenderDevice::GetGenerationForName(char const *)
enum GAME::RenderGenerationId GAME::GraphicsEngine::GetGenerationId(void)
char const * GAME::GraphicsEngine::GetGenerationName(void)
float GAME::GraphicsMeshInstance::GetGlobalBlendAlphaMultiplier(void)
unsigned int GAME::ConnectionManager::GetGlobalMaxPlayers(void)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetGlowTexture(unsigned int)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetGlowTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetGlowTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetGlowTextureName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetGlowTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetGlowTextureName(void)
unsigned int GAME::Actor::GetGlowTexturesSize(void)
unsigned int GAME::GraphicsMeshInstance::GetGlowTexturesSize(void)
void GAME::SteamControllerDevice::GetGlyphs(int,unsigned int,bool,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
class GAME::GraphicsEngine * GAME::Engine::GetGraphicsEngine(void)
struct GAME::GrassObject::GrassBlock const * GAME::GrassObject::GetGrassBlockByIndex(int)
class GAME::Vec3 GAME::TerrainPatch::GetGrassOffset(void)
class GAME::GraphicsShader2 const * GAME::TerrainRenderInterfaceBase::GetGrassShader(void)
bool GAME::Entity::GetGravityEnabled(void)
class GAME::GridBase * GAME::Level::GetGrid(void)
class GAME::GridBase const * GAME::Level::GetGrid(void)
class GAME::GridBase const * GAME::Water::GetGrid(void)
class GAME::Color GAME::AmbianceManager::GetGroundAmbientColor(enum GAME::AmbianceManager::Environment)
float GAME::GridRegion::GetGroundHeight(float,float)
float GAME::Level::GetGroundHeight(float,float)
class GAME::Vec3 GAME::Level::GetGroundNormal(float,float)
class GAME::InstanceGroup * GAME::InstanceGroupManager::GetGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::InstanceGroup * GAME::InstanceGroupManager::GetGroup(class GAME::UniqueId const &)
class GAME::InstanceGroup * GAME::InstanceGroupManager::GetGroup(int)
class GAME::UniqueId const & GAME::InstanceGroup::GetGroupID(void)
int GAME::InstanceGroupManager::GetGroupIndex(class GAME::UniqueId const &)
void GAME::InstanceGroupManager::GetGroupTypes(class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
void GAME::InstanceGroupManager::GetGroupsOfType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class mem::vector<int> &)
void GAME::InstanceGroupManager::GetGroupsThatContain(class GAME::UniqueId const &,class mem::vector<int> &)
bool GAME::GameInfo::GetHardcore(void)
bool GAME::ResourceLoader::GetHasMarkerPast(unsigned int)
class GAME::MD5Digest const & GAME::ConversationResource::GetHash(void)
float GAME::Actor::GetHeight(void)
int GAME::GraphicsCanvas::GetHeight(void)
int GAME::GraphicsEngine::GetHeight(void)
int GAME::GraphicsTexture::GetHeight(void)
float GAME::GridBase::GetHeight(void)
float GAME::GridRegion::GetHeight(void)
int GAME::HwndWindow::GetHeight(void)
unsigned int GAME::Image::GetHeight(void)
int GAME::ImageResource::GetHeight(void)
int GAME::ImpassableData::GetHeight(int,int)
unsigned int GAME::SectorLayers::GetHeight(void)
float GAME::Terrain::GetHeight(unsigned int,unsigned int)
float GAME::TerrainPatch::GetHeight(float,float)
int GAME::Viewport::GetHeight(void)
float GAME::WaterCurve::GetHeight(void)
float GAME::WaterLayer::GetHeight(void)
int GAME::WinWindow::GetHeight(void)
class GAME::Vec3 const & GAME::AmbianceManager::GetHeightFog(enum GAME::AmbianceManager::Environment)
int GAME::GridBase::GetHeightInCells(void)
int GAME::GridRegion::GetHeightInCells(void)
float GAME::Terrain::GetHeightInternal(unsigned int,unsigned int)
float GAME::Terrain::GetHeightInterpolated(float,float)
float GAME::World::GetHighestTerrainHeight(class GAME::Region *,float,float)
int GAME::GridRegion::GetHighestVisibleFloor(void)
bool GAME::Actor::GetHighlight(void)
class GAME::OBBox GAME::Actor::GetHitBox(int)
class GAME::OBBox GAME::Entity::GetHitBox(int)
struct GAME::GraphicsMesh::HitBox GAME::GraphicsMesh::GetHitBox(unsigned int,class GAME::SkeletalPose const &)
struct GAME::GraphicsMesh::HitBox const & GAME::GraphicsMesh::GetHitBox(unsigned int)
struct GAME::GraphicsMesh::HitBox const * GAME::GraphicsMesh::GetHitBox(class GAME::Name const &)
int GAME::GraphicsMesh::GetHitBoxIndex(class GAME::Name const &)
class GAME::UniqueId const & GAME::InstanceGroup::GetID(int)
class GAME::RenderTexture * GAME::Region::GetIcon(void)
char const * GAME::WorldFile::GetIconData(void)
unsigned int GAME::WorldFile::GetIconDataSize(void)
unsigned int GAME::GraphicsLight::GetId(void)
class GAME::UniqueId const & GAME::Portal::GetId(void)
class GAME::RegionId & GAME::Region::GetId(void)
class GAME::RegionId const & GAME::Region::GetId(void)
unsigned int GAME::SmartObjectId::GetId(void)
class mem::vector<unsigned int> GAME::SmartObjectIdList::GetIdList(void)
bool GAME::Engine::GetIdle(void)
class GAME::Vec3 GAME::Camera::GetImagePoint(class GAME::Vec2 const &,class GAME::Viewport const &)
class GAME::WorldVec3 GAME::WorldCamera::GetImagePoint(class GAME::Vec2 const &,class GAME::Viewport const &)
class GAME::ResourceManager<class GAME::ImageResource> * GAME::Engine::GetImageResourceManager(void)
bool GAME::ImpassableData::GetImpassable(int,int)
bool * GAME::ImpassableData::GetImpassableBuffer(void)
bool GAME::Resource::GetInLoadingQueue(void)
unsigned int GAME::InternalParam::GetIndex(void)
unsigned int GAME::WaterObject::GetIndex(void)
class GAME::RenderIndexBuffer const * GAME::GraphicsMesh::GetIndexBuffer(void)
class GAME::RenderIndexBuffer const * GAME::Terrain::GetIndexBufferForLayer(int)
enum GAME::Resource::InitResult GAME::Resource::GetInitResult(void)
class GAME::InputDevice * GAME::Engine::GetInputDevice(void)
char const * GAME::WorldFile::GetInstanceData(void)
unsigned int GAME::WorldFile::GetInstanceDataSize(void)
struct GAME::SoundInstance * GAME::SoundManager::GetInstanceFromIndex(int)
bool GAME::GameInfo::GetInstancedLoot(void)
struct GAME::Options::Int2 GAME::Options::GetInt2(enum GAME::Options::Int2Name)
int GAME::LoadTable::GetInt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)
int GAME::LoadTable::GetInt(char const *,int)
int GAME::LoadTableBinary::GetInt(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)
int GAME::LoadTableBinary::GetInt(char const *,int)
int GAME::Options::GetInt(enum GAME::Options::IntName)
int GAME::Tracker::GetInt(char const *,char const *)
int GAME::Tracker::GetInt(char const *,char const *,unsigned int)
int GAME::EffectData::GetInteger(int,int)
int GAME::EmitterData::GetInteger(int)
class GAME::InternalParam * GAME::LocalizationManager::GetInternalParam(unsigned int)
int GAME::GameTimer::GetInternalTime(void)
int GAME::SystemTimer::GetInternalTime(void)
float GAME::AmbianceManager::GetInterpolatedNightLightScale(void)
void GAME::Actor::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,bool)
void GAME::Billboard::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,bool)
void GAME::Decal::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,bool)
void GAME::EffectEntity::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,bool)
void GAME::Entity::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,bool)
void GAME::Entity::GetIntersection(class GAME::Ray const &,float,class GAME::Intersection &,enum GAME::PhysicsSurface)
void GAME::GraphicsMeshInstance::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface)
void GAME::GridBase::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,float)
void GAME::GridRegion::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,float)
void GAME::Level::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,class GAME::Entity * *,float,class GAME::Entity const *,bool)
void GAME::Light::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,bool)
void GAME::PhysicsMesh::GetIntersection(int,class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,class GAME::Vec3 const &,float)
void GAME::PhysicsMesh::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,class GAME::Vec3 const &,float)
void GAME::PhysicsMesh_Bullet::GetIntersection(int,class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,class GAME::Vec3 const &,float)
void GAME::PhysicsMesh_Bullet::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,class GAME::Vec3 const &,float)
void GAME::PointDisturbance::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,bool)
float GAME::Portal::GetIntersection(class GAME::Ray const &,bool)
void GAME::Terrain::GetIntersection(class GAME::Ray const &,int,int,int,int,class GAME::Intersection &,int &,int &)
void GAME::TerrainBase::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,float)
bool GAME::Water::GetIntersection(class GAME::Ray const &,class GAME::Intersection &,enum GAME::PhysicsSurface,float)
void GAME::World::GetIntersection(class GAME::WorldRay const &,class GAME::WorldIntersection &,enum GAME::PhysicsSurface,bool,float,bool)
float GAME::WorldABBox::GetIntersection(class GAME::WorldRay const &)
void GAME::World::GetIntersectionThroughPortals(class GAME::Region *,class GAME::Ray const &,class GAME::WorldIntersection &,enum GAME::PhysicsSurface,bool)
bool GAME::ImpassableData::GetInvisible(int,int)
bool GAME::GameInfo::GetIsBackup(void)
bool GAME::AmbianceManager::GetIsDay(void)
bool GAME::DayNightCycle::GetIsDay(float)
bool GAME::Actor::GetIsDissolved(void)
bool GAME::GraphicsMeshInstance::GetIsDissolved(void)
bool GAME::GraphicsMeshInstance::GetIsDissolving(void)
bool GAME::RegionLoader::GetIsDone(void)
bool GAME::Emitter::GetIsEmitLocally(void)
bool GAME::GraphicsMeshInstance::GetIsFaded(void)
bool GAME::AmbianceManager::GetIsFogEnabled(enum GAME::AmbianceManager::Environment)
bool GAME::GraphicsEngine::GetIsFogEnabled(void)
bool GAME::Resource::GetIsLoaded(bool)
bool GAME::GameInfo::GetIsMultiPlayer(void)
bool GAME::Resource::GetIsNotUnloaded(void)
bool GAME::Portal::GetIsOpen(void)
bool GAME::Entity::GetIsPartOfLevel(void)
bool GAME::GraphicsMeshInstance::GetIsPlayingAnimation(void)
bool GAME::GameInfo::GetIsPlayingAtLeastThisDifficulty(enum GAME::GameInfo::DisplayedDifficulty)
bool GAME::ConversationResource::GetIsReadyToUse(void)
bool GAME::EffectResource::GetIsReadyToUse(void)
bool GAME::GraphicsMesh::GetIsReadyToUse(bool)
bool GAME::GraphicsShader2::GetIsReadyToUse(void)
bool GAME::GraphicsTexture::GetIsReadyToUse(void)
bool GAME::ImageResource::GetIsReadyToUse(void)
bool GAME::GameInfo::GetIsServer(void)
bool GAME::GameInfo::GetIsSinglePlayer(void)
bool GAME::Engine::GetIsSingleProcessorModeEnabled(void)
bool GAME::GraphicsMeshInstance::GetIsUnDissolving(void)
bool GAME::ImpassableData::GetIsValid(void)
bool GAME::GameInfo::GetJoinedGameIsPvP(void)
struct GAME::JointDescription const * GAME::GraphicsMesh::GetJointDescription(unsigned int)
int GAME::GraphicsFont2::GetKerningAmount(struct GAME::GraphicsFont2::Style const *,unsigned short,unsigned short)
class mem::vector<unsigned int> GAME::ConnectionManager::GetKeyHash(void)
int GAME::InstanceGroupManager::GetKeyIndex(char const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetKeymapPath(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::LocalizationManager::GetLanguageName(enum GAME::Language)
char const * GAME::LocalizationManager::GetLanguageString(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
char const * GAME::LocalizationManager::GetLanguageString(int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LocalizationManager::GetLanguageTag(int)
unsigned __int64 GAME::Resource::GetLastAccessCounter(void)
int GAME::Actor::GetLastFrameRendered(void)
unsigned int GAME::Entity::GetLastFrameUpdated(void)
unsigned int GAME::Resource::GetLastFrameUsed(void)
unsigned int GAME::Resource::GetLastTouchedFrame(void)
int GAME::Engine::GetLastUserInputTime(void)
signed char GAME::GridRegion::GetLatticeValue(int,int,int)
class GAME::WaterLayer * GAME::Water::GetLayer(unsigned int)
unsigned char GAME::Terrain::GetLayerOpacity(unsigned int,unsigned int,unsigned int)
unsigned char GAME::Terrain::GetLayerOpacityInterpolated(unsigned int,float,float)
float GAME::TerrainPatch::GetLayerOpacityInterpolated(int,float,float)
class GAME::RenderTexture const * GAME::Terrain::GetLayerOpacityTexture(unsigned int)
class GAME::GraphicsShader2 const * GAME::Terrain::GetLayerShader(void)
class GAME::GraphicsShader2 const * GAME::TerrainRenderInterfaceBase::GetLayerShader(void)
class GAME::TerrainType * GAME::Terrain::GetLayerTerrainType(unsigned int)
class GAME::TerrainType const * GAME::Terrain::GetLayerTerrainType(unsigned int)
void GAME::Terrain::GetLayersInBox(class mem::vector<unsigned int> &,class GAME::ABBox const &)
unsigned int GAME::FileDirectory::GetLength(void)
unsigned int GAME::GraphicsAnim::GetLength(void)
float GAME::LineEffect2::GetLength(void)
unsigned int GAME::MemoryMappedFile::GetLength(void)
class GAME::Level * GAME::Region::GetLevel(bool)
float GAME::Engine::GetLevelLoadInflation(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GameInfo::GetLevelName(void)
void GAME::GameInfo::GetLevelName(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
class GAME::Level * GAME::Region::GetLevelPtr(void)
unsigned int GAME::GameInfo::GetLevelRange(void)
int GAME::World::GetLevelRegion(class GAME::Level *)
float GAME::Engine::GetLevelUpdateInflation(void)
class GAME::Light * GAME::Effect::GetLight(int)
class GAME::Light * GAME::Emitter::GetLight(void)
class GAME::Color GAME::AmbianceManager::GetLightColor(enum GAME::AmbianceManager::Environment)
class GAME::Vec3 const & GAME::AmbianceManager::GetLightDirection(enum GAME::AmbianceManager::Environment)
class GAME::Vec3 GAME::DayNightCycle::GetLightDirection(float,bool)
struct GAME::DayNightCycle::LightSetup const & GAME::DayNightCycle::GetLightSetup(unsigned int)
bool GAME::GraphicsMTRenderer::GetLightStyle(struct GAME::LightEntry const &,bool,class GAME::Name &,class GAME::Sphere &)
void GAME::DayNightCycle::GetLighting(float,class GAME::Color &,class GAME::Color &,class GAME::Color &)
class mem::vector<class GAME::GraphicsLight> & GAME::GraphicsScene::GetLights(void)
class mem::vector<class GAME::GraphicsLight> const & GAME::GraphicsScene::GetLights(void)
unsigned int GAME::FontStyle::GetLineHeight(void)
unsigned int GAME::GraphicsFont2::GetLineHeight(unsigned int,enum GAME::FontStyleFlag)
class GAME::Color const & GAME::GraphicsLight::GetLinearColor(void)
int GAME::ConnectionManager::GetListeningPort(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Region::GetLoadFileName(void)
float GAME::Engine::GetLoadSphereInflation(void)
class GAME::LoadTable const & GAME::ObjectManager::GetLoadTable(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::LoadTable const & GAME::TableDepot::GetLoadTable(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
unsigned int GAME::Engine::GetLoadedExpansionId(void)
void GAME::World::GetLoadedRegionsInFrustum(class mem::vector<class GAME::Region const *> &,class GAME::Region *,class GAME::Frustum const &,bool)
enum GAME::Resource::LoadState GAME::Resource::GetLoadedState(void)
class GAME::NetworkAddress const & GAME::NetworkSocket::GetLocalAddress(void)
int GAME::ConnectionManager::GetLocalHostID(void)
class GAME::IPVNetworkAddress const & GAME::ConnectionManager::GetLocalIP(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GameInfo::GetLocalMapPath(void)
int GAME::NetworkEntityList::GetLocalOperationTimeout(void)
struct __crt_locale_pointers * GAME::LocalizationManager::GetLocale(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::StyleManager::GetLocalizationFontFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Engine::GetLogCategoryName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetLogPath(void)
bool GAME::CurveData::GetLoop(void)
bool GAME::EffectData::GetLoop(int)
bool GAME::EmitterData::GetLoop(void)
void GAME::TrailEffect::GetLowerPoints(int,class GAME::Vec3 * const)
struct GAME::GraphicsMesh::MIFData const * GAME::GraphicsMesh::GetMIFData(bool)
unsigned int GAME::Engine::GetMPVersion(void)
unsigned int GAME::Socket::GetMTU(void)
unsigned int GAME::GetMachineClockTicks(void)
unsigned int GAME::GetMachineClockTicksPerSecond(void)
int GAME::GetMachineTime(void)
void GAME::FileSourceArchive::GetMatchingFiles(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
void GAME::FileSourceDirectory::GetMatchingFiles(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
void GAME::FileSystem::GetMatchingFiles(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &,bool)
struct GAME::GraphicsMesh::Material const & GAME::GraphicsMesh::GetMaterial(unsigned int)
class GAME::WorldVec3 GAME::WorldABBox::GetMax(void)
unsigned int GAME::GameInfo::GetMaxLevel(void)
int GAME::GraphicsEngine::GetMaxNumBones(void)
unsigned int GAME::GameInfo::GetMaxPlayers(void)
float GAME::CurveData::GetMaxY(void)
unsigned int GAME::BaseResourceManager::GetMemoryUsage(void)
class GAME::GraphicsMesh const * GAME::GraphicsMeshInstance::GetMesh(void)
class btTriangleIndexVertexArray * GAME::PhysicsMesh_Bullet::GetMeshData(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetMeshFileName(void)
class GAME::GraphicsMesh const * GAME::GridSystem::GetMeshForCell(char const * const,char const * const,unsigned int,int &)
class GAME::GraphicsMeshInstance * GAME::Actor::GetMeshInstance(void)
class GAME::GraphicsMeshInstance const * GAME::Actor::GetMeshInstance(void)
class GAME::GraphicsMesh::MeshRenderInfo const & GAME::GraphicsMesh::GetMeshRenderInfo(void)
void GAME::GridRegion::GetMeshesInFrustum(class mem::vector<class GAME::GraphicsMeshInstance *> &,class GAME::Frustum const * const,unsigned int)
struct GAME::GraphicsFont2::FNTMetric const * GAME::GraphicsFont2::GetMetric(struct GAME::GraphicsFont2::Style const *,unsigned short)
class GAME::WorldVec3 GAME::WorldABBox::GetMin(void)
bool GAME::Camera::GetMinFrustum(class GAME::Viewport const &,class GAME::Vec3 const &,class mem::vector<class GAME::ABBox> const &,float,class GAME::Frustum &)
unsigned int GAME::GameInfo::GetMinLevel(void)
float GAME::GridSystem::GetMinWallOpacity(void)
class GAME::Color const & GAME::TerrainType::GetMiniMapColor(void)
class GAME::RenderTexture * GAME::Region::GetMinimapImage(bool)
unsigned int GAME::TerrainType::GetMinimumBladeOpacity(void)
void GAME::GameInfo::GetModName(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GameInfo::GetModName(void)
unsigned int GAME::GameInfo::GetMode(void)
enum GAME::TransformGizmo::Mode GAME::TransformGizmo::GetMode(void)
void GAME::HwndWindow::GetMonitorRect(struct tagRECT &,bool)
void GAME::WinWindow::GetMonitorRect(struct tagRECT &,bool)
float GAME::DayNightCycle::GetMoonAzimuth(void)
float GAME::DayNightCycle::GetMoonMinAngle(void)
class GAME::Vec3 const & GAME::Entity::GetMotion(void)
class GAME::Vec3 const & GAME::WeatherManager::GetMovementAdjustment(void)
class GAME::IPVNetworkAddress const & GAME::NetworkServerBrowser::GetMyPublicIP(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::BaseResourceManager::GetName(void)
void GAME::EffectData::GetName(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
char const * GAME::FileSourceArchive::GetName(void)
char const * GAME::FileSourceDirectory::GetName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::InstanceGroup::GetName(void)
class GAME::Name const & GAME::PhysicsRigidBody2::GetName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Region::GetName(void)
char const * GAME::RenderDevice::GetNameForGeneration(enum GAME::RenderGenerationId)
void const * GAME::Level::GetNavigationData(void)
unsigned int GAME::Level::GetNavigationDataSize(void)
float GAME::Camera::GetNearPlane(void)
float GAME::World::GetNearestFloorHeight(class GAME::WorldVec3 const &)
bool GAME::NoiseTexture::GetNeedsUpdate(void)
class GAME::NetPacket * GAME::ActorConfigCommand::GetNetPacket(void)
class mem::vector<class GAME::NetworkAdapter> const & GAME::ConnectionManager::GetNetworkAdapters(int &)
class GAME::ConnectionManager * GAME::Engine::GetNetworkConnectionManager(void)
class GAME::NetworkControllerBase * GAME::Engine::GetNetworkController(void)
class GAME::NetworkEntityList * GAME::ConnectionManager::GetNetworkEntityList(void)
class GAME::NetworkEntityList * GAME::Engine::GetNetworkEntityList(void)
struct GAME::NetworkFrameStats const & GAME::ConnectionManager::GetNetworkFrameStats(void)
enum GAME::NetworkInfrastructureType GAME::NetworkAddress::GetNetworkIT(void)
enum GAME::NetworkMode GAME::ConnectionManager::GetNetworkMode(void)
class GAME::NetworkShim * GAME::Engine::GetNetworkShim(void)
struct GAME::NetworkFrameStats const & GAME::ConnectionManager::GetNetworkTotalFrameStats(void)
unsigned short GAME::ConnectionManager::GetNextEphemeralPort(int)
float GAME::AmbianceManager::GetNightLightScale(enum GAME::AmbianceManager::Environment)
float GAME::DayNightCycle::GetNightTime(void)
void GAME::Actor::GetNormal(class GAME::Ray const &,class GAME::Vec3 &)
void GAME::GraphicsMesh::GetNormal(class GAME::Ray const &,class GAME::Vec3 const &,class GAME::Vec3 &)
void GAME::GraphicsMeshInstance::GetNormal(class GAME::Ray const &,class GAME::Vec3 &)
class GAME::Vec3 GAME::Terrain::GetNormalInterpolated(float,float)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetNormalSettingsPath(void)
float GAME::WeatherManager::GetNormalizedWindStrength(void)
int GAME::GraphicsMeshInstance::GetNumAnimChannels(void)
int GAME::Entity::GetNumAttachedEntities(void)
unsigned int GAME::TerrainType::GetNumBladeVariations(void)
unsigned int GAME::NavManager::GetNumBlockedPoints(void)
unsigned int GAME::WaterLayer::GetNumBlocks(void)
unsigned int GAME::GraphicsAnim::GetNumBones(void)
unsigned int GAME::GraphicsMesh::GetNumBones(void)
unsigned int GAME::TerrainType::GetNumBumpMaps(void)
unsigned int GAME::GraphicsAnim::GetNumCallbackPoints(void)
unsigned int GAME::InstanceGroup::GetNumChildren(void)
unsigned int GAME::NetworkEntityList::GetNumClients(void)
unsigned int GAME::GraphicsMesh::GetNumContours(void)
unsigned int GAME::WaterCurve::GetNumControlPoints(void)
unsigned int GAME::GraphicsAnim::GetNumCreateEntity(void)
int GAME::GraphicsMesh::GetNumCreationData(void)
unsigned int GAME::ObjectManager::GetNumDeletedObjects(void)
unsigned int GAME::LoadTable::GetNumElementsForField(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
unsigned int GAME::LoadTable::GetNumElementsForField(char const *)
unsigned int GAME::LoadTableBinary::GetNumElementsForField(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
unsigned int GAME::LoadTableBinary::GetNumElementsForField(char const *)
int GAME::Effect::GetNumEmitters(void)
int GAME::EffectData::GetNumEmitters(void)
unsigned int GAME::GraphicsMesh::GetNumFaceSets(void)
unsigned int GAME::GraphicsMesh::GetNumFaces(void)
int GAME::PhysicsMesh::GetNumFaces(void)
int GAME::PhysicsMesh_Bullet::GetNumFaces(void)
unsigned int GAME::GridSystem::GetNumFeatures(void)
unsigned int GAME::Archive::GetNumFiles(void)
int GAME::GraphicsTexture::GetNumFrames(void)
int GAME::InstanceGroupManager::GetNumGroups(void)
unsigned int GAME::Actor::GetNumHitBoxes(void)
unsigned int GAME::Entity::GetNumHitBoxes(void)
unsigned int GAME::GraphicsMesh::GetNumHitBoxes(void)
int GAME::InstanceGroup::GetNumID(void)
unsigned int GAME::GraphicsMesh::GetNumJointDescriptions(void)
int GAME::LocalizationManager::GetNumLanguages(void)
unsigned int GAME::Water::GetNumLayers(void)
unsigned int GAME::World::GetNumLevelsLoaded(void)
unsigned int GAME::World::GetNumLevelsLoading(void)
unsigned int GAME::DayNightCycle::GetNumLightSetups(void)
int GAME::SoundPak::GetNumLoaded(void)
int GAME::CPUCoreDetector::GetNumLogicalCores(void)
unsigned int GAME::GraphicsMesh::GetNumMaterials(void)
unsigned int GAME::ObjectManager::GetNumObjects(void)
unsigned int GAME::GameInfo::GetNumOfPlayers(void)
int GAME::Effect::GetNumParticles(void)
int GAME::Emitter::GetNumParticles(void)
int GAME::SoundManager::GetNumPlaying(void)
unsigned int GAME::GraphicsMesh::GetNumPortals(void)
int GAME::Region::GetNumPortals(void)
unsigned int GAME::World::GetNumQuestFiles(void)
unsigned int GAME::WorldFile::GetNumQuestFiles(void)
int GAME::DirtyRectSet::GetNumRects(void)
int GAME::World::GetNumRegions(void)
unsigned int GAME::WorldFile::GetNumRegions(void)
int GAME::Billboard::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::Decal::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::DecalSet::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::Emitter::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::GraphicsMeshInstance::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::Lightning2::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::LineEffect2::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::LineEffect::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::TerrainPatch::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
int GAME::TrailEffect::GetNumRenderPasses(class GAME::Name const &,enum GAME::RenderGenerationId)
unsigned int GAME::BaseResourceManager::GetNumResources(void)
unsigned int GAME::GraphicsMesh::GetNumRigidBodyDescriptions(void)
unsigned int GAME::GraphicsMesh::GetNumSections(void)
unsigned int GAME::GraphicsMeshInstance::GetNumSections(void)
int GAME::SectorDataManager::GetNumSectorData(unsigned int)
int GAME::Actor::GetNumSkeletonEmitterBones(void)
int GAME::GraphicsMesh::GetNumSkeletonEmitterBones(void)
unsigned int GAME::Terrain::GetNumTextureLayers(void)
unsigned int GAME::TerrainType::GetNumTextures(void)
unsigned int GAME::WaterType::GetNumTextures(void)
unsigned int GAME::Entity::GetNumUpdates(void)
unsigned int GAME::GridSystem::GetNumVariationsForCell(char const * const,char const * const)
unsigned int GAME::GraphicsMesh::GetNumVertices(void)
int GAME::PhysicsMesh::GetNumVertices(void)
int GAME::PhysicsMesh_Bullet::GetNumVertices(void)
unsigned int GAME::TerrainBase::GetNumXSamples(void)
unsigned int GAME::TerrainBase::GetNumYSamples(void)
unsigned int GAME::NetworkLinkStats::GetNumberOfErrors(void)
class GAME::OBBox GAME::GraphicsMesh::GetOBBox(void)
class GAME::PhysicsObject2 * GAME::PhysicsRigidBody2::GetObject(void)
unsigned int GAME::Object::GetObjectId(void)
void GAME::ObjectManager::GetObjectList(class mem::vector<class GAME::Object const *> &)
char const * GAME::Object::GetObjectName(void)
unsigned int GAME::Object::GetObjectNameHash(void)
class GAME::ABBox const & GAME::GraphicsMeshInstance::GetObjectSpaceBoundingBox(void)
class GAME::Coords const & GAME::GraphicsMeshInstance::GetObjectToRegionCoords(void)
class GAME::WorldCoords const & GAME::GraphicsLight::GetObjectToWorldCoords(void)
void GAME::TerrainBase::GetObjectsInBox(class mem::vector<class GAME::TerrainObject *> &,class GAME::ABBox const &)
void GAME::Terrain::GetObjectsInDirtySet(class mem::vector<class GAME::TerrainObject *> &,class GAME::DirtyRectSet const &,float)
void GAME::TerrainBase::GetObjectsInFrustum(class mem::vector<class GAME::TerrainObject *> &,class GAME::Frustum const * const,unsigned int,class mem::vector<bool> *)
int GAME::ConnectionManager::GetOfflineHostID(void)
struct GAME::Terrain::Offset * GAME::Terrain::GetOffset(void)
class GAME::Vec3 GAME::WorldCamera::GetOffsetFromTarget(void)
class GAME::IntVec3 const & GAME::Region::GetOffsetFromWorld(void)
class GAME::IntVec3 GAME::WaterLayer::GetOffsetFromWorld(void)
class GAME::IntVec3 GAME::WaterPath::GetOffsetFromWorld(void)
float GAME::Decal::GetOpacity(void)
float GAME::GraphicsMeshInstance::GetOpacity(int,class GAME::Name const &)
float GAME::GraphicsRenderable::GetOpacity(int,class GAME::Name const &)
void GAME::TerrainPatch::GetOpacity(int,int,int,int,int,unsigned char *)
bool GAME::GraphicsEngine::GetOptimizationTest(void)
class GAME::Options * GAME::Engine::GetOptions(void)
char * GAME::NetPacket::GetOutBuffer(void)
unsigned int GAME::NetPacket::GetOutBufferSize(void)
unsigned int GAME::FragmentPacket::GetOverhead(void)
void GAME::ImpassableData::GetOverlappingBoxes(class mem::vector<class GAME::OBBox> &,class GAME::ABBox const &)
void GAME::ImpassableData::GetOverlappingPathFaces(class mem::vector<class GAME::PathFace> &,class GAME::ABBox const &)
class GAME::GraphicsShader2 const * GAME::GraphicsEngine::GetOverlayShader(void)
unsigned int GAME::Entity::GetOwner(void)
class GAME::IPhysics2 * GAME::PhysicsObject2::GetOwner(void)
enum GAME::PACKET_CLASS GAME::NetPacket::GetPacketClass(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::CDKeyPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ChatPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ClientDisconnectPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ClientReadyPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ClientServerQueryPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ConnectionVerifyPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::DebugMessagePacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::DisconnectClientPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::FragmentPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::HeartbeatPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::HeartbeatResponsePacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LinkControlAckPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LinkMTUTestPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::NetPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::PingPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::RemoveClientPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::RemoveEntityPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::RequestResendPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ServerAnnouncePacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ServerConnectAckPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ServerConnectRejectPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::ServerConnectRequestPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::SpawnActorPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::SteamAuthRequestPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::SteamAuthResponsePacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::VoiceChatPacket::GetPacketDescription(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GetPacketTypeAsText(enum GAME::PACKET_TYPE)
bool GAME::GetPacketTypeIsExcludedFromLog(enum GAME::PACKET_TYPE)
class GAME::Entity * GAME::Entity::GetParent(void)
class GAME::ObjectInteractionPacket * GAME::SmartObjectIdList::GetParent(void)
class GAME::Actor const * GAME::Actor::GetParentActor(void)
unsigned int const GAME::ActorConfigCommand::GetParentId(void)
void GAME::GraphicsMeshInstance::GetPassFaces(int,int &,int &,class GAME::GraphicsMesh::MeshRenderInfo const &)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const & GAME::GameInfo::GetPassword(void)
bool GAME::TerrainPatch::GetPatchIntersection(int,int,class GAME::Vec3 &,class GAME::Vec3 &)
char const * GAME::ImpassableData::GetPathBuffer(int)
int GAME::ImpassableData::GetPathBufferLength(int)
class GAME::PathMeshErrorBuffer * GAME::Engine::GetPathMeshErrorBuffer(void)
int GAME::Engine::GetPathingCounter(void)
class GAME::PerfTracker & GAME::Engine::GetPerfTracker(void)
__int64 GAME::GetPerformanceCounter(void)
class GAME::PhysicsEngine2 * GAME::Engine::GetPhysicsEngine(void)
void GAME::ImpassableData::GetPhysicsFaceData(int,int,int,class mem::vector<struct GAME::ImpassableData::PassableFace> &)
float GAME::Actor::GetPhysicsFriction(void)
float GAME::Entity::GetPhysicsFriction(void)
float GAME::Actor::GetPhysicsMass(void)
float GAME::Entity::GetPhysicsMass(void)
class GAME::PhysicsMeshBase const * GAME::Actor::GetPhysicsMesh(void)
class GAME::PhysicsMeshBase const * GAME::Entity::GetPhysicsMesh(void)
class GAME::PhysicsMeshBase const * GAME::GraphicsMesh::GetPhysicsMesh(void)
float GAME::Actor::GetPhysicsRestitution(void)
float GAME::Entity::GetPhysicsRestitution(void)
enum GAME::PhysicsSimulation GAME::Entity::GetPhysicsSimulation(void)
enum GAME::PhysicsSurface & GAME::WaterType::GetPhysicsSurface(void)
enum GAME::PhysicsSurface const & GAME::WaterType::GetPhysicsSurface(void)
unsigned int GAME::ClientConnectionManager::GetPing(void)
unsigned int GAME::ConnectionManager::GetPing(void)
int GAME::NetworkServerBrowser::GetPing(class GAME::IPVNetworkAddress const &)
unsigned int GAME::Image::GetPitch(void)
enum GAME::PixelShaderVersion GAME::GraphicsEngine::GetPixelShaderVersion(void)
class GAME::Plane GAME::Portal::GetPlane(void)
int GAME::SoundManager::GetPlayCounter(void)
int GAME::SoundManager::GetPlayLength(class GAME::SoundDescriptor const &)
class GAME::WorldVec3 GAME::SoundPak::GetPlayLocation(class GAME::WorldVec3 const &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GameInfo::GetPlayerCinematicStringTag(void)
int GAME::GameInfo::GetPlayerFlagIndex(void)
unsigned int GAME::GameInfo::GetPlayerLevel(void)
void GAME::NetworkServerBrowser::GetPlayerLevel(struct GAME::ServerInfo *,int &,int &)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const & GAME::GameInfo::GetPlayerName(void)
void GAME::GameInfo::GetPlayerName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
class GAME::WorldCoords GAME::World::GetPlayerSpawnPoint(unsigned int)
class mem::vector<class GAME::GameInfoPlayer> & GAME::GameInfo::GetPlayers(void)
class mem::vector<class GAME::Vec2> * GAME::CurveData::GetPointList(void)
unsigned short GAME::IPVNetworkAddress::GetPort(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::LocalizationManager::GetPortableLanguageName(enum GAME::Language)
struct GAME::GraphicsMesh::Portal const & GAME::GraphicsMesh::GetPortal(unsigned int)
class GAME::Portal * GAME::Region::GetPortal(class GAME::UniqueId const &)
class GAME::Portal * GAME::Region::GetPortal(int)
void GAME::Actor::GetPose(class GAME::SkeletalPose &)
void GAME::GraphicsAnim::GetPose(class GAME::SkeletalPose &,float,bool)
void GAME::GraphicsAnim::GetPose(class GAME::SkeletalPose &,float,bool,class GAME::Name const &)
bool GAME::Level::GetPostLoadCalled(void)
void GAME::AnimChannel::GetPreviousAnimationNames(class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
class GAME::RenderSurface * GAME::GraphicsCanvas::GetPrimarySurface(void)
float GAME::Effect::GetProgress(class GAME::EffectData const *)
float GAME::Emitter::GetProgress(class GAME::EmitterData const *)
class GAME::Property * GAME::Serializer::GetProperty(bool,bool &)
class GAME::TrackerProperty * GAME::Tracker::GetProperty(char const *,char const *)
class GAME::TrackerProperty const * GAME::Tracker::GetProperty(char const *,char const *)
class GAME::IPVNetworkAddress const & GAME::ConnectionManager::GetPublicIP(void)
class GAME::IPVNetworkAddress const & GAME::RouterServices::GetPublicIP(void)
class GAME::Vec3 GAME::PhysicsUtil::GetPushVec(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::WorldCoords const &)
bool GAME::GameInfo::GetPvP(void)
class GAME::RenderIndexBuffer * GAME::GraphicsCanvas::GetQuadIndexBuffer(void)
enum GAME::Options::Quality GAME::Options::GetQuality(enum GAME::Options::QualityName)
int GAME::Terrain::GetQuality(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::World::GetQuestFile(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WorldFile::GetQuestFile(unsigned int)
class GAME::RTTI_ClassInfo const & GAME::Actor::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::ChaosBeam::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::DayNightLight::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Decal::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::EffectEntity::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Entity::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::FireLight::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::FlickerLight::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::FlyingBolt::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::GridBase::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::GridRegion::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::GridSystem::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Light::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Lightning2::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::LineEffect2::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::LineEffect::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::NoiseTexture::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Object::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::PointDisturbance::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::PulseLight::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::SoundEntity::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::SoundPak::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::TerrainType::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::TrailEffect::GetRTTIClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::WeaponTrail::GetRTTIClassInfo(void)
float GAME::Actor::GetRadius(void)
float GAME::Entity::GetRadius(void)
float GAME::GraphicsLight::GetRadius(void)
float GAME::Light::GetRadius(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GraphicsAnim::GetRagDollDirection(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GraphicsAnim::GetRagDollEffectType(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GraphicsAnim::GetRagDollElevation(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GraphicsAnim::GetRagDollPush(void)
class GAME::RandomUniform & GAME::WeatherManager::GetRandomGen(void)
int GAME::TerrainType::GetRandomTexture(int)
float GAME::CurveData::GetRange(void)
unsigned long GAME::NetworkRateCounter::GetRate(void)
class GAME::Ray GAME::Camera::GetRayThroughImagePoint(class GAME::Vec2 const &,class GAME::Viewport const &)
class GAME::WorldRay GAME::WorldCamera::GetRayThroughImagePoint(class GAME::Vec2 const &,class GAME::Viewport const &)
unsigned char * GAME::NetPacket::GetReceiveBuffer(void)
unsigned int GAME::NetPacket::GetReceiveBufferSize(void)
unsigned int GAME::NetworkLinkStats::GetReceiveByteCount(void)
unsigned int GAME::NetworkLinkStats::GetReceivePacketCount(void)
void GAME::ConnectionManager::GetRecommendedNetworkAdapterAddress(class GAME::IPVNetworkAddress &)
class GAME::DirtyRect const & GAME::DirtyRectSet::GetRect(int)
class GAME::Rect GAME::GraphicsTexture::GetRect(void)
class GAME::Rect GAME::Viewport::GetRect(void)
class GAME::DirtyRect GAME::Terrain::GetRectForBox(class GAME::ABBox const &)
int GAME::PhysicsMeshBase::GetRefCount(void)
class GAME::GraphicsReflectionPlane & GAME::WaterLayer::GetReflectionPlane(void)
class GAME::GraphicsReflectionPlane & GAME::WaterPath::GetReflectionPlane(void)
class GAME::Region * GAME::Entity::GetRegion(void)
class GAME::Region * GAME::GridBase::GetRegion(void)
class GAME::Region * GAME::Level::GetRegion(void)
class GAME::Region * GAME::Portal::GetRegion(void)
class GAME::Region * GAME::TerrainBase::GetRegion(void)
class GAME::Region * GAME::Water::GetRegion(void)
class GAME::Region * GAME::WaterObject::GetRegion(void)
class GAME::Region * GAME::WeatherManager::GetRegion(void)
class GAME::Region * GAME::World::GetRegion(int)
class GAME::Region * GAME::WorldCamera::GetRegion(void)
struct GAME::WorldFile::Region const & GAME::WorldFile::GetRegion(unsigned int)
class GAME::Region * GAME::WorldFrustum::GetRegion(void)
class GAME::Region * GAME::WorldVec3::GetRegion(void)
class GAME::ABBox const & GAME::Entity::GetRegionBoundingBox(bool)
class GAME::OBBox const & GAME::Portal::GetRegionBoundingBox(void)
class GAME::ABBox GAME::WorldABBox::GetRegionBox(void)
class GAME::Region * GAME::World::GetRegionById(class GAME::RegionId const &)
class GAME::Camera const & GAME::WorldCamera::GetRegionCamera(void)
class GAME::Region * GAME::World::GetRegionContainingPoint(class GAME::IntVec3 const &)
class GAME::Region * GAME::World::GetRegionContainingPoint(class GAME::Region *,class GAME::Vec3 const &)
class GAME::Region * GAME::World::GetRegionContainingXZ(class GAME::Region *,float,float)
class GAME::Coords GAME::WorldCoords::GetRegionCoords(void)
class GAME::Frustum GAME::WorldCamera::GetRegionFrustum(class GAME::Viewport const &)
class GAME::Frustum GAME::WorldCamera::GetRegionFrustum(class GAME::Viewport const &,float)
class GAME::Frustum & GAME::WorldFrustum::GetRegionFrustum(void)
class GAME::Frustum const & GAME::WorldFrustum::GetRegionFrustum(void)
int GAME::World::GetRegionIndex(class GAME::RegionId const &)
int GAME::World::GetRegionIndex(class GAME::Region *)
class GAME::Level * GAME::World::GetRegionLevel(int)
char const * GAME::World::GetRegionName(int)
class GAME::Region * GAME::Engine::GetRegionOfNote(void)
class GAME::Vec3 const & GAME::WorldVec3::GetRegionPosition(void)
class GAME::ABBox const & GAME::GraphicsMeshInstance::GetRegionSpaceABBox(void)
class GAME::OBBox const & GAME::GraphicsMeshInstance::GetRegionSpaceOBBox(void)
class GAME::Coords const & GAME::GraphicsScene::GetRegionToSceneCoords(class GAME::Region *)
bool GAME::GraphicsScene::GetRegionToSceneCoords(class GAME::Region *,class GAME::Coords &)
void GAME::World::GetRegionsInBox(class mem::vector<class GAME::Region *> &,class GAME::Region *,class GAME::ABBox const &)
void GAME::Region::GetRegionsInFrustum(class mem::vector<class GAME::Region *> &,class GAME::Frustum const &)
void GAME::World::GetRegionsInFrustum(class mem::vector<class GAME::Region *> &,class GAME::Region *,class GAME::Frustum const &,bool)
void GAME::World::GetRegionsInSphere(class mem::vector<class GAME::Region *> &,class GAME::Sphere const &)
void GAME::WorldFrustum::GetRelativeFrustum(class GAME::Region *,class GAME::Frustum &)
class GAME::Vec3 GAME::Region::GetRelativePosition(class GAME::WorldVec3 const &)
class GAME::Coords GAME::Region::GetRelativeTransformation(class GAME::Region const *)
int GAME::AnimChannel::GetRemainingAnimationTime(void)
class GAME::NetworkAddress const & GAME::NetworkSocket::GetRemoteAddress(void)
class GAME::Color GAME::SectorDataManager::GetRenderColorAlpha(unsigned int,class GAME::UniqueId const &)
class GAME::Color GAME::SectorDataManager::GetRenderColorOmega(unsigned int,class GAME::UniqueId const &)
float GAME::Engine::GetRenderDataLoadInflation(void)
class GAME::RenderDevice * GAME::GraphicsCanvas::GetRenderDevice(void)
class GAME::RenderDevice * GAME::GraphicsEngine::GetRenderDevice(void)
class GAME::ABBox const & GAME::Billboard::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::Decal::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::DecalSet::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::Emitter::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::GraphicsMeshInstance::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::Lightning2::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::LineEffect2::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::LineEffect::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::TerrainPatch::GetRenderPassBoundingBox(void)
class GAME::ABBox const & GAME::TrailEffect::GetRenderPassBoundingBox(void)
int GAME::Decal::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
int GAME::DecalSet::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
int GAME::Emitter::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
int GAME::Lightning2::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
int GAME::LineEffect2::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
int GAME::LineEffect::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
int GAME::TerrainPatch::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
int GAME::TrailEffect::GetRenderPassSortOrder(int,class GAME::Name const &,unsigned int,enum GAME::RenderGenerationId)
class GAME::RenderSurface * GAME::NoiseTexture::GetRenderSurface(void)
class mem::vector<struct GAME::RenderablePass> & GAME::GraphicsScene::GetRenderablePasses(void)
class mem::vector<struct GAME::RenderableEntry> & GAME::GraphicsScene::GetRenderables(void)
class mem::vector<struct GAME::RenderableEntry> const & GAME::GraphicsScene::GetRenderables(void)
class GAME::GraphicsMTRenderer const & GAME::GraphicsScene::GetRenderer(void)
bool GAME::SmartObjectId::GetReplicationResult(void)
class GAME::ResourceLoader * GAME::Engine::GetResourceLoader(void)
class GAME::ResourceLoader * GAME::Resource::GetResourceLoader(void)
class GAME::BaseResourceManager * GAME::Resource::GetResourceManager(void)
struct GAME::RigidBodyDescription const * GAME::GraphicsMesh::GetRigidBodyDescription(unsigned int)
class GAME::Name GAME::GraphicsMesh::GetRootMotionBone(void)
void GAME::RigidBodyDescription::GetRotationAngles(class GAME::Vec3 &,class GAME::Coords const &,class GAME::Coords const &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::RouterServices::GetRouterConnectionType(void)
struct GAME::UPnP::RouterStatus GAME::RouterServices::GetRouterStatus(void)
float GAME::Engine::GetSSAOBlur(void)
float GAME::Engine::GetSSAOScale(void)
float GAME::Engine::GetSSAOStrength(void)
class GAME::SaveManager & GAME::Engine::GetSaveManager(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetSavePath(void)
float GAME::EffectEntity::GetScale(void)
class GAME::Vec3 const & GAME::GraphicsMeshInstance::GetScale(void)
class mem::vector<class GAME::GraphicsRenderable const *> & GAME::LightRig::GetSceneRenderablesList(void)
class GAME::GraphicsMTRenderer & GAME::GraphicsCanvas::GetSceneRenderer(bool)
enum GAME::GraphicsScene::SceneType GAME::GraphicsScene::GetSceneType(void)
class GAME::Name const & GAME::GraphicsMesh::GetSection(unsigned int)
class GAME::SectorData * GAME::SectorDataManager::GetSectorData(unsigned int,unsigned int)
class GAME::SectorData * GAME::SectorDataManager::GetSectorData(unsigned int,class GAME::UniqueId const &)
class GAME::SectorLayers * GAME::Level::GetSectorLayers(void)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const & GAME::LocalizationManager::GetSentenceSeperators(void)
struct GAME::ServerInfo * GAME::NetworkServerBrowser::GetServer(class GAME::IPVNetworkAddress const &)
struct GAME::ServerInfo * GAME::NetworkServerBrowser::GetServer(unsigned int)
class GAME::NetworkServerBrowser & GAME::ClientConnectionManager::GetServerBrowser(void)
class mem::vector<struct GAME::ServerInfo *> const & GAME::NetworkServerBrowser::GetServerList(void)
class GAME::GraphicsShader2 const * GAME::Billboard::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::Decal::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::DecalSet::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::Emitter::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::GraphicsMeshInstance::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::Lightning2::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::LineEffect2::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::LineEffect::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::TerrainPatch::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::TrailEffect::GetShader2(int,class GAME::Name const &)
class GAME::GraphicsShader2 const * GAME::GraphicsFont2::GetShader(void)
class GAME::GraphicsShader2 const * GAME::WaterType::GetShader(void)
class GAME::GraphicsShader2 const * GAME::WeatherManager::GetShader(enum GAME::WeatherManager::Shader,enum GAME::WeatherTemplate::Blending,bool,bool &)
class GAME::GraphicsShader2 const * GAME::Emitter::GetShaderForStyle(class GAME::Name const &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::EmitterData::GetShaderName(void)
class GAME::Name const & GAME::Billboard::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::Decal::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::DecalSet::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::Emitter::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::GraphicsMeshInstance::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::Lightning2::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::LineEffect2::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::LineEffect::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::TerrainPatch::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
class GAME::Name const & GAME::TrailEffect::GetShaderStyle(int,class GAME::Name const &,enum GAME::RenderGenerationId,class GAME::GraphicsLight const *)
float GAME::GraphicsMeshInstance::GetShadowBias(void)
bool GAME::GraphicsEngine::GetShadowDebugging(void)
float GAME::AmbianceManager::GetShadowIntensity(void)
float GAME::GraphicsLight::GetShadowIntensity(void)
float GAME::World::GetShadowSoftness(void)
bool GAME::Entity::GetShouldRenderAcrossPortals(void)
bool GAME::Light::GetShouldRenderAcrossPortals(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Region::GetShrineRecord(void)
bool GAME::Event::GetSignaled(void)
unsigned int GAME::NoiseTexture::GetSize(void)
class GAME::SkeletalPose & GAME::GraphicsMeshInstance::GetSkeletalPose(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetSkeletonEmitterBone(int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMesh::GetSkeletonEmitterBone(int)
class GAME::Color GAME::AmbianceManager::GetSkyAmbientColor(enum GAME::AmbianceManager::Environment)
class GAME::Skybox const * GAME::Region::GetSkybox(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Region::GetSkyboxRecord(void)
unsigned __int64 GAME::NetworkSocket::GetSocketHandle(void)
enum GAME::Socket::Type GAME::Socket::GetSocketType(void)
int GAME::GraphicsShader2::GetSortOrder(unsigned int)
class GAME::SoundPak * GAME::WeatherManager::GetSound(int)
void GAME::SoundManager::GetSoundDeviceNames(class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
void const * GAME::SoundResource::GetSoundImage(bool)
class GAME::BaseResourceManager const * GAME::SoundManager::GetSoundResourceManager(void)
class GAME::FileSource * GAME::FileDirectory::GetSource(void)
int GAME::NetworkQueue::GetSpaceFree(void)
float GAME::WeatherManager::GetSpawnDeltaMultiplier(void)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetSpecTexture(unsigned int)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetSpecTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetSpecTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Actor::GetSpecTextureName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetSpecTextureName(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::GraphicsMeshInstance::GetSpecTextureName(void)
unsigned int GAME::Actor::GetSpecTexturesSize(void)
unsigned int GAME::GraphicsMeshInstance::GetSpecTexturesSize(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::LocalizationManager::GetSpecialFontFile(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::LocalizationManager::GetSpecialFontFolder(void)
class GAME::Rect GAME::GraphicsMTRenderer::GetSphereScissorRect(class GAME::Sphere const &,class GAME::Camera const &,class GAME::Viewport const &)
class GAME::GraphicsTexture const * GAME::WaterType::GetSplashTexture(int)
class GAME::WorldVec3 const & GAME::LineEffect2::GetStart(void)
unsigned int GAME::InternalParam::GetStartPos(void)
enum GAME::GraphicsScene::State GAME::GraphicsScene::GetState(void)
class LUAGLUE::LuaState & GAME::LuaManager::GetState(void)
class LUAGLUE::LuaState const & GAME::LuaManager::GetState(void)
enum GAME::SoundManager::SoundManagerState GAME::SoundManager::GetState(void)
class GAME::ABBox const & GAME::Level::GetStaticBoundingBox(void)
class GAME::ABBox const & GAME::Region::GetStaticBoundingBox(void)
class GAME::RTTI_ClassInfo const & GAME::Actor::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::ChaosBeam::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::DayNightLight::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Decal::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::EffectEntity::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Entity::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::FireLight::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::FlickerLight::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::FlyingBolt::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::GridBase::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::GridRegion::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::GridSystem::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Light::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Lightning2::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::LineEffect2::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::LineEffect::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::NoiseTexture::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::Object::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::PointDisturbance::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::PulseLight::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::SoundEntity::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::SoundPak::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::TerrainType::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::TrailEffect::GetStaticClassInfo(void)
class GAME::RTTI_ClassInfo const & GAME::WeaponTrail::GetStaticClassInfo(void)
void GAME::GraphicsEngine::GetStats(struct GAME::GraphicsStats &)
class GAME::SteamAuthProvider * GAME::ConnectionManager::GetSteamAuthProvider(void)
class GAME::SteamAuthRequester * GAME::ConnectionManager::GetSteamAuthRequester(void)
class CSteamID GAME::SteamFriendList::GetSteamId(struct GAME::FriendInfo const &)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::Steamworks::GetSteamIdAsString(void)
unsigned __int64 GAME::Steamworks::GetSteamIdAsUInt64(void)
unsigned int GAME::PhysicsSystem2::GetStepsCompleted(void)
float GAME::SoundStream::GetStreamTime(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::EffectData::GetString(int,int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::EmitterData::GetString(int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const GAME::Options::GetString(enum GAME::Options::StringName)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Tracker::GetString(char const *,char const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Tracker::GetString(char const *,char const *,unsigned int)
struct GAME::GraphicsFont2::Style const * GAME::GraphicsFont2::GetStyle(unsigned int,enum GAME::FontStyleFlag)
enum GAME::EWindow::Style GAME::HwndWindow::GetStyle(void)
struct GAME::FontStyle * GAME::StyleManager::GetStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
enum GAME::EWindow::Style GAME::WinWindow::GetStyle(void)
class GAME::Name const & GAME::GraphicsShader2::GetStyleName(unsigned int)
void GAME::Camera::GetSubCameraToScreenMatrix(class GAME::Mat4 &,class GAME::Vec2 const &,class GAME::Vec2 const &,class GAME::Viewport const &)
class GAME::Frustum GAME::Camera::GetSubFrustum(class GAME::Vec2 const &,class GAME::Vec2 const &,class GAME::Viewport const &)
class GAME::Frustum GAME::Camera::GetSubFrustum(class GAME::Vec2 const &,class GAME::Vec2 const &,float,class GAME::Viewport const &)
class GAME::WorldFrustum GAME::WorldCamera::GetSubFrustum(class GAME::Vec2 const &,class GAME::Vec2 const &,class GAME::Viewport const &)
class GAME::WorldFrustum GAME::WorldCamera::GetSubFrustum(class GAME::Vec2 const &,class GAME::Vec2 const &,float,class GAME::Viewport const &)
float GAME::DayNightCycle::GetSunAzimuth(void)
float GAME::DayNightCycle::GetSunMinAngle(void)
float GAME::DayNightCycle::GetSunRise(void)
float GAME::DayNightCycle::GetSunSet(void)
void GAME::GraphicsEngine::GetSupportedDisplayModes(class mem::vector<struct GAME::RenderDisplayMode> &)
int GAME::LocalizationManager::GetSupportedLanguageNumber(char const *)
enum GAME::PhysicsSurface GAME::TerrainType::GetSurface(void)
enum GAME::PhysicsSurface GAME::World::GetSurfaceTypeBelow(class GAME::Entity *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetSurvivalMapName(void)
class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > const & GAME::Engine::GetSurvivalMapNames(void)
class GAME::GridSystem const * GAME::GridRegion::GetSystem(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::GridRegion::GetSystemFileName(void)
unsigned int GAME::ConversationResource::GetSystemMemoryUsage(void)
unsigned int GAME::EffectResource::GetSystemMemoryUsage(void)
unsigned int GAME::GraphicsAnim::GetSystemMemoryUsage(void)
unsigned int GAME::GraphicsFont2::GetSystemMemoryUsage(void)
unsigned int GAME::GraphicsMesh::GetSystemMemoryUsage(void)
unsigned int GAME::GraphicsShader2::GetSystemMemoryUsage(void)
unsigned int GAME::GraphicsTexture::GetSystemMemoryUsage(void)
unsigned int GAME::ImageResource::GetSystemMemoryUsage(void)
unsigned int GAME::Resource::GetSystemMemoryUsage(void)
unsigned int GAME::SoundResource::GetSystemMemoryUsage(void)
int GAME::GetSystemTime(void)
struct HWND__ * GAME::HwndWindow::GetSystemWindow(void)
struct HWND__ * GAME::WinWindow::GetSystemWindow(void)
char const GAME::World::GetTQ1MapFileVersionNumber(void)
class GAME::Sphere const & GAME::GraphicsLight::GetTargetBounds(void)
class GAME::UniqueId GAME::SectorLayers::GetTargetId(int,int,int)
class GAME::RenderSurface * GAME::GraphicsCanvas::GetTargetSurface(void)
class GAME::WeatherTemplate const & GAME::WeatherManager::GetTemplate(unsigned int)
enum GAME::TerrainBase::TerrainBaseType GAME::TerrainBase::GetTerainType(void)
class GAME::TerrainBase * GAME::Level::GetTerrain(void)
class GAME::TerrainBase const * GAME::Level::GetTerrain(void)
class GAME::TerrainBase const * GAME::Water::GetTerrain(void)
struct GAME::Terrain::TerrainLayer * GAME::Terrain::GetTerrainLayer(int)
int GAME::GraphicsEngine::GetTerrainQuality(void)
void GAME::Terrain::GetTerrainVertex(class GAME::Vec3 &,unsigned int,unsigned int)
unsigned short const * GAME::InputDevice::ButtonEvent::GetText(void)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > GAME::LocalizationManager::GetText(char const *)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const & GAME::PortableLocalization::GetText(int)
class GAME::GraphicsTexture const * GAME::Billboard::GetTexture(int,class GAME::Name const &)
class GAME::GraphicsTexture const * GAME::Decal::GetTexture(int,class GAME::Name const &)
class GAME::GraphicsTexture const * GAME::DecalSet::GetTexture(int,class GAME::Name const &)
class GAME::GraphicsTexture const * GAME::Emitter::GetTexture(int,class GAME::Name const &)
class GAME::RenderTexture * GAME::FogOfWar::GetTexture(void)
class GAME::RenderTexture const * GAME::GraphicsFont2::GetTexture(void)
class GAME::GraphicsTexture const * GAME::GraphicsMeshInstance::GetTexture(int,class GAME::Name const &)
class GAME::RenderTexture const * GAME::GraphicsTexture::GetTexture(int)
class GAME::RenderTexture const * GAME::GraphicsTexture::GetTexture(void)
class GAME::GraphicsTexture const * GAME::Lightning2::GetTexture(int,class GAME::Name const &)
class GAME::GraphicsTexture const * GAME::LineEffect2::GetTexture(int,class GAME::Name const &)
class GAME::GraphicsTexture const * GAME::LineEffect::GetTexture(int,class GAME::Name const &)
class GAME::RenderTexture const * GAME::NoiseTexture::GetTexture(void)
class GAME::GraphicsTexture const * GAME::TerrainPatch::GetTexture(int,class GAME::Name const &)
class GAME::GraphicsTexture const * GAME::TerrainType::GetTexture(unsigned int)
class GAME::GraphicsTexture const * GAME::TrailEffect::GetTexture(int,class GAME::Name const &)
class GAME::GraphicsTexture const * GAME::WeatherManager::GetTexture(int)
unsigned char const * GAME::GraphicsCursor::GetTextureData(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::GetTextureFile(unsigned int)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::EmitterData::GetTextureName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::GetTextureName(unsigned int)
int GAME::GraphicsEngine::GetTextureReduction(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
int GAME::GraphicsEngine::GetTextureReduction(void)
unsigned int GAME::GraphicsCursor::GetTextureSize(void)
void GAME::ThreadMonitor::GetThreadInfos(class mem::vector<struct GAME::ThreadMonitor::ThreadInfo> &)
float GAME::AmbianceManager::GetTime(void)
void GAME::Sound::GetTime(int *,int *)
unsigned int GAME::Timer::GetTime(void)
void GAME::Profile::GetTimeInfo(class mem::vector<struct GAME::Profile::TimeInfo> &)
float GAME::GetTimeScale(void)
class GAME::Color const & GAME::Actor::GetTintColor(void)
class GAME::Color GAME::Region::GetTintColor(void)
char const * GAME::ImpassableData::GetTokBuffer(void)
int GAME::ImpassableData::GetTokBufferLength(void)
int GAME::Timer::GetTotalElapsedTime(void)
int GAME::NetworkServerBrowser::GetTotalServerCount(void)
class mem::vector<unsigned int> const & GAME::Jukebox::GetTrackedBosses(void)
unsigned int GAME::Jukebox::GetTrackedPlayer(void)
bool GAME::Engine::GetTrailDebugging(void)
unsigned int GAME::NetworkLinkStats::GetTransmitByteCount(void)
unsigned int GAME::NetworkLinkStats::GetTransmitPacketCount(void)
float GAME::Actor::GetTransparency(void)
bool GAME::TerrainType::GetTransparentClutter(void)
int GAME::GameInfo::GetTunicColorIndex(void)
enum GAME::CameraType GAME::Camera::GetType(void)
enum GAME::GraphicsLight::Type GAME::GraphicsLight::GetType(void)
char const * GAME::InstanceGroup::GetType(void)
enum GAME::Light::Type GAME::Light::GetType(void)
enum GAME::Sound::Type GAME::Sound::GetType(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::InstanceGroup::GetTypeString(void)
float GAME::GraphicsEngine::GetUIScaleFactor(void)
void GAME::GraphicsEngine::GetUIScaledRect(class GAME::Rect const &,class GAME::Rect &)
class GAME::UniqueId const & GAME::Entity::GetUniqueID(void)
class GAME::UniqueId const & GAME::SectorLayers::GetUniqueIdForValue(unsigned int,unsigned char)
unsigned int GAME::GetUnixTime(void)
struct GAME::FontStyle * GAME::StyleManager::GetUnscaledStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
int GAME::Engine::GetUpdateTime(void)
int GAME::NavManager::GetUpdateTime(void)
int GAME::PhysicsEngine2::GetUpdateTime(void)
void GAME::TrailEffect::GetUpperPoints(int,class GAME::Vec3 * const)
bool GAME::Engine::GetUseHighPrecisionDepthBuffer(void)
void * GAME::PhysicsRigidBody2::GetUserdata(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Engine::GetUtilityFontStyle(void)
char const * GAME::ConfigFile::GetValue(char const *)
char const * GAME::LoadTable::GetValue(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const *)
char const * GAME::LoadTable::GetValue(char const *,char const *)
char const * GAME::LoadTableBinary::GetValue(int,char const *)
char const * GAME::LoadTableBinary::GetValue(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const *)
char const * GAME::LoadTableBinary::GetValue(char const *,char const *)
bool GAME::ConfigFile::GetValueAsBool(char const *,bool &)
bool GAME::ConfigFile::GetValueAsInt2(char const *,int &,int &)
bool GAME::ConfigFile::GetValueAsInt(char const *,int &)
bool GAME::ConfigFile::GetValueAsStr(char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
bool GAME::ConfigFile::GetValueAsfloat(char const *,float &)
char const * GAME::Engine::GetVersion(void)
class GAME::Vec3 const & GAME::PhysicsMesh::GetVertex(int)
class GAME::Vec3 const & GAME::PhysicsMesh_Bullet::GetVertex(int)
class GAME::RenderVertexBuffer const * GAME::GraphicsMesh::GetVertexBuffer(void)
class GAME::RenderVertexBuffer const * GAME::WaterLayer::GetVertexBuffer(void)
class GAME::RenderVertexDeclaration const * GAME::GPDDefaultVertexBuilder::GetVertexDeclaration(void)
class GAME::RenderVertexDeclaration const * GAME::GPDTex2VertexBuilder::GetVertexDeclaration(void)
class GAME::RenderVertexDeclaration const * GAME::GraphicsMesh::GetVertexDeclaration(void)
class GAME::RenderVertexDeclaration const * GAME::Terrain::GetVertexDeclaration(void)
class GAME::RenderVertexDeclaration * GAME::WaterRenderInterface::GetVertexDeclaration(void)
void GAME::GraphicsMesh::GetVerts(class mem::vector<struct GAME::GraphicsMesh::LocalVertex> &)
unsigned int GAME::GraphicsFont2::GetVideoMemoryUsage(void)
unsigned int GAME::GraphicsMesh::GetVideoMemoryUsage(void)
unsigned int GAME::GraphicsShader2::GetVideoMemoryUsage(void)
unsigned int GAME::GraphicsTexture::GetVideoMemoryUsage(void)
unsigned int GAME::Resource::GetVideoMemoryUsage(void)
class GAME::Viewport const & GAME::GraphicsCanvas::GetViewport(void)
class GAME::Viewport GAME::GraphicsPrimitiveDrawer::GetViewport(void)
class GAME::Viewport const & GAME::GraphicsScene::GetViewport(void)
enum GAME::Visibility GAME::Actor::GetVisibility(void)
enum GAME::Visibility GAME::Entity::GetVisibility(void)
float GAME::SoundManager::GetVolumeSetMultiplier(unsigned int)
struct GAME::GridSystem::WallPiece const & GAME::GridSystem::GetWallPiece(char const * const,char const * const,int &)
class GAME::Water * GAME::Level::GetWater(void)
class GAME::Water const * GAME::Level::GetWater(void)
class GAME::Water * GAME::WaterObject::GetWater(void)
class GAME::Water const * GAME::WaterRenderInterface::GetWater(void)
bool GAME::Water::GetWaterPointInfo(class GAME::Vec3 const &,class GAME::Vec3 &,class GAME::Vec3 &,class GAME::WaterType const * &)
class GAME::WaterType const * GAME::WaterObject::GetWaterType(void)
class GAME::WaterType * GAME::WaterTypeManager::GetWaterType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
char const * GAME::WaterObject::GetWaterTypeName(void)
void GAME::WaterTypeManager::GetWaterTypeNames(class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
class GAME::WaveParams * GAME::WaterWaveSet::GetWaveParams(void)
class GAME::RenderIndexBuffer const * GAME::Water::GetWavesIndexBuffer(void)
class GAME::GraphicsShader2 const * GAME::Water::GetWavesShader(void)
class GAME::Name const & GAME::Water::GetWavesStyle(unsigned int)
int GAME::GraphicsCanvas::GetWidth(void)
int GAME::GraphicsEngine::GetWidth(void)
int GAME::GraphicsTexture::GetWidth(void)
float GAME::GridBase::GetWidth(void)
float GAME::GridRegion::GetWidth(void)
int GAME::HwndWindow::GetWidth(void)
unsigned int GAME::Image::GetWidth(void)
int GAME::ImageResource::GetWidth(void)
unsigned int GAME::SectorLayers::GetWidth(void)
int GAME::TerrainPatch::GetWidth(void)
int GAME::Viewport::GetWidth(void)
int GAME::WinWindow::GetWidth(void)
int GAME::GridBase::GetWidthInCells(void)
int GAME::GridRegion::GetWidthInCells(void)
class GAME::Vec3 GAME::WeatherManager::GetWind(void)
class GAME::Vec3 const & GAME::WeatherManager::GetWindDirection(void)
float GAME::WeatherManager::GetWindStrength(void)
bool GAME::LocalizationManager::GetWordMode(void)
int GAME::Region::GetWorldIndex(void)
class GAME::Vec3 GAME::WorldVec3::GetWorldPosition(void)
class GAME::Mat4 const & GAME::GraphicsScene::GetWorldToScreenMatrix(void)
int GAME::HwndWindow::GetX(void)
int GAME::WinWindow::GetX(void)
int GAME::FogOfWar::GetXSize(void)
float GAME::CurveData::GetY(float)
int GAME::HwndWindow::GetY(void)
int GAME::WinWindow::GetY(void)
float GAME::CurveData::GetYFast(float)
int GAME::FogOfWar::GetYSize(void)
struct GAME::ZoneManager::ZoneData const * GAME::ZoneManager::GetZoneData(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > const & GAME::ZoneManager::GetZoneList(enum GAME::ZonePage)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::Region::GetZoneRecord(void)
class GAME::SystemTimer & GAME::WorldCamera::GetZoomTimer(void)
float GAME::Tracker::Getfloat(char const *,char const *)
float GAME::Tracker::Getfloat(char const *,char const *,unsigned int)
void GAME::ConnectionManager::GlobalEnableNetwork(void)
void GAME::ServerConnectionManager::GlobalEnableNetwork(void)
class GAME::Rect GAME::GraphicsAlign(class GAME::Rect const &,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,class GAME::Rect const &,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign)
class GAME::Vec2 GAME::GraphicsAlign(class GAME::Vec2 const &,class GAME::Rect const &,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign)
class GAME::Level * GAME::Region::GuaranteedGetLevel(bool)
class GAME::Level * GAME::World::GuaranteedGetRegionLevel(int)
void GAME::ClientConnectionManager::HandleControlSocketPacket(class GAME::Socket *,class GAME::NetPacket *)
void GAME::ServerConnectionManager::HandleControlSocketPacket(class GAME::Socket *,class GAME::NetPacket *)
void GAME::Display::HandleControllerEvent(struct GAME::InputDevice::ControllerEvent const &)
bool GAME::DisplayWidget::HandleControllerEvent(struct GAME::InputDevice::ControllerEvent const &)
void GAME::ClientEntityList::HandleCreatedEntity(class GAME::Entity *)
void GAME::NetworkEntityList::HandleCreatedEntity(class GAME::Entity *)
void GAME::ServerEntityList::HandleCreatedEntity(class GAME::Entity *)
void GAME::Display::HandleJoystickEvent(struct GAME::InputDevice::JoystickEvent const &)
bool GAME::DisplayWidget::HandleJoystickEvent(struct GAME::InputDevice::JoystickEvent const &)
void GAME::Display::HandleKeyEvent(class GAME::InputDevice::ButtonEvent const &)
bool GAME::DisplayWidget::HandleKeyEvent(class GAME::InputDevice::ButtonEvent const &)
bool GAME::TransformGizmo::HandleMouseButton(class GAME::Camera const &,class GAME::Viewport const &,int,int,class GAME::Vec2 const &)
void GAME::Display::HandleMouseEvent(struct GAME::InputDevice::MouseEvent const &)
bool GAME::DisplayWidget::HandleMouseEvent(struct GAME::InputDevice::MouseEvent const &)
bool GAME::TransformGizmo::HandleMouseMove(class GAME::Camera const &,class GAME::Viewport const &,class GAME::Vec2 const &)
void GAME::ClientConnectionManager::HandlePacket(class GAME::NetPacket *)
void GAME::ConnectionManager::HandlePacket(class GAME::NetPacket *)
void GAME::ServerConnectionManager::HandlePacket(class GAME::NetPacket *)
void GAME::StubConnectionManager::HandlePacket(class GAME::NetPacket *)
bool GAME::IOStreamRead::HandlePropertyTag(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::IOStreamWrite::HandlePropertyTag(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::Effect::HasActiveParticles(void)
bool GAME::EffectEntity::HasActiveParticles(void)
bool GAME::Emitter::HasActiveParticles(void)
bool GAME::Actor::HasAttachPoint(class GAME::Name const &)
bool GAME::RouterServices::HasBeenInitialized(void)
bool GAME::ImpassableData::HasBeenLoadedOrPrimed(void)
bool GAME::TerrainPatch::HasData(void)
bool GAME::LocalizationManager::HasDialogForLanguage(void)
bool GAME::Entity::HasDoneInitialUpdate(void)
bool GAME::Emitter::HasEmittedParticles(void)
bool GAME::Level::HasEntity(class GAME::Entity const &)
bool GAME::Singleton<class GAME::AsyncWorker>::HasInstantiated(void)
bool GAME::Singleton<class GAME::CPUCoreDetector>::HasInstantiated(void)
bool GAME::Singleton<class GAME::DebugRenderManager>::HasInstantiated(void)
bool GAME::Singleton<class GAME::EventManager>::HasInstantiated(void)
bool GAME::Singleton<class GAME::Jukebox>::HasInstantiated(void)
bool GAME::Singleton<class GAME::NavManager>::HasInstantiated(void)
bool GAME::Singleton<class GAME::ObjectManager>::HasInstantiated(void)
bool GAME::Singleton<class GAME::RouterServices>::HasInstantiated(void)
bool GAME::Singleton<class GAME::StyleManager>::HasInstantiated(void)
bool GAME::Singleton<class GAME::Tracker>::HasInstantiated(void)
bool GAME::Level::HasLoadedRenderData(void)
bool GAME::NavManager::HasObject(class GAME::Entity *)
bool GAME::GraphicsShader2::HasParameter(class GAME::Name const &)
bool GAME::Entity::HasParentsUniqueID(void)
bool GAME::Actor::HasRigidBodyData(void)
bool GAME::GraphicsMesh::HasRigidBodyData(void)
bool GAME::Engine::HasSurvivalDLC(void)
bool GAME::GraphicsLight::HasTargetRenderable(class GAME::GraphicsRenderable const *)
bool GAME::Entity::HasUniqueID(void)
bool GAME::GraphicsMesh::HasVertexColors(void)
void GAME::NetPacketDescriber::Heading(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int)
void GAME::EditorFilter::HideShowObject(unsigned int,bool)
void GAME::GraphicsCanvas::HotBlurFrameBuffer(unsigned int,unsigned int,float,float,float)
int GAME::RandomUniformLocked::IGenerate(int,int)
void GAME::EffectData::ImageLoad(int,char const *)
void GAME::Engine::ImplantStatisticRunGameInfo(unsigned int,unsigned int)
bool GAME::Steamworks::InBigPictureMode(void)
bool GAME::Entity::InRenderPreLoadFrustum(void)
void GAME::PhysicsMeshBase::IncRefCount(void)
bool GAME::Entity::IncludeInMinimap(void)
bool GAME::Light::IncludeInMinimap(void)
void GAME::AmbianceManager::IncrementBloomParams(float,float,float)
void GAME::NetworkQueue::IncrementFreeSpace(int)
void GAME::Tracker::IncrementInt(char const *,char const *)
void GAME::Tracker::IncrementInt(char const *,char const *,bool)
void GAME::GraphicsEngine::IncrementLightCount(int,int,int)
void GAME::BaseResourceManager::IncrementMemoryUsage(unsigned int)
void GAME::Engine::IncrementPathingCounter(void)
void GAME::GraphicsEngine::IncrementReflectionCount(int)
void GAME::Emitter::IncrementXRot(float)
void GAME::Emitter::IncrementYRot(float)
void GAME::Emitter::IncrementZRot(float)
void GAME::InternalParam::Init(void)
void GAME::RigidBodyDescription::Init(class GAME::Coords const &,class GAME::GraphicsMesh const &,class GAME::SkeletalPose const &,class GAME::Coords &)
void GAME::NoiseTexture::InitalizeSurface(void)
void GAME::Actor::InitialUpdate(void)
void GAME::Billboard::InitialUpdate(void)
void GAME::Decal::InitialUpdate(void)
void GAME::EffectEntity::InitialUpdate(void)
void GAME::Entity::InitialUpdate(void)
void GAME::Light::InitialUpdate(void)
void GAME::TerrainPatch::InitialUpdate(void)
void GAME::TerrainPatchRT::InitialUpdate(void)
void GAME::TrailEffect::InitialUpdate(void)
void GAME::ClientConnectionManager::Initialize(enum GAME::NetworkMode)
bool GAME::ConfigFile::Initialize(class GAME::BasicTextParser<char> &)
bool GAME::ConfigFile::Initialize(char const *)
void GAME::ConnectionManager::Initialize(enum GAME::NetworkMode)
enum GAME::Resource::InitResult GAME::ConversationResource::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
void GAME::DecalSet::Initialize(void)
enum GAME::Resource::InitResult GAME::EffectResource::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
void GAME::Engine::Initialize(class GAME::EWindow *,class GAME::GraphicsEngineSettings const &,bool,class GAME::FileSystem *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,bool)
bool GAME::FogOfWar::Initialize(int,int)
enum GAME::Resource::InitResult GAME::GraphicsAnim::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
enum GAME::Resource::InitResult GAME::GraphicsCursor::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
bool GAME::GraphicsEngine::Initialize(class GAME::EWindow *,class GAME::GraphicsEngineSettings const &,class GAME::ResourceLoader *)
enum GAME::Resource::InitResult GAME::GraphicsFont2::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
enum GAME::Resource::InitResult GAME::GraphicsMesh::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
enum GAME::Resource::InitResult GAME::GraphicsShader2::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
enum GAME::Resource::InitResult GAME::GraphicsTexture::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
void GAME::HookPack::Initialize(void)
bool GAME::HwndWindow::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int,int,int,int,void const *,enum GAME::EWindow::Style,struct HWND__ *)
void GAME::IOStreamRead::Initialize(char const *,enum GAME::IOStream::IOStreamType,int)
enum GAME::Resource::InitResult GAME::ImageResource::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
bool GAME::LuaManager::Initialize(bool,bool)
bool GAME::NavManager::Initialize(void)
bool GAME::PhysicsEngine2::Initialize(void)
bool GAME::PhysicsMesh::Initialize(void const *,int)
bool GAME::PhysicsMesh_Bullet::Initialize(void const *,int)
void GAME::RouterServices::Initialize(bool)
void GAME::SectorLayers::Initialize(int,int)
void GAME::ServerConnectionManager::Initialize(enum GAME::NetworkMode)
bool GAME::SoundManager::Initialize(class GAME::EWindow *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
enum GAME::Resource::InitResult GAME::SoundResource::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,int)
bool GAME::Steamworks::Initialize(void)
void GAME::StubConnectionManager::Initialize(enum GAME::NetworkMode)
void GAME::Water::Initialize(unsigned int,unsigned int,class GAME::TerrainBase const *,class GAME::GridBase const *)
bool GAME::WaterLayer::Initialize(char const *,float,class GAME::Vec2 const &)
void GAME::WaterPath::Initialize(char const *,float,class GAME::ControlPoint const &)
void GAME::WaterRenderInterface::Initialize(class GAME::RenderDevice *)
void GAME::WaterWaveSet::Initialize(float,class GAME::ControlPoint const &)
void GAME::WeatherManager::Initialize(void)
bool GAME::WinWindow::Initialize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int,int,int,int,void const *,enum GAME::EWindow::Style,struct HWND__ *)
void GAME::WorldFrustum::Initialize(class GAME::Region *,class GAME::Frustum const &)
void GAME::Engine::InitializeAssertHandler(void (*)(char const *),bool)
void GAME::TerrainBase::InitializeBlocks(bool)
void GAME::PhysicsMesh::InitializeBoundingBox(void)
void GAME::PhysicsMesh_Bullet::InitializeBoundingBox(void)
void GAME::LocalizationManager::InitializeBuiltinLanguages(void)
void GAME::LocalizationManager::InitializeCommunityLanguage(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::LocalizationManager::InitializeCommunityLanguages(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ClientConnectionManager::InitializeControlSocket(void)
void GAME::ConnectionManager::InitializeControlSocket(void)
void GAME::ServerConnectionManager::InitializeControlSocket(void)
void GAME::ConversationResource::InitializeDefault(void)
void GAME::EffectResource::InitializeDefault(void)
void GAME::GraphicsMesh::InitializeDefault(void)
void GAME::GraphicsTexture::InitializeDefault(void)
void GAME::ImageResource::InitializeDefault(void)
void GAME::Resource::InitializeDefault(void)
void GAME::SoundResource::InitializeDefault(void)
bool GAME::NetworkServerBrowser::InitializeInternetBrowser(void)
void GAME::NetworkServerBrowser::InitializeLANBrowser(void)
bool GAME::Engine::InitializeMod(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::NetworkQueue::Insert(void *,int)
void GAME::NetPacketDescriber::InsertDescription(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,int,int)
void GAME::NetworkLinkStats::InsertField(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::NetworkLinkStats::InsertField(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,int)
void GAME::NetworkLinkStats::InsertField(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char const *)
void GAME::NetworkLinkStats::InsertField(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char const *,int)
void GAME::GraphicsMeshInstance::InstallGMIEffect(class GAME::GMIEffect *)
bool GAME::Engine::InstallMapChunkCallback(class GAME::MapChunkCallback *)
bool GAME::World::InstallMapChunkCallback(class GAME::MapChunkCallback *)
class GAME::LocalizationManager & GAME::LocalizationManager::Instance(void)
bool GAME::Terrain::InternalAddLayer(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned char const * const)
bool GAME::EmitterData::InternalBinaryRead(class GAME::BinaryReader &)
void GAME::Engine::InternalLog(enum GAME::LogPriority,unsigned int,char const *)
void GAME::SoundManager::InternalUnload(class GAME::SoundDescriptor &)
void GAME::TrailEffect::InternalUpdate(int,class GAME::Coords const &)
struct GAME::SkeletalPose::AffineParts GAME::SkeletalPose::Interpolate(struct GAME::SkeletalPose::AffineParts const &,struct GAME::SkeletalPose::AffineParts const &,float)
void GAME::IPVNetworkAddress::Invalidate(void)
void GAME::ImpassableData::Invalidate(void)
void GAME::World::InvalidateAllPathing(void)
void GAME::GridBase::InvalidateBoundingBox(void)
bool GAME::GraphicsPrimitiveDrawer::Is2DMode(void)
bool GAME::Sound::Is3d(void)
bool GAME::Entity::IsActivated(void)
bool GAME::HwndWindow::IsActive(void)
bool GAME::PhysicsSystem2::IsActive(void)
bool GAME::TrailEffect::IsActive(void)
bool GAME::WinWindow::IsActive(void)
bool GAME::GraphicsMeshInstance::IsAnimationValid(void)
bool GAME::Resource::IsAvailable(void)
bool GAME::ConnectionManager::IsBanned(class mem::vector<unsigned int> const &)
bool GAME::NavManager::IsBlocked(class GAME::Vec3 const &,float)
bool GAME::NetworkServerBrowser::IsBrowserEnabled(void)
bool GAME::Engine::IsCDKeyValid(void)
bool GAME::Actor::IsCharacter(void)
bool GAME::Engine::IsCharacterCommandLogEnabled(void)
bool GAME::Engine::IsCharacterDataLogEnabled(void)
bool GAME::NetworkEntityList::IsClientActive(int)
bool GAME::NetworkControllerBase::IsCommunciationsEnabled(void)
bool GAME::GMIEffectIcey::IsCompatible(class GAME::GraphicsMeshInstance *)
bool GAME::Decal::IsComplete(void)
bool GAME::Effect::IsComplete(void)
bool GAME::Emitter::IsComplete(void)
bool GAME::ConnectionManager::IsConnectedToServer(void)
bool GAME::EditorFilter::IsCustomFiltered(unsigned int)
bool GAME::ResourceLoader::IsDebugging(void)
bool GAME::Engine::IsDedicatedServer(void)
bool GAME::Actor::IsDescriptionVisible(void)
bool GAME::SoundManager::IsDialogPlaying(void)
bool GAME::FOWManager::IsDirty(void)
bool GAME::Engine::IsEditorMode(void)
bool GAME::SkeletalPose::IsEmpty(void)
bool GAME::WeatherManager::IsEnabled(void)
bool GAME::LocalizationManager::IsEnglish(void)
bool GAME::NetworkEntityList::IsEntityExistOnClient(int,class GAME::Entity *)
bool GAME::Engine::IsExpansion1Enabled(void)
bool GAME::Engine::IsExpansion1Loaded(void)
bool GAME::Engine::IsExpansion2Enabled(void)
bool GAME::Engine::IsExpansion2Loaded(void)
bool GAME::GraphicsEngine::IsFPSEnabled(void)
bool GAME::FileSourceArchive::IsFileWriteable(char const *)
bool GAME::FileSourceDirectory::IsFileWriteable(char const *)
bool GAME::FileSystem::IsFileWriteable(char const *)
bool GAME::Lightning2::IsFinished(void)
bool GAME::Portal::IsFrontFacing(class GAME::Vec3 const &)
bool GAME::GraphicsEngine::IsFullscreen(void)
bool GAME::IsGameTimePaused(void)
bool GAME::GraphicsEngine::IsGrassEnabled(void)
bool GAME::InstanceGroupManager::IsGrouped(class GAME::UniqueId const &)
bool GAME::HookPack::IsHooked(unsigned int)
bool GAME::ConnectionManager::IsHostConnected(int const &)
bool GAME::IPVNetworkAddress::IsIPAddressEqual(class GAME::IPVNetworkAddress const &)
bool GAME::Terrain::IsImpassable(unsigned int,unsigned int)
bool GAME::Engine::IsInDeviceReset(void)
bool GAME::FogOfWar::IsInFog(class GAME::Vec3 const &)
bool GAME::Region::IsInFog(class GAME::WorldVec3 const &)
bool GAME::World::IsInFog(class GAME::WorldVec3 const &)
bool GAME::Level::IsInNetworkList(class GAME::Entity *)
bool GAME::Steamworks::IsInOfflineMode(void)
bool GAME::NetworkServerBrowser::IsInServerList(class GAME::IPVNetworkAddress const &)
bool GAME::Entity::IsInSpace(void)
bool GAME::Engine::IsInTeleportMode(void)
bool GAME::Entity::IsInWorld(void)
bool GAME::ConnectionManager::IsInitialized(void)
bool GAME::SectorLayers::IsInitialized(void)
bool GAME::Steamworks::IsInitialized(void)
bool GAME::RegionId::IsInvalid(void)
bool GAME::Terrain::IsInvisible(int,int)
bool GAME::LocalizationManager::IsLanguageAvailable(char const *,unsigned int &)
bool GAME::LocalizationManager::IsLanguageSupported(int)
bool GAME::Region::IsLevelLoaded(void)
bool GAME::Region::IsLevelLoading(void)
bool GAME::GraphicsEngine::IsLightingEnabled(void)
bool GAME::Level::IsLoaded(void)
bool GAME::Engine::IsLoadingDbFromArchive(void)
bool GAME::Region::IsLoadingFinished(void)
bool GAME::Engine::IsMapRendering(void)
bool GAME::RouterServices::IsMine(struct GAME::UPnP::PortMapping const &)
bool GAME::NavManager::IsNavDataLoaded(class GAME::Region const *)
bool GAME::Region::IsNeighbor(class GAME::Region const *)
bool GAME::Engine::IsNetworkClient(void)
bool GAME::Engine::IsNetworkEnabled(void)
bool GAME::Engine::IsNetworkServer(void)
bool GAME::NoiseTexture::IsNormalMap(void)
bool GAME::SmartObjectId::IsNullAllowed(void)
bool GAME::SmartObjectIdNullable::IsNullAllowed(void)
bool GAME::EditorFilter::IsObjectFiltered(unsigned int)
bool GAME::ObjectManager::IsObjectIdOnDeletedList(unsigned int)
bool GAME::ObjectManager::IsObjectOnDeletedList(class GAME::Object *)
bool GAME::Entity::IsOwnedByClient(void)
bool GAME::Engine::IsPSEditorMode(void)
bool GAME::Sound::IsPaused(void)
bool GAME::Sound::IsPlaying(void)
bool GAME::SoundManager::IsPlaying(class GAME::SoundDescriptor const &)
bool GAME::SoundPak::IsPlaying(void)
bool GAME::TheoraVideoPlayer::IsPlaying(void)
bool GAME::VideoPlayer::IsPlaying(void)
bool GAME::Jukebox::IsPlayingBossMusic(void)
bool GAME::TerrainBase::IsPointInFace(struct GAME::TerrainBase::IntersectionFace const &,class GAME::Vec3 const &)
bool GAME::TerrainPatch::IsPointInFace(class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
bool GAME::WaterLayer::IsPointInLayer(class GAME::Vec3 const &)
bool GAME::NavManager::IsPointOnPathMesh(class GAME::WorldVec3 const &)
bool GAME::Engine::IsProfilerShown(void)
bool GAME::ColorPulse::IsPulsing(void)
bool GAME::Entity::IsQuestRelated(void)
bool GAME::GridRegion::IsRandom(void)
bool GAME::GridRegionRandom::IsRandom(void)
bool GAME::IOStreamRead::IsReading(void)
bool GAME::IOStreamWrite::IsReading(void)
bool GAME::Serializer::IsReading(void)
bool GAME::ConnectionManager::IsReadyForGameLoad(void)
bool GAME::ConnectionManager::IsReceiveOk(int,enum GAME::PACKET_CLASS)
bool GAME::GraphicsEngine::IsRegionListEnabled(void)
bool GAME::Engine::IsRenderDebuggerShown(void)
bool GAME::GraphicsScene::IsRenderFlagSet(enum GAME::RenderFlag)
bool GAME::GraphicsEngine::IsRenderingEnabled(void)
bool GAME::Entity::IsRestored(void)
bool GAME::GridRegionRandom::IsRoomConnected(struct GAME::GridRegionRandom::Room const &,int)
bool GAME::Engine::IsRunningCharacterImport(void)
bool GAME::Engine::IsRunningGameSimulation(void)
bool GAME::Decal::IsSavedByEditor(void)
bool GAME::EffectEntity::IsSavedByEditor(void)
bool GAME::Entity::IsSavedByEditor(void)
bool GAME::SoundEntity::IsSavedByEditor(void)
bool GAME::EffectEntity::IsSelfDeleting(void)
bool GAME::ConnectionManager::IsSendOk(int,enum GAME::PACKET_CLASS)
bool GAME::NetworkServerBrowser::IsServerListUpdating(void)
bool GAME::GraphicsEngine::IsShowBoundingBoxesEnabled(void)
bool GAME::GraphicsEngine::IsShowLightsEnabled(void)
bool GAME::Socket::IsShutdown(void)
bool GAME::ConnectionManager::IsSocketErrorFatal(class mem::vector<int> const &)
bool GAME::Entity::IsStatic(void)
bool GAME::Entity::IsStationaryAttachment(void)
bool GAME::LocalizationManager::IsSymbolRecognized(unsigned short)
bool GAME::GraphicsLight::IsTargeted(void)
bool GAME::GraphicsEngine::IsTerrainEnabled(void)
bool GAME::AmbianceManager::IsTimeEnabled(void)
bool GAME::Jukebox::IsTrackedBoss(unsigned int)
bool GAME::Jukebox::IsTrackedPlayerDead(void)
bool GAME::GraphicsEngine::IsTransparencyEnabled(void)
bool GAME::GraphicsMeshInstance::IsTransparent(void)
bool GAME::GraphicsEngine::IsUIScalingEnabled(void)
bool GAME::Level::IsUnderground(void)
bool GAME::Region::IsUnderground(void)
bool GAME::PhysicsEngine2::IsUpdating(void)
bool GAME::Region::IsUpdating(void)
bool GAME::Engine::IsUserIdle(int)
bool GAME::AnimChannel::IsValid(void)
bool GAME::GraphicsMeshInstance::IsValid(void)
bool GAME::IOStreamRead::IsValid(void)
bool GAME::IOStreamWrite::IsValid(void)
bool GAME::IPVNetworkAddress::IsValid(void)
bool GAME::World::IsValidMapFile(char const *,bool)
bool GAME::SoundManager::IsValidPositionInFrustum(class GAME::WorldVec3 const &)
bool GAME::SectorDataManager::IsValidSectorValue(unsigned int,class GAME::UniqueId const &)
bool GAME::World::IsValidWorldFile(char const *)
bool GAME::Entity::IsVisible(void)
bool GAME::GraphicsEngine::IsWaterEnabled(void)
bool GAME::WaterTypeManager::IsWaterType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::Water::IsWaterTypeUsed(class GAME::WaterType const *)
bool GAME::LocalizationManager::LanguageFailedToLoad(void)
float GAME::WorldVec3::Length(void)
class GAME::WorldCoords GAME::Lerp(class GAME::WorldCoords const &,class GAME::WorldCoords const &,float)
class GAME::WorldVec3 GAME::Lerp(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,float)
void GAME::ChaosBeam::Liberate(void)
void GAME::TrailEffect::Liberate(void)
void GAME::GraphicsMTRenderer::LightSpacePerspectiveShadowMapMatrix(class GAME::Camera const &,class GAME::Vec3 const &,class GAME::Frustum const &,class GAME::Mat4 &)
bool GAME::InstanceGroup::ListContains(class GAME::UniqueId const &)
void GAME::BaseResourceManager::ListLoadedResources(void)
void GAME::GraphicsEngine::ListLoadedResources(void)
void GAME::Actor::Load(class GAME::LoadTable const &)
void GAME::Billboard::Load(class GAME::LoadTable const &)
void GAME::ChaosBeam::Load(class GAME::LoadTable const &)
void GAME::DayNightLight::Load(class GAME::LoadTable const &)
void GAME::Decal::Load(class GAME::LoadTable const &)
void GAME::EffectData::Load(char const *,class GAME::FileSystem *)
void GAME::EffectEntity::Load(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::EffectEntity::Load(class GAME::LoadTable const &)
void GAME::Entity::Load(class GAME::LoadTable const &)
void GAME::FireLight::Load(class GAME::LoadTable const &)
void GAME::FlickerLight::Load(class GAME::LoadTable const &)
void GAME::FlyingBolt::Load(class GAME::LoadTable const &)
bool GAME::GridBase::Load(class GAME::BinaryReader &)
bool GAME::GridRegion::Load(class GAME::BinaryReader &)
bool GAME::GridRegionRandom::Load(class GAME::BinaryReader &)
void GAME::GridSystem::Load(class GAME::LoadTable const &)
enum GAME::Image::Error GAME::Image::Load(char const *,enum GAME::Image::Format)
enum GAME::Image::Error GAME::Image::Load(void const *,unsigned int,enum GAME::Image::Format)
bool GAME::ImpassableData::Load(class GAME::BinaryReader &)
void GAME::InstanceGroup::Load(class GAME::BinaryReader &)
void GAME::InstanceGroupManager::Load(class GAME::BinaryReader &,bool)
bool GAME::Level::Load(char const *,bool,bool)
bool GAME::Level::Load(void const *,int,bool,bool)
void GAME::Light::Load(class GAME::LoadTable const &)
void GAME::Lightning2::Load(class GAME::LoadTable const &)
void GAME::LineEffect2::Load(class GAME::LoadTable const &)
void GAME::LocalizationManager::Load(char const *)
bool GAME::LuaManager::Load(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::NoiseTexture::Load(class GAME::LoadTable const &)
void GAME::Object::Load(class GAME::LoadTable const &)
bool GAME::Options::Load(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::PointDisturbance::Load(class GAME::LoadTable const &)
void GAME::PulseLight::Load(class GAME::LoadTable const &)
bool GAME::SectorDataManager::Load(class GAME::BinaryReader &)
bool GAME::SectorDataManager::Load(char const *)
bool GAME::SectorLayers::Load(class GAME::BinaryReader &)
bool GAME::SoundManager::Load(char const *,class GAME::SoundDescriptor &)
void GAME::SoundPak::Load(class GAME::LoadTable const &)
bool GAME::Terrain::Load(class GAME::BinaryReader &,int)
void GAME::TerrainType::Load(class GAME::LoadTable const &)
void GAME::TrailEffect::Load(class GAME::LoadTable const &)
bool GAME::Water::Load(class GAME::BinaryReader &)
bool GAME::WaterLayer::Load(class GAME::BinaryReader &,unsigned int)
bool GAME::WaterPath::Load(class GAME::BinaryReader &,unsigned int)
bool GAME::WaterType::Load(class GAME::BinaryReader &)
bool GAME::WaterWaveSet::Load(class GAME::BinaryReader &,unsigned int)
bool GAME::World::Load(char const *,bool,bool)
bool GAME::GraphicsAnim::LoadANMData(void const *,int,int)
void GAME::Engine::LoadAdditionalDatabases(class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > const &)
void GAME::Jukebox::LoadAmbientPlaylist(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
class GAME::GraphicsAnim const * GAME::GraphicsEngine::LoadAnimation(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::GraphicsAnim const * GAME::LoadTable::LoadAnimation(char const *,unsigned int)
class GAME::GraphicsAnim const * GAME::LoadTable::LoadAnimationFromFile(char const *)
class GAME::GraphicsCursor const * GAME::GraphicsEngine::LoadCursorA(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Engine::LoadCustomMapDatabase(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ZoneManager::LoadDBR(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::Engine::LoadDatabase(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::DecalType const * GAME::DecalTypeMgr::LoadDecalType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Options::LoadDefaults(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::HookPack::LoadEventHook(class GAME::LoadTable const &,unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::LoadTable const * GAME::TableDepot::LoadFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::GraphicsFont2 const * GAME::GraphicsEngine::LoadFont(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::GraphicsFont2 const * GAME::StyleManager::LoadFontDirect(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ColorPulse::LoadFromDatabase(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::HookPack::LoadFromFile(unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::HookPack::LoadFromTable(unsigned int,class GAME::LoadTable const &)
bool GAME::HookPack::LoadHooks(unsigned int,class GAME::LoadTable const &)
bool GAME::Region::LoadLevel(bool,bool)
void GAME::Actor::LoadLite(class GAME::LoadTable const &,bool)
void GAME::Engine::LoadMainDatabase(void)
bool GAME::World::LoadMap(void)
class GAME::GraphicsMesh const * GAME::GraphicsEngine::LoadMesh(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::GraphicsMesh const * GAME::LoadTable::LoadMesh(char const *,unsigned int)
void GAME::LocalizationManager::LoadModStrings(void)
void GAME::Jukebox::LoadMusicPlaylist(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::ObjectManager::LoadObjectData(class GAME::Object *)
void GAME::Region::LoadRegionIcon(class GAME::BinaryReader &)
bool GAME::Level::LoadRenderData(void)
bool GAME::Terrain::LoadRenderData(void)
class GAME::Resource const * GAME::BaseResourceManager::LoadResource(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ResourceLoader::LoadResource(class GAME::Resource *)
class GAME::EffectResource const * GAME::LoadTable::LoadResourceEffect(char const *,unsigned int)
void GAME::WaterType::LoadResources(void)
class GAME::GraphicsShader2 const * GAME::GraphicsEngine::LoadShader2(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::GraphicsShader2 const * GAME::LoadTable::LoadShader2(char const *,unsigned int)
void GAME::StyleManager::LoadStyle(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
void GAME::Engine::LoadSurvival1Database(void)
void GAME::Engine::LoadSurvival2Database(void)
class GAME::LoadTable const * GAME::ObjectManager::LoadTableFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::LocalizationManager::LoadTags(bool)
class GAME::GraphicsTexture const * GAME::GraphicsEngine::LoadTexture(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::GraphicsTexture const * GAME::LoadTable::LoadTexture(char const *,unsigned int)
void GAME::TerrainType::LoadTextures(void)
bool GAME::InterfaceSkin::LoadUIS(char const *)
void GAME::GridSystem::LoadWallPiece(class GAME::LoadTable const &,struct GAME::GridSystem::WallPiece &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned char)
void GAME::Entity::LoadWithoutScripts(class GAME::LoadTable const &)
bool GAME::Actor::LocalEnqueue(class GAME::ActorConfigCommand *)
unsigned short const * GAME::LocalizationManager::Localize(char const *,...)
unsigned short const * GAME::LocalizationManager::LocalizeList(char const *,char *)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const GAME::LocalizationManager::LocalizeStripColorTags(char const *,...)
unsigned short const * GAME::LocalizationManager::LocalizeWithoutParams(char const *)
void GAME::LocalizationManager::LocalizerFormatStrip(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
void const * GAME::FileDirectory::Lock(unsigned int,unsigned int)
void const * GAME::FileDirectory::Lock(void)
void GAME::ImpassableData::Lock(void)
void GAME::Resource::Lock(void)
void GAME::InstanceGroupManager::LockGroupList(void)
class GAME::File * GAME::World::LockMapFile(void)
void GAME::Engine::Log(enum GAME::LogPriority,unsigned int,char const *,...)
void GAME::Engine::Log(enum GAME::LogPriority,char const *,...)
void GAME::NetworkShim::LogCharacterPacket(unsigned int,enum GAME::PACKET_TYPE,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Engine::LogCloudSaveFiles(void)
void GAME::NetworkLinkStats::LogDuplicatePacketReceived(int)
void GAME::Socket::LogError(int)
void GAME::Billboard::LogInfo(void)
void GAME::Decal::LogInfo(void)
void GAME::DecalSet::LogInfo(void)
void GAME::Emitter::LogInfo(void)
void GAME::Entity::LogInfo(void)
void GAME::GraphicsMesh::LogInfo(void)
void GAME::GraphicsMeshInstance::LogInfo(void)
void GAME::Lightning2::LogInfo(void)
void GAME::LineEffect2::LogInfo(void)
void GAME::LineEffect::LogInfo(void)
void GAME::LuaManager::LogInfo(void)
void GAME::Resource::LogInfo(void)
void GAME::TerrainPatch::LogInfo(void)
void GAME::TrailEffect::LogInfo(void)
void GAME::Water::LogInfo(void)
void GAME::ObjectManager::LogLeakedObjects(void)
void GAME::RouterServices::LogMappingsToConsole(void)
void GAME::Engine::LogNames(void)
void GAME::Engine::LogNetworkEntities(int)
void GAME::NetworkLinkStats::LogPing(unsigned int)
void GAME::Engine::LogPublicIP(void)
void GAME::Engine::LogRegionStates(void)
void GAME::World::LogRegionStates(void)
void GAME::NetworkLinkStats::LogRetransmit(int)
void GAME::NetworkLinkStats::LogRetransmitRequest(int)
void GAME::Engine::LogSeparator(enum GAME::LogPriority,char)
void GAME::NetworkLinkStats::LogSocketError(int)
class GAME::WorldCoords GAME::WorldCoords::LookAt(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,class GAME::Vec3 const &)
class GAME::WorldCoords GAME::WorldCoords::LookAtNoLean(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,class GAME::Vec3 const &)
class GAME::WorldCoords GAME::WorldCoords::LookIn(class GAME::WorldVec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::BaseResourceManager::MaintainBudget(void)
class GAME::WorldVec3 & GAME::WorldVec3::MakeRelative(class GAME::Region *)
void GAME::EffectEntity::MakeSelfDeletingChild(void)
void GAME::SoundEntity::MakeSelfDeletingChild(void)
void GAME::LoadTable::MakeTokens(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > &)
bool GAME::RouterServices::MapPort(enum GAME::UPnP::Protocol,unsigned short)
unsigned short GAME::RouterServices::MapRandomPort(enum GAME::UPnP::Protocol)
void GAME::Decal::MapVertex(struct GAME::Decal::DecalVertex &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::TerrainPatch::MapVertex(struct GAME::TerrainPatch::Vertex &,class GAME::Vec3 const &,float,float)
void const * GAME::MemoryMappedFile::MapView(unsigned int,unsigned int)
void GAME::Resource::MarkAsTouched(void)
void GAME::Resource::MarkAsUsed(void)
void GAME::Region::MarkAsUsedThisFrame(void)
void GAME::SmartObjectId::MarkForReplication(bool)
class GAME::RenderSurface * GAME::GraphicsCanvas::MaskFrameBuffer(unsigned int,unsigned int,class GAME::Rect const &)
void GAME::SoundManager::MasterFadeIn(int)
void GAME::SoundManager::MasterFadeOut(int)
float & GAME::WaterType::MaxDepth(void)
float GAME::WaterType::MaxDepth(void)
float & GAME::WaterType::MaxDepthOpacity(void)
float GAME::WaterType::MaxDepthOpacity(void)
void GAME::HwndWindow::Maximize(void)
void GAME::WinWindow::Maximize(void)
float & GAME::WaterType::MinDepth(void)
float GAME::WaterType::MinDepth(void)
float & GAME::WaterType::MinDepthOpacity(void)
float GAME::WaterType::MinDepthOpacity(void)
void GAME::HwndWindow::Minimize(void)
void GAME::WinWindow::Minimize(void)
void GAME::Water::Mirror(class GAME::Vec3 const &,bool,bool,bool)
void GAME::ImpassableData::MirrorX(void)
void GAME::WaterCurve::MirrorX(float)
void GAME::WaterLayer::MirrorX(float)
void GAME::ImpassableData::MirrorXZ(void)
void GAME::WaterCurve::MirrorXZ(void)
void GAME::WaterLayer::MirrorXZ(void)
void GAME::ImpassableData::MirrorZ(void)
void GAME::WaterCurve::MirrorZ(float)
void GAME::WaterLayer::MirrorZ(float)
void GAME::Terrain::MoveDownLayer(unsigned int)
void GAME::Level::MoveEntity(class GAME::Entity *,class GAME::Coords const &)
bool GAME::InstanceGroup::MoveEntityDown(int)
bool GAME::InstanceGroup::MoveEntityUp(int)
bool GAME::NavManager::MoveObject(class GAME::Entity *,class GAME::Vec3 const &)
void GAME::Terrain::MoveUpLayer(unsigned int)
int const GAME::GridRegionRandom::NUM_DOOR_TYPES
int const GAME::GridRegionRandom::NUM_ROOM_TYPES
void GAME::Engine::NetworkFrustumStats(bool)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::NetworkIndexToString(unsigned int)
void GAME::Terrain::New(unsigned int,unsigned int)
void GAME::Level::NewGrid(int,int,int,enum GAME::GridType)
void GAME::SectorDataManager::NewSectorData(unsigned int)
void GAME::Level::NewSpace(class GAME::Vec2 const &)
void GAME::Level::NewTerrain(unsigned int,unsigned int)
class GAME::Water * GAME::Level::NewWater(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::NoiseTextureName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::NoiseTextureName(void)
unsigned int GAME::TerrainBase::NumXBlocks(void)
unsigned int GAME::TerrainBase::NumYBlocks(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::ObjectSplashEffect(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::ObjectSplashEffect(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::ObjectSplashTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::ObjectSplashTexture(void)
bool GAME::Actor::OccludesPathing(void)
bool GAME::Entity::OccludesPathing(void)
void GAME::FFDGizmo::OffsetFFDControlPoint(int,class GAME::Vec3 const &)
void GAME::EmitterData::OldBinaryRead(class GAME::BinaryReader &)
void GAME::WinWindow::OnActivate(bool)
void GAME::WindowEventHandler::OnActivate(bool)
void GAME::Actor::OnAddToLevel(class GAME::Level *)
void GAME::Entity::OnAddToLevel(class GAME::Level *)
void GAME::FireLight::OnAddToLevel(class GAME::Level *)
void GAME::Entity::OnAddToWorld(void)
void GAME::Actor::OnDestroy(void)
void GAME::Entity::OnDestroy(void)
void GAME::SoundEntity::OnDestroy(void)
void GAME::WinWindow::OnMinimize(void)
void GAME::WindowEventHandler::OnMinimize(void)
void GAME::Actor::OnMoveInLevel(class GAME::Level *)
void GAME::Decal::OnMoveInLevel(class GAME::Level *)
void GAME::Entity::OnMoveInLevel(class GAME::Level *)
void GAME::FireLight::OnMoveInLevel(class GAME::Level *)
void GAME::Entity::OnMoved(class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::Entity::OnPathFailed(void)
void GAME::Entity::OnReachedMovementGoal(void)
void GAME::Actor::OnRemoveFromLevel(class GAME::Level *)
void GAME::Entity::OnRemoveFromLevel(class GAME::Level *)
void GAME::Entity::OnRemoveFromWorld(void)
void GAME::WinWindow::OnRestore(void)
void GAME::WindowEventHandler::OnRestore(void)
void GAME::Actor::OnTeleported(void)
void GAME::WinWindow::OnToggleFullscreen(void)
void GAME::WindowEventHandler::OnToggleFullscreen(void)
void GAME::Entity::OnUnload(void)
bool GAME::FileDirectory::Open(char const *,enum GAME::FileMode)
bool GAME::MemoryMappedFile::Open(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
class GAME::File * GAME::FileSourceArchive::OpenFile(char const *,enum GAME::FileMode,char const *)
class GAME::File * GAME::FileSourceDirectory::OpenFile(char const *,enum GAME::FileMode,char const *)
class GAME::File * GAME::FileSystem::OpenFile(char const *,enum GAME::FileMode)
class GAME::FileStream * GAME::FileSourceArchive::OpenFileStream(char const *)
class GAME::FileStream * GAME::FileSourceDirectory::OpenFileStream(char const *)
class GAME::FileStream * GAME::FileSystem::OpenFileStream(char const *)
class GAME::File * GAME::FileSystem::OpenFileWithCheck(char const *,char const *,enum GAME::FileMode)
class GAME::File * GAME::FileSourceArchive::OpenFullFilePath(char const *,enum GAME::FileMode)
class GAME::File * GAME::FileSourceDirectory::OpenFullFilePath(char const *,enum GAME::FileMode)
class GAME::File * GAME::FileSystem::OpenFullFilePath(char const *,enum GAME::FileMode)
bool GAME::Archive::OpenRead(char const *)
void GAME::SteamFriendList::OpenSteamFriendOverlay(void)
void GAME::WorldCoords::Orthonormalize(void)
bool GAME::DirtyRect::Overlap(class GAME::DirtyRect const &,class GAME::DirtyRect const &)
bool GAME::Entity::Owns(class GAME::Entity const *)
bool GAME::Steamworks::OwnsDLC(unsigned int)
void GAME::ServerEntityList::PadTimeout(void)
void GAME::Terrain::PathingFirstPass(void)
void GAME::ResourceLoader::Pause(void)
void GAME::SoundManager::Pause(void)
void GAME::SoundStream::Pause(void)
void GAME::TheoraVideoPlayer::Pause(bool)
void GAME::VideoPlayer::Pause(bool)
void GAME::PauseGameTime(void)
bool GAME::NetworkQueue::Peek(unsigned char *,int)
unsigned char GAME::NetworkQueue::PeekHead(void)
int GAME::TerrainType::PerformClumping(int,class mem::vector<int> &,int,int)
void GAME::Entity::PhysicsCollision(class GAME::PhysicsSystem2 *,struct GAME::PhysicsCollision2 const &)
void GAME::IPhysics2::PhysicsCollision(class GAME::PhysicsSystem2 *,struct GAME::PhysicsCollision2 const &)
void GAME::PhysicsObject2::PhysicsCollision(class GAME::PhysicsSystem2 *,struct GAME::PhysicsCollision2 const &)
enum GAME::PhysicsSurface GAME::IPhysics2::PhysicsGetSurfaceType(int)
enum GAME::PhysicsSurface GAME::PhysicsObject2::PhysicsGetSurfaceType(int)
enum GAME::PhysicsSurface GAME::WaterLayer::PhysicsGetSurfaceType(int)
bool GAME::Entity::PhysicsIsSimulated(void)
void GAME::Actor::PhysicsPost(class GAME::PhysicsSystem2 *)
void GAME::Entity::PhysicsPost(class GAME::PhysicsSystem2 *)
void GAME::IPhysics2::PhysicsPost(class GAME::PhysicsSystem2 *)
void GAME::PhysicsObject2::PhysicsPost(class GAME::PhysicsSystem2 *)
bool GAME::Entity::PhysicsResponse(class GAME::PhysicsObject2 *)
bool GAME::IPhysics2::PhysicsResponse(class GAME::PhysicsObject2 *)
bool GAME::PhysicsObject2::PhysicsResponse(class GAME::PhysicsObject2 *)
bool GAME::WaterLayer::PhysicsResponse(class GAME::PhysicsObject2 *)
bool GAME::Actor::PhysicsSetup(class GAME::PhysicsSystem2 *)
bool GAME::Entity::PhysicsSetup(class GAME::PhysicsSystem2 *)
bool GAME::PhysicsObject2::PhysicsSetup(class GAME::PhysicsSystem2 *)
bool GAME::TerrainBase::PhysicsSetup(class GAME::PhysicsSystem2 *)
bool GAME::WaterLayer::PhysicsSetup(class GAME::PhysicsSystem2 *)
bool GAME::WaterPath::PhysicsSetup(class GAME::PhysicsSystem2 *)
void GAME::IPhysics2::PhysicsSync(class GAME::PhysicsSystem2 *)
void GAME::PhysicsObject2::PhysicsSync(class GAME::PhysicsSystem2 *)
bool GAME::Entity::PhysicsTest(class GAME::PhysicsObject2 *)
bool GAME::IPhysics2::PhysicsTest(class GAME::PhysicsObject2 *)
bool GAME::PhysicsObject2::PhysicsTest(class GAME::PhysicsObject2 *)
void GAME::Actor::PhysicsUpdate(class GAME::PhysicsSystem2 *)
void GAME::Entity::PhysicsUpdate(class GAME::PhysicsSystem2 *)
void GAME::IPhysics2::PhysicsUpdate(class GAME::PhysicsSystem2 *)
void GAME::PhysicsObject2::PhysicsUpdate(class GAME::PhysicsSystem2 *)
class GAME::WorldVec3 GAME::Emitter::PickAnchor(class GAME::Vec3 *,float)
void GAME::Level::PickEntities(class GAME::Ray const &,class mem::vector<class GAME::Entity *> &,bool)
void GAME::World::PickEntities(class GAME::WorldRay const &,class mem::vector<class GAME::Entity *> &)
class GAME::Entity * GAME::Level::PickEntity(class GAME::Ray const &)
class GAME::Entity * GAME::Level::PickEntity(class GAME::Ray const &,class GAME::FilterFunction<class GAME::Entity> const &)
class GAME::Entity * GAME::World::PickEntity(class GAME::WorldRay const &)
class GAME::Entity * GAME::World::PickEntity(class GAME::WorldRay const &,class GAME::FilterFunction<class GAME::Entity> const &)
int GAME::World::PickRegion(class GAME::WorldRay const &)
int GAME::SoundPak::PickSound(void)
void GAME::NetworkServerBrowser::PingResponse(class GAME::IPVNetworkAddress const &,unsigned int)
void GAME::ClientConnectionManager::PingServer(class GAME::IPVNetworkAddress const &)
void GAME::World::PlaceDecal(class GAME::WorldCoords const &,class GAME::DecalType const *,unsigned int)
void GAME::World::PlaceDecalOnGround(class GAME::WorldCoords const &,class GAME::DecalType const *,unsigned int)
bool GAME::SoundManager::Play2D(class GAME::SoundDescriptor const &,bool)
void GAME::SoundPak::Play2D(bool,bool)
bool GAME::SoundManager::Play3D(class GAME::SoundDescriptor const &,bool)
void GAME::SoundPak::Play3D(class GAME::WorldVec3 const &,bool,bool)
void GAME::SoundStream::Play(void)
bool GAME::TheoraVideoPlayer::Play(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
bool GAME::VideoPlayer::Play(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Actor::PlayAnimation(int,class GAME::GraphicsAnim const *,bool,float,int)
void GAME::AnimChannel::PlayAnimation(class GAME::GraphicsAnim const *,bool,float,int)
void GAME::SoundManager::PlayBackgroundThreadSound(struct GAME::SoundManager::BackgroundThreadSound const &)
void GAME::Jukebox::PlayBossMusic(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Jukebox::PlayEventMusic(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::SoundManager::PlayExternalStream(float const *,int,int,int)
void GAME::Actor::PlaySound(class GAME::SoundDescriptor const &,bool)
bool GAME::ImpassableData::PolygonIsInsideBox(class GAME::SimplePolygon const &,class GAME::ABBox const &)
void GAME::Decal::PostDeviceReset(void)
void GAME::Engine::PostDeviceReset(void)
void GAME::FogOfWar::PostDeviceReset(void)
void GAME::GraphicsCanvas::PostDeviceReset(void)
void GAME::GraphicsEngine::PostDeviceReset(void)
void GAME::GraphicsMTRenderer::PostDeviceReset(void)
void GAME::Level::PostDeviceReset(void)
void GAME::Region::PostDeviceReset(void)
void GAME::Terrain::PostDeviceReset(void)
void GAME::TerrainBase::PostDeviceReset(void)
void GAME::TerrainPatch::PostDeviceReset(class GAME::Vec3 const &,class GAME::GraphicsMeshInstance *,class GAME::Vec3 const &)
void GAME::TheoraVideoPlayer::PostDeviceReset(void)
void GAME::VideoPlayer::PostDeviceReset(void)
void GAME::Water::PostDeviceReset(void)
void GAME::WeatherManager::PostDeviceReset(void)
void GAME::World::PostDeviceReset(void)
void GAME::GridBase::PostLoad(void)
void GAME::GridRegion::PostLoad(void)
bool GAME::Level::PostLoad(bool)
void GAME::Level::PostLoadEntities(void)
void GAME::Region::PostLoadEntities(void)
bool GAME::Region::PostLoadLevel(bool)
void GAME::World::PostLoadPass(void)
void GAME::Actor::PreAnimationUpdate(int)
void GAME::Decal::PreDeviceReset(void)
void GAME::Engine::PreDeviceReset(void)
void GAME::FogOfWar::PreDeviceReset(void)
bool GAME::GraphicsCanvas::PreDeviceReset(void)
void GAME::GraphicsEngine::PreDeviceReset(void)
void GAME::GraphicsMTRenderer::PreDeviceReset(void)
void GAME::Level::PreDeviceReset(void)
void GAME::Region::PreDeviceReset(void)
void GAME::Terrain::PreDeviceReset(void)
void GAME::TerrainBase::PreDeviceReset(void)
void GAME::TerrainPatch::PreDeviceReset(void)
void GAME::TheoraVideoPlayer::PreDeviceReset(void)
void GAME::VideoPlayer::PreDeviceReset(void)
void GAME::Water::PreDeviceReset(void)
void GAME::WeatherManager::PreDeviceReset(void)
void GAME::World::PreDeviceReset(void)
bool GAME::Actor::PreLoad(bool)
bool GAME::Decal::PreLoad(bool)
void GAME::Effect::PreLoad(bool)
bool GAME::EffectEntity::PreLoad(bool)
void GAME::Emitter::PreLoad(bool)
bool GAME::Entity::PreLoad(bool)
void GAME::GraphicsMeshInstance::PreLoad(bool)
void GAME::GridBase::PreLoad(bool)
void GAME::GridSystem::PreLoad(void)
void GAME::Level::PreLoad(bool,bool)
bool GAME::LineEffect2::PreLoad(bool)
void GAME::Region::PreLoad(bool,bool)
void GAME::SoundDescriptor::PreLoad(enum GAME::ResourcePriority)
void GAME::SoundPak::PreLoad(enum GAME::ResourcePriority)
void GAME::Terrain::PreLoad(bool)
void GAME::TerrainType::PreLoad(bool)
bool GAME::TrailEffect::PreLoad(bool)
void GAME::GraphicsMesh::PreLoadDependentResources(void)
void GAME::GraphicsShader2::PreLoadDependentResources(void)
void GAME::Resource::PreLoadDependentResources(void)
void GAME::GridBase::PreLoadFrustums(class GAME::Frustum const * const,unsigned int)
void GAME::GridRegion::PreLoadFrustums(class GAME::Frustum const * const,unsigned int)
void GAME::Level::PreLoadFrustums(class GAME::Frustum const * const,unsigned int,bool)
void GAME::Region::PreLoadFrustums(class GAME::Frustum const * const,unsigned int,bool)
void GAME::Terrain::PreLoadFrustums(class GAME::Frustum const * const,unsigned int)
void GAME::BaseResourceManager::PreLoadResource(class GAME::Resource const *)
void GAME::GraphicsMeshInstance::PrepareForRendering(void)
unsigned int GAME::CDKeyPacket::PrepareOutBuffer(void)
unsigned int GAME::CharacterActionPacket::PrepareOutBuffer(void)
unsigned int GAME::ChatPacket::PrepareOutBuffer(void)
unsigned int GAME::ClientDisconnectPacket::PrepareOutBuffer(void)
unsigned int GAME::ClientReadyPacket::PrepareOutBuffer(void)
unsigned int GAME::ClientServerQueryPacket::PrepareOutBuffer(void)
unsigned int GAME::ConnectionVerifyPacket::PrepareOutBuffer(void)
unsigned int GAME::DebugMessagePacket::PrepareOutBuffer(void)
unsigned int GAME::DisconnectClientPacket::PrepareOutBuffer(void)
unsigned int GAME::FragmentPacket::PrepareOutBuffer(void)
unsigned int GAME::HeartbeatPacket::PrepareOutBuffer(void)
unsigned int GAME::HeartbeatResponsePacket::PrepareOutBuffer(void)
unsigned int GAME::LinkControlAckPacket::PrepareOutBuffer(void)
unsigned int GAME::LinkMTUTestPacket::PrepareOutBuffer(void)
unsigned int GAME::NetPacket::PrepareOutBuffer(void)
unsigned int GAME::PingPacket::PrepareOutBuffer(void)
unsigned int GAME::RemoveClientPacket::PrepareOutBuffer(void)
unsigned int GAME::RemoveEntityPacket::PrepareOutBuffer(void)
unsigned int GAME::RequestResendPacket::PrepareOutBuffer(void)
unsigned int GAME::ServerAnnouncePacket::PrepareOutBuffer(void)
unsigned int GAME::ServerConnectAckPacket::PrepareOutBuffer(void)
unsigned int GAME::ServerConnectRejectPacket::PrepareOutBuffer(void)
unsigned int GAME::ServerConnectRequestPacket::PrepareOutBuffer(void)
unsigned int GAME::SpawnActorPacket::PrepareOutBuffer(void)
unsigned int GAME::SteamAuthRequestPacket::PrepareOutBuffer(void)
unsigned int GAME::SteamAuthResponsePacket::PrepareOutBuffer(void)
unsigned int GAME::VoiceChatPacket::PrepareOutBuffer(void)
void GAME::Region::PrepareUnload(bool)
void GAME::Engine::PresentSurface(void)
void GAME::GraphicsCanvas::PresentSurface(class GAME::RenderSurface *)
void GAME::GraphicsEngine::PresentSurface(void)
void GAME::SectorLayers::PrimeForEdit(int,class GAME::UniqueId const &)
void GAME::ImpassableData::PrimeForGrid(int,int,int)
void GAME::ImpassableData::PrimeForTerrain(int,int)
void GAME::Engine::PrintCoreInfo(void)
void GAME::Options::PrintToConsole(void)
unsigned int GAME::GraphicsFont2::ProcessCharacter(unsigned short,unsigned short,enum GAME::FontStyleFlag &,class GAME::Color &,class GAME::Color &)
void GAME::Terrain::ProcessDirtyOpacityRects(void)
void GAME::Terrain::ProcessDirtyRects(void)
void GAME::SoundManager::ProcessFinishedSounds(void)
void GAME::AsyncWorker::ProcessJobQueue(void)
void GAME::GraphicsMTRenderer::ProcessJobs(void)
bool GAME::HwndWindow::ProcessMessages(void)
bool GAME::WinWindow::ProcessMessages(void)
void GAME::NetworkRateCounter::ProcessPacket(unsigned long)
void GAME::NetworkLinkStats::ProcessReceive(class GAME::NetPacket &)
void GAME::NetworkLinkStats::ProcessTransmit(class GAME::NetPacket &)
void GAME::Engine::ProcessUserInput(void)
class GAME::Vec2 GAME::Camera::Project(class GAME::Vec3 const &,class GAME::Viewport const &)
class GAME::Vec2 GAME::WorldCamera::Project(class GAME::WorldVec3 const &,class GAME::Viewport const &)
class GAME::Vec2 GAME::Camera::ProjectToImageSpace(class GAME::Vec3 const &,class GAME::Viewport const &)
bool GAME::EffectEntity::PullParentBones(class mem::vector<struct GAME::EmitterBone> &)
void GAME::ResourceLoader::PurgeAllResources(void)
void GAME::ResourceLoader::PurgeResource(class GAME::Resource *)
void GAME::Tracker::PushInt(char const *,char const *,int)
void GAME::Tracker::PushItemInfo(char const *,char const *,struct GAME::TrackerItemInfoS const &)
void GAME::Tracker::PushString(char const *,char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Tracker::PushStringCounter(char const *,char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Tracker::Pushfloat(char const *,char const *,float)
bool GAME::World::PutOnFloor(class GAME::WorldVec3 &)
bool GAME::WorldVec3::PutOnFloor(void)
enum GAME::CharacterActionPermission GAME::CharacterAction::QueryActionPermission(class GAME::CharacterAction *,class GAME::CharacterAction *)
void GAME::GraphicsMTRenderer::QueueJob(class GAME::GraphicsMTJob *)
bool GAME::RIFFGetChunk(void const *,unsigned int,unsigned int,unsigned int &,unsigned int &)
void * GAME::Actor::RTTI_new(void)
void * GAME::ChaosBeam::RTTI_new(void)
void * GAME::DayNightLight::RTTI_new(void)
void * GAME::Decal::RTTI_new(void)
void * GAME::EffectEntity::RTTI_new(void)
void * GAME::Entity::RTTI_new(void)
void * GAME::FireLight::RTTI_new(void)
void * GAME::FlickerLight::RTTI_new(void)
void * GAME::FlyingBolt::RTTI_new(void)
void * GAME::GridBase::RTTI_new(void)
void * GAME::GridRegion::RTTI_new(void)
void * GAME::GridSystem::RTTI_new(void)
void * GAME::Light::RTTI_new(void)
void * GAME::Lightning2::RTTI_new(void)
void * GAME::LineEffect2::RTTI_new(void)
void * GAME::LineEffect::RTTI_new(void)
void * GAME::NoiseTexture::RTTI_new(void)
void * GAME::Object::RTTI_new(void)
void * GAME::PointDisturbance::RTTI_new(void)
void * GAME::PulseLight::RTTI_new(void)
void * GAME::SoundEntity::RTTI_new(void)
void * GAME::SoundPak::RTTI_new(void)
void * GAME::TerrainType::RTTI_new(void)
void * GAME::TrailEffect::RTTI_new(void)
void * GAME::WeaponTrail::RTTI_new(void)
void GAME::GridRegionRandom::Randomize(void)
void GAME::WeatherManager::RandomizeWind(bool)
float GAME::WaterLayer::RayIntersection(class GAME::Ray const &,float)
float GAME::WaterPath::RayIntersection(class GAME::Ray const &,float,unsigned int &,float &)
float GAME::WaterWaveSet::RayIntersection(class GAME::Ray const &,float,unsigned int &,float &)
void GAME::EffectEntity::ReLoad(void)
void GAME::Actor::Read(class GAME::BinaryReader &)
bool GAME::DayNightCycle::Read(class GAME::BinaryReader &)
bool GAME::DayNightCycleSectorData::Read(class GAME::BinaryReader &)
void GAME::Entity::Read(class GAME::BinaryReader &)
void GAME::FOWManager::Read(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
void GAME::FogOfWar::Read(void const *,unsigned int)
bool GAME::PortableLocalization::Read(class GAME::BinaryReader &,enum GAME::Language)
bool GAME::PortableLocalization::Read(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::RegionId::Read(class GAME::BinaryReader &)
void GAME::TerrainPatch::Read(class GAME::BinaryReader &)
void GAME::WorldCoords::Read(class GAME::BinaryReader &)
bool GAME::WorldFile::Read(class GAME::BinaryReader &)
void GAME::WorldVec3::Read(class GAME::BinaryReader &)
bool GAME::SectorDataManager::ReadAdjustmentData(class GAME::BinaryReader &)
void GAME::SectorDataManager::ReadAmbientData(class GAME::BinaryReader &)
bool GAME::SectorDataManager::ReadBloomData(class GAME::BinaryReader &)
void GAME::SectorDataManager::ReadBossData(class GAME::BinaryReader &)
bool GAME::SectorDataManager::ReadChallengeData(class GAME::BinaryReader &)
bool GAME::SectorDataManager::ReadClimateData(class GAME::BinaryReader &)
bool GAME::SectorDataManager::ReadDamageData(class GAME::BinaryReader &)
void GAME::SkeletalPose::ReadData(class GAME::BinaryReader &)
bool GAME::SectorDataManager::ReadDayNightCycleData(class GAME::BinaryReader &)
void GAME::SectorDataManager::ReadFogData(class GAME::BinaryReader &)
bool GAME::RenderDevice::ReadFrameBuffer(struct GAME::Pixel *,int,int)
int GAME::InternalParam::ReadInt(unsigned short const *,int &)
void GAME::GridRegion::ReadLatticeChunk(class GAME::BinaryReader &,int)
bool GAME::SectorDataManager::ReadLevelLimitData(class GAME::BinaryReader &)
void GAME::SectorDataManager::ReadNameData(class GAME::BinaryReader &)
void GAME::TriggerToken::ReadProperties(class GAME::CheckedReader &)
bool GAME::SectorDataManager::ReadPvpData(class GAME::BinaryReader &)
void GAME::Entity::ReadReplicationData(class GAME::NetPacketInBuffer &)
void GAME::GraphicsMeshInstance::ReadReplicationData(class GAME::NetPacketInBuffer &)
void GAME::SkeletalPose::ReadReplicationData(class GAME::NetPacketInBuffer &)
bool GAME::SectorDataManager::ReadRiftgateData(class GAME::BinaryReader &)
void GAME::SectorDataManager::ReadSectorData(class GAME::SectorData *,class GAME::BinaryReader &)
bool GAME::SectorDataManager::ReadViewDistanceData(class GAME::BinaryReader &)
bool GAME::Emitter::RebuildFaceGroup(void)
void GAME::TerrainPatch::RebuildLayers(int,int)
bool GAME::Region::RebuildMapData(void)
void GAME::Decal::RebuildMesh(void)
void GAME::ImpassableData::RecalculateRegionBox(void)
class GAME::NetPacket * GAME::ConnectionManager::ReceiveControlPacket(class GAME::Socket * &)
void GAME::TerrainPatch::RecreateGrassBlocks(void)
void GAME::GraphicsMTRenderer::RecreateRenderTargets(unsigned int,unsigned int)
void GAME::GraphicsCanvas::RecreateSceneRenderTargets(unsigned int,unsigned int)
bool GAME::DecalTypeMgr::ReferenceDecalType(class GAME::DecalType const *)
float & GAME::WaterType::Reflectivity(void)
float GAME::WaterType::Reflectivity(void)
void GAME::FriendList::Refresh(void)
void GAME::SteamFriendList::Refresh(void)
void GAME::WeatherManager::RefreshIntensities(void)
bool GAME::World::RegionsLoaded(void)
void GAME::EventManager::Register(unsigned int,class GAME::EventHandlerInterface *)
void GAME::Serializer::Register(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int &)
void GAME::Serializer::Register(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int &)
void GAME::Serializer::Register(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float &)
void GAME::Serializer::Register(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::Serializer::Register(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool &)
void GAME::SingletonManager::Register(class GAME::SingletonInterface *)
void GAME::HwndWindow::RegisterEventHandler(class GAME::WindowEventHandler *)
void GAME::WinWindow::RegisterEventHandler(class GAME::WindowEventHandler *)
void GAME::Engine::RegisterForForcedUpdates(unsigned int)
void GAME::LuaManager::RegisterForUpdates(unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)
void GAME::ObjectInteractionPacket::RegisterId(class GAME::SmartObjectId *)
void GAME::SoundManager::RegisterMovingObject(class GAME::SoundDescriptor const &,int)
void GAME::WeatherManager::RegisterParticleModifier(unsigned int,struct GAME::ParticleModifier const &)
void GAME::LuaManager::RegisterProvider(class GAME::LuaProvider *)
void GAME::Engine::RegisterResetObject(class GAME::ResetObject *)
void GAME::GraphicsScene::Release(void)
void GAME::ObjectManager::Release(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsAnim::ReleaseCreateEntities(void)
void GAME::Region::ReleaseMinimapImage(void)
void GAME::World::ReleaseMinimapImages(void)
void GAME::NoiseTexture::ReleaseRenderSurface(void)
bool GAME::WaterTypeManager::ReleaseWaterType(class GAME::WaterType const *)
void GAME::TerrainType::ReloadBumpmaps(void)
void GAME::LocalizationManager::ReloadCommunityLanguages(void)
void GAME::Level::ReloadGenerationDependentData(void)
void GAME::Region::ReloadGenerationDependentData(void)
void GAME::Terrain::ReloadGenerationDependentData(void)
void GAME::World::ReloadGenerationDependentData(void)
void GAME::LocalizationManager::ReloadLanguage(char const *)
void GAME::WaterType::ReloadNoise(void)
void GAME::Emitter::ReloadShader(void)
void GAME::WaterType::ReloadShader(void)
void GAME::WaterType::ReloadTextures(void)
void GAME::NetPacketInBuffer::Remove16Bit(int *)
void GAME::NetPacketInBuffer::Remove16Bit(unsigned int *)
void GAME::NetPacketInBuffer::Remove(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::NetPacketInBuffer::Remove(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
void GAME::NetPacketInBuffer::Remove(class GAME::SmartObjectIdList &)
void GAME::NetPacketInBuffer::Remove(class GAME::SmartObjectIdListNullable &)
void GAME::NetPacketInBuffer::Remove(class GAME::IPVNetworkAddress *)
void GAME::NetPacketInBuffer::Remove(class GAME::Name *)
void GAME::NetPacketInBuffer::Remove(class GAME::SmartObjectId *)
void GAME::NetPacketInBuffer::Remove(class GAME::SmartObjectIdNullable *)
void GAME::NetPacketInBuffer::Remove(class GAME::WorldCoords *)
void GAME::NetPacketInBuffer::Remove(class GAME::WorldVec3 *)
void GAME::NetPacketInBuffer::Remove(bool *)
bool GAME::NetworkQueue::Remove(unsigned char *,int)
void GAME::OverlayActivityManager::RemoveActivity(class GAME::OverlayActivity *)
void GAME::NetworkEntityList::RemoveAllClients(void)
void GAME::DecalSet::RemoveAllDecals(void)
void GAME::InstanceGroupManager::RemoveAllLinksTo(class GAME::InstanceGroup const *)
void GAME::World::RemoveAllQuestFiles(void)
void GAME::WaterLayer::RemoveBlock(unsigned int,unsigned int)
void GAME::SkeletalPose::RemoveBoneTranslation(class GAME::Name const &)
void GAME::InstanceGroup::RemoveChild(class GAME::InstanceGroup const *)
void GAME::NetworkEntityList::RemoveClient(int)
void GAME::NavManager::RemoveData(class GAME::Region *)
void GAME::NavManager::RemoveDynamicObstacle(unsigned int)
void GAME::Effect::RemoveEmitter(int)
void GAME::EffectData::RemoveEmitterData(int)
void GAME::WaterPath::RemoveEndControlPoint(void)
void GAME::WaterWaveSet::RemoveEndControlPoint(void)
void GAME::ClientEntityList::RemoveEntity(int,class GAME::Entity *)
void GAME::ConnectionManager::RemoveEntity(int,unsigned int)
void GAME::ImpassableData::RemoveEntity(class GAME::Entity *)
class GAME::UniqueId GAME::InstanceGroup::RemoveEntity(int)
void GAME::InstanceGroup::RemoveEntity(class GAME::Entity *)
void GAME::Level::RemoveEntity(class GAME::Entity *,bool)
void GAME::NetworkEntityList::RemoveEntity(int,class GAME::Entity *)
void GAME::Region::RemoveEntity(class GAME::Entity *,bool)
void GAME::ServerConnectionManager::RemoveEntity(int,unsigned int)
void GAME::UniqueIdMap::RemoveEntity(class GAME::UniqueId const &)
void GAME::World::RemoveEntity(class GAME::Entity *,bool)
void GAME::ClientEntityList::RemoveEntityFromAllClients(class GAME::Entity *)
void GAME::NetworkEntityList::RemoveEntityFromAllClients(class GAME::Entity *)
void GAME::Level::RemoveEntityFromNetworkList(class GAME::Entity *)
void GAME::World::RemoveEntityFromNetworkList(class GAME::Entity *)
void GAME::EditorFilter::RemoveFilterObject(unsigned int)
void GAME::PhysicsEngine2::RemoveFromSimulation(class GAME::PhysicsObject2 *)
void GAME::ImpassableData::RemoveIDBoxes(int)
void GAME::ImpassableData::RemoveIDFaces(int)
void GAME::DayNightCycle::RemoveLightSetup(unsigned int)
void GAME::Engine::RemoveLog(class GAME::DebugLog *)
void GAME::Engine::RemoveLogCategory(unsigned int &)
void GAME::Engine::RemoveModDirectory(void)
void GAME::SoundManager::RemoveMovingObject(class GAME::SoundDescriptor const &)
void GAME::NavManager::RemoveObject(class GAME::Entity *)
void GAME::PhysicsEngine2::RemoveObject(class GAME::PhysicsObject2 *)
void GAME::TerrainBase::RemoveObjectFromSpace(class GAME::TerrainObject *)
void GAME::Actor::RemovePathObstacles(void)
void GAME::Entity::RemovePathObstacles(void)
void GAME::GameInfo::RemovePlayer(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
void GAME::NetPacketInBuffer::RemoveRaw(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::World::RemoveRegion(int)
void GAME::NetworkServerBrowser::RemoveServer(struct GAME::ServerInfo *)
void GAME::FileSystem::RemoveSourcesFromPartition(enum GAME::FileSystem::Partition)
void GAME::WaterType::RemoveTexture(unsigned int)
void GAME::NetworkEntityList::RemoveTimeout(int,class GAME::Entity *)
void GAME::Jukebox::RemoveTrackedBoss(unsigned int)
void GAME::Entity::RemoveUniqueID(void)
void GAME::Water::RemoveWaterCurve(class GAME::WaterCurve *)
void GAME::Water::RemoveWaterLayer(class GAME::WaterLayer * &)
void GAME::Water::RemoveWaterType(class GAME::WaterType const *)
void GAME::Display::RemoveWidget(class GAME::DisplayWidget *)
void GAME::Engine::RemoveWidget(class GAME::DisplayWidget *)
bool GAME::WaterTypeManager::RenameWaterType(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::BoatOverlayActivity::Render(class GAME::GraphicsCanvas &)
void GAME::Display::Render(class GAME::GraphicsCanvas &)
void GAME::Engine::Render(void)
void GAME::GraphicsMTRenderer::Render(class GAME::Camera const &,class GAME::Region *,class GAME::Viewport const &,class GAME::Frustum const &,unsigned int,bool,class GAME::WorldFrustum const *)
void GAME::GraphicsShader2::Render(char const *)
void GAME::GraphicsShader2::Render(char const *,class GAME::RenderDevice *,enum GAME::RenderPrimitiveType,int,int,int,int,int)
void GAME::InstanceGroup::Render(class GAME::Region *,class GAME::GraphicsPrimitiveDrawer &,bool)
void GAME::OverlayActivityManager::Render(class GAME::GraphicsCanvas &)
void GAME::PieOmatic::Render(class GAME::GraphicsCanvas &,class GAME::Vec2 const &,float)
void GAME::Portal::Render(class GAME::GraphicsPrimitiveDrawer &,class GAME::Coords const &)
void GAME::SectorLayers::Render(class GAME::GraphicsPrimitiveDrawer &)
void GAME::TheoraVideoPlayer::Render(void)
void GAME::TransformGizmo::Render(class GAME::GraphicsCanvas &,class GAME::Camera const &,class GAME::Viewport const &)
void GAME::VideoPlayer::Render(void)
void GAME::DebugRenderManager::RenderArrow(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Color const &)
void GAME::TransformGizmo::RenderArrow(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::GraphicsMTRenderer::RenderBackground(class GAME::Viewport const &)
void GAME::TerrainPatch::RenderBase(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::GraphicsMesh::RenderBlendedFaces(class GAME::RenderDevice *,class GAME::GraphicsShader2 const *)
void GAME::Terrain::RenderBorder(class GAME::GraphicsPrimitiveDrawer &)
void GAME::GraphicsMeshInstance::RenderBoundingBox(class GAME::Vec3 const &)
void GAME::DebugRenderManager::RenderBox(class GAME::Region *,class GAME::ABBox const &,class GAME::Color const &)
void GAME::DebugRenderManager::RenderBox(class GAME::Region *,class GAME::OBBox const &,class GAME::Color const &)
void GAME::DebugRenderManager::RenderBox(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Color const &)
void GAME::GraphicsMTRenderer::RenderCamera(class GAME::Camera const &,class GAME::Region *,class GAME::Viewport const &,class GAME::Frustum const &,enum GAME::RenderFlag,bool,class GAME::WorldFrustum const *)
void GAME::DebugRenderManager::RenderCircle(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,float,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderCircle(float,float,float,float,float,class GAME::Color const &,class GAME::Vec3 const &)
void GAME::TransformGizmo::RenderCircle(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::TransformGizmo::RenderCircle(class GAME::GraphicsPrimitiveDrawer &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::DebugRenderManager::RenderCircleXZ(class GAME::Region *,class GAME::Vec3 const &,float,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderColoredText2d(int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Color const &,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderColoredText2d(int,int,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Color const &,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderColoredText2d(int,int,char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Color const &,enum GAME::FontLayout)
void GAME::DebugRenderManager::RenderCone(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,float,class GAME::Color const &)
void GAME::DebugRenderManager::RenderCone(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,class GAME::Color const &)
void GAME::GraphicsMTRenderer::RenderCustomScene(class GAME::GraphicsScene * &)
void GAME::DebugRenderManager::RenderCylinder(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,float,float,class GAME::Color const &)
void GAME::GraphicsMTRenderer::RenderDebug(void)
void GAME::FFDGizmo::RenderDebugFFD(void)
void GAME::GraphicsMTRenderer::RenderDepth(class GAME::GraphicsScene &,class mem::vector<struct GAME::RenderablePass> &)
void GAME::FFDGizmo::RenderFFDBox(class mem::vector<class GAME::Vec3> const &,class GAME::Color)
void GAME::GraphicsMTRenderer::RenderFinalScene(class GAME::GraphicsScene &)
void GAME::GraphicsCanvas::RenderFrustum3(float,float,class GAME::Frustum const &,class GAME::Color const &,class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::DebugRenderManager::RenderFrustum(class GAME::Region *,class GAME::Frustum const &,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderFrustum(float,float,class GAME::Frustum const &,class GAME::Color const &,class GAME::Vec3 const &)
void GAME::TerrainPatch::RenderGrass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::TerrainRenderInterface::RenderGrass(class GAME::TerrainRenderBatch const *,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &,struct GAME::RenderablePass const &)
void GAME::TerrainRenderInterfaceRT::RenderGrass(class GAME::TerrainRenderBatch const *,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &,struct GAME::RenderablePass const &)
void GAME::TerrainPatch::RenderGround(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::TerrainRenderInterface::RenderGround(class GAME::TerrainRenderBatch const *,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &,struct GAME::RenderablePass const &,bool)
void GAME::TerrainRenderInterfaceRT::RenderGround(class GAME::TerrainRenderBatch const *,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &,struct GAME::RenderablePass const &,bool)
void GAME::TerrainRenderInterface::RenderGroundSolid(class GAME::TerrainRenderBatch const *,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &,struct GAME::RenderablePass const &)
void GAME::TerrainRenderInterfaceRT::RenderGroundSolid(class GAME::TerrainRenderBatch const *,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &,struct GAME::RenderablePass const &)
void GAME::GraphicsMeshInstance::RenderHitBoxes(class GAME::Region *,class GAME::Vec3 const &)
void GAME::GraphicsCanvas::RenderHorizontalGradient(class GAME::Rect const &,class GAME::Color const &,class GAME::Color const &)
void GAME::Terrain::RenderImpassableAreas(class GAME::GraphicsPrimitiveDrawer &,class GAME::Coords const &)
void GAME::ZoneManager::RenderKey(class GAME::GraphicsCanvas &)
void GAME::GridRegion::RenderLattice(int,int,int)
void GAME::GridRegion::RenderLattice(void)
void GAME::DebugRenderManager::RenderLine(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Color const &,class GAME::GraphicsShader2 const *)
void GAME::GraphicsCanvas::RenderLine(class GAME::Vec2 const &,class GAME::Vec2 const &,class GAME::Color const &)
void GAME::DebugRenderManager::RenderLines(class GAME::Region *,class mem::vector<class GAME::Vec3> const &,class GAME::Color const &,class GAME::GraphicsShader2 const *)
void GAME::GraphicsMesh::RenderPaintableFaces(class GAME::RenderDevice *,class GAME::GraphicsShader2 const *)
void GAME::Billboard::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::Decal::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::DecalSet::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::Emitter::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::GraphicsMeshInstance::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::Lightning2::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::LineEffect2::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::LineEffect::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::TerrainPatch::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::TrailEffect::RenderPass(struct GAME::RenderablePass const &,class GAME::Name const &,class GAME::GraphicsCanvas &,class GAME::GraphicsScene const &)
void GAME::ImpassableData::RenderPathMesh(void)
void GAME::Level::RenderPathMeshes(class GAME::GraphicsPrimitiveDrawer &,class GAME::Coords const &)
void GAME::DebugRenderManager::RenderPlane(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,float,class GAME::Color const &)
void GAME::GraphicsMTRenderer::RenderPostEffects(class GAME::Camera const &,class GAME::Region const *,class GAME::Viewport const &)
void GAME::GraphicsMTRenderer::RenderPostObjects(class GAME::GraphicsScene &)
void GAME::GraphicsCanvas::RenderRect(class GAME::Rect const &,class GAME::Rect const &,class GAME::RenderTexture const *,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderRect(class GAME::Rect const &,class GAME::Color const &)
void GAME::GraphicsMTRenderer::RenderReflection(class GAME::GraphicsScene &,struct GAME::LightEntry const *,struct GAME::ReflectionGroup *)
void GAME::GraphicsMTRenderer::RenderScene(class GAME::GraphicsScene &)
unsigned int GAME::GraphicsMTRenderer::RenderScenePasses(class GAME::GraphicsScene &,class mem::vector<struct GAME::RenderablePass> &,int,int,bool,bool,struct GAME::GraphicsMTRenderer::ShaderParamsSetter &)
void GAME::GraphicsCanvas::RenderShadedRect(class GAME::Rect const &,class GAME::Rect const &,class GAME::RenderTexture const *,class GAME::GraphicsShader2 const *,class GAME::Name const &,class GAME::Color const &,float)
void GAME::GraphicsMTRenderer::RenderShadow(struct GAME::LightEntry const *,class GAME::GraphicsScene &)
void GAME::GraphicsMTRenderer::RenderShadowDirectional(struct GAME::LightEntry const *,class GAME::GraphicsScene &)
void GAME::GraphicsMTRenderer::RenderShadowPoint(struct GAME::LightEntry const *,class GAME::GraphicsScene &)
void GAME::DebugRenderManager::RenderSphere(class GAME::Region *,class GAME::Sphere const &,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderSquareRadialWipeEffect(class GAME::Rect const &,class GAME::Vec2 const &,class GAME::Color const &,float)
void GAME::GraphicsCanvas::RenderStyledRect(class GAME::Rect const &,class GAME::Rect const &,class GAME::RenderTexture const *,class GAME::Name const &,class GAME::Color const &,float)
void GAME::GraphicsCanvas::RenderStyledRect(class GAME::Rect const &,class GAME::Name const &,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderText2d(int,int,class GAME::Color const &,class GAME::Color const &,char const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(int,int,class GAME::Color const &,class GAME::Color const &,unsigned short const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(int,int,class GAME::Color const &,char const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(int,int,class GAME::Color const &,unsigned short const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(int,int,char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(int,int,unsigned short const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float,float,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(int,int,unsigned short const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(class GAME::Rect,class GAME::Color const &,class GAME::Color const &,char const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(class GAME::Rect,class GAME::Color const &,class GAME::Color const &,unsigned short const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(class GAME::Rect,class GAME::Color const &,char const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(class GAME::Rect,class GAME::Color const &,unsigned short const *,class GAME::GraphicsFont2 const *,int,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2d(class GAME::Rect,unsigned short const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float,enum GAME::GraphicsXAlign,enum GAME::GraphicsYAlign,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2dBox(int,int,class GAME::Color const &,char const *,class GAME::GraphicsFont2 const *,int,bool,class GAME::Color const *,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2dBox(int,int,class GAME::Color const &,unsigned short const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float,bool,class GAME::Color const *)
void GAME::GraphicsCanvas::RenderText2dBox(int,int,class GAME::Color const &,unsigned short const *,class GAME::GraphicsFont2 const *,int,bool,class GAME::Color const *,enum GAME::FontStyleFlag,enum GAME::FontLayout)
void GAME::GraphicsCanvas::RenderText2dParagraph(int,int,class GAME::Color const &,class GAME::Color const &,class mem::vector<class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
void GAME::GraphicsCanvas::RenderText3d(class GAME::Region const *,class GAME::Camera const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderText3d(class GAME::Region const *,class GAME::Camera const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,float,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Color const &)
void GAME::DebugRenderManager::RenderText(char const *,class GAME::Vec2 const &,class GAME::Color const &)
void GAME::DebugRenderManager::RenderText(char const *,class GAME::Region *,class GAME::Vec3 const &,class GAME::Color const &)
void GAME::DebugRenderManager::RenderThickLine(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,float,class GAME::Color const &,class GAME::Color const &,class GAME::GraphicsShader2 const *)
void GAME::DebugRenderManager::RenderThickLine(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,float,class GAME::Color const &,class GAME::GraphicsShader2 const *)
void GAME::GraphicsMTRenderer::RenderTransparentFeatures(class GAME::GraphicsScene &,class mem::vector<struct GAME::RenderablePass> &)
void GAME::DebugRenderManager::RenderTri(class GAME::Region *,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Vec3 const &,class GAME::Color const &,class GAME::GraphicsShader2 const *)
void GAME::GraphicsCanvas::RenderTriFan(class mem::vector<class GAME::Vec2> const &,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderVerticalGradient(class GAME::Rect const &,class GAME::Color const &,class GAME::Color const &)
void GAME::GraphicsCanvas::RenderWireframeRect(float,float,float,float,float,float,class GAME::Color const &,class GAME::Vec3 const &)
void GAME::ZoneManager::RenderZoneKey(int,int,struct GAME::ZoneManager::ZoneData const &,class GAME::GraphicsCanvas &)
bool GAME::NavManager::RequestAndBlockNearPoint(class GAME::WorldVec3 const &,float,class GAME::WorldVec3 &,float)
bool GAME::NavManager::RequestAndBlockRandomPointInRadius(class GAME::WorldVec3 const &,float,class GAME::WorldVec3 &,float)
bool GAME::NavManager::RequestAndBlockRandomPointOnRadius(class GAME::WorldVec3 const &,float,class GAME::WorldVec3 &,float)
void GAME::AmbianceManager::Reset(void)
void GAME::ColorPulse::Reset(void)
void GAME::Effect::Reset(class GAME::EffectData const *)
void GAME::EffectEntity::Reset(void)
void GAME::Emitter::Reset(class GAME::EmitterData const *)
void GAME::Event::Reset(void)
void GAME::FOWManager::Reset(void)
void GAME::GraphicsMTRenderer::Reset(void)
void GAME::NavMeshBuilder::Reset(void)
void GAME::SkeletalPose::Reset(void)
void GAME::Timer::Reset(void)
void GAME::WeatherManager::Reset(void)
void GAME::AmbianceManager::ResetAmbientMusic(void)
void GAME::AmbianceManager::ResetAmbientSound(void)
bool GAME::RenderDevice::ResetDevice(struct GAME::RenderDeviceSettings const &)
void GAME::Engine::ResetGameTimer(void)
void GAME::NavManager::ResetObject(class GAME::Entity *)
void GAME::WaterObject::ResetReflectionSurface(void)
class GAME::NetworkConnection * GAME::ConnectionManager::ResetServerConnection(enum GAME::NetworkInfrastructureType)
void GAME::GridBase::Resize(int,int,int)
void GAME::GridRegion::Resize(int,int,int)
void GAME::Level::ResizeGrid(int,int,int)
void GAME::Level::ResizeSectorLayers(void)
int GAME::PointDisturbance::ResolveEnum_Mode(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Actor::RestoreBaseTextures(void)
void GAME::Actor::RestoreBumpTextures(void)
void GAME::Actor::RestoreGlowTextures(void)
void GAME::Actor::RestoreMesh(void)
void GAME::Actor::RestoreSpecTextures(void)
void GAME::Actor::RestoreState(class GAME::BinaryReader &,enum GAME::Entity::Restoration)
void GAME::Entity::RestoreState(class GAME::BinaryReader &,enum GAME::Entity::Restoration)
void GAME::GraphicsMeshInstance::RestoreState(class GAME::BinaryReader &)
bool GAME::Level::RestoreState(void const *,unsigned int)
void GAME::RenderDevice::Resume(void)
void GAME::ResourceLoader::Resume(void)
void GAME::SoundStream::Resume(void)
bool GAME::FOWManager::Retrieve(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::FogOfWar &)
void GAME::SoundManager::ReturnInstance(struct GAME::SoundInstance *)
void GAME::IOStreamRead::Rewind(void)
void GAME::IOStreamWrite::Rewind(void)
void GAME::GridRegion::Rotate(void)
class GAME::WorldCoords GAME::WorldCoords::RotateAroundPoint(class GAME::WorldCoords const &,class GAME::WorldVec3 const &,class GAME::Vec3 const &,float)
bool GAME::LuaManager::RunCode(char const *)
unsigned int GAME::NetworkLinkStats::SafeDivide(unsigned int,unsigned int)
void GAME::EffectData::Save(char const *,class GAME::FileSystem *)
void GAME::GridBase::Save(class GAME::BinaryWriter &)
void GAME::GridRegion::Save(class GAME::BinaryWriter &)
void GAME::GridRegionRandom::Save(class GAME::BinaryWriter &)
enum GAME::Image::Error GAME::Image::Save(char const *,enum GAME::Image::FileFormat)
void GAME::ImpassableData::Save(class GAME::BinaryWriter &)
void GAME::InstanceGroup::Save(class GAME::ChunkedBinaryWriter &)
void GAME::InstanceGroupManager::Save(class GAME::ChunkedBinaryWriter &)
bool GAME::Level::Save(char const *,bool)
void GAME::Options::Save(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Region::Save(class GAME::ChunkedBinaryWriter &)
void GAME::SectorDataManager::Save(class GAME::BinaryWriter &)
bool GAME::SectorDataManager::Save(char const *)
void GAME::SectorLayers::Save(class GAME::BinaryWriter &)
void GAME::Terrain::Save(class GAME::BinaryWriter &)
bool GAME::Tracker::Save(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Water::Save(class GAME::BinaryWriter &)
void GAME::WaterLayer::Save(class GAME::BinaryWriter &)
void GAME::WaterPath::Save(class GAME::BinaryWriter &)
void GAME::WaterType::Save(class GAME::BinaryWriter &)
void GAME::WaterWaveSet::Save(class GAME::BinaryWriter &)
bool GAME::World::Save(void)
void GAME::Region::SaveRegionIcon(class GAME::ChunkedBinaryWriter &)
bool GAME::GraphicsEngine::SaveRenderSurface(char const *,enum GAME::Image::FileFormat,class GAME::RenderSurface *)
void GAME::Terrain::SaveRunTimeFormat(class GAME::BinaryWriter &)
bool GAME::Engine::SaveScreenShot(char const *,enum GAME::Image::FileFormat)
bool GAME::GraphicsEngine::SaveScreenShot(char const *,enum GAME::Image::FileFormat)
void GAME::Actor::SaveState(class GAME::BinaryWriter &)
void GAME::Entity::SaveState(class GAME::BinaryWriter &)
void GAME::GraphicsMeshInstance::SaveState(class GAME::BinaryWriter &)
bool GAME::Level::SaveState(class GAME::BinaryWriter *)
void GAME::WaterLayer::SaveToMap(unsigned char *)
void GAME::TrailEffect::ScaleSegments(int)
__int64 GAME::WinWindow::ScreenSaverWindowProc(struct HWND__ *,unsigned int,unsigned __int64,__int64)
float & GAME::WaterType::ScrollSpeed(void)
float GAME::WaterType::ScrollSpeed(void)
void GAME::NetworkServerBrowser::ScrubServerList(void)
void GAME::RandomUniformLocked::Seed(unsigned int)
void GAME::WeatherManager::SelectClimateChoice(int,float)
class GAME::WaterCurve * GAME::Water::SelectCurve(class GAME::Ray const &,enum GAME::WaterCurve::SelectionType &,class GAME::WorldCoords const &)
enum GAME::WaterCurve::SelectionType GAME::WaterCurve::SelectPoint(class GAME::Ray const &,class GAME::WorldCoords const &)
void GAME::EventManager::Send(struct GAME::GameEvent const *,unsigned int)
int GAME::Socket::Send(char const *,int,int,bool)
void GAME::Actor::SendCameraShakeEvent(int,float)
void GAME::ClientNetworkShim::SendCharacterAction(class GAME::CharacterAction *)
void GAME::NetworkShim::SendCharacterAction(class GAME::CharacterAction *)
void GAME::ServerNetworkShim::SendCharacterAction(class GAME::CharacterAction *)
void GAME::StubNetworkShim::SendCharacterAction(class GAME::CharacterAction *)
void GAME::ClientNetworkShim::SendConfigCommand(class GAME::ActorConfigCommand *)
void GAME::NetworkShim::SendConfigCommand(class GAME::ActorConfigCommand *)
void GAME::ServerNetworkShim::SendConfigCommand(class GAME::ActorConfigCommand *)
void GAME::StubNetworkShim::SendConfigCommand(class GAME::ActorConfigCommand *)
bool GAME::ConnectionManager::SendControlPacket(class GAME::Socket *,class GAME::NetworkAddress const &,class GAME::NetPacket &)
bool GAME::ConnectionManager::SendControlPackets(class GAME::NetworkAddress const &,class GAME::NetPacket &)
bool GAME::ClientConnectionManager::SendPacket(class GAME::NetPacket &)
bool GAME::ConnectionManager::SendPacket(class GAME::NetPacket &)
bool GAME::ServerConnectionManager::SendPacket(class GAME::NetPacket &)
bool GAME::StubConnectionManager::SendPacket(class GAME::NetPacket &)
bool GAME::ClientConnectionManager::SendPacketToGroup(class GAME::NetPacket &,class mem::vector<unsigned int> const &)
bool GAME::ConnectionManager::SendPacketToGroup(class GAME::NetPacket &,class mem::vector<unsigned int> const &)
bool GAME::ServerConnectionManager::SendPacketToGroup(class GAME::NetPacket &,class mem::vector<unsigned int> const &)
bool GAME::StubConnectionManager::SendPacketToGroup(class GAME::NetPacket &,class mem::vector<unsigned int> const &)
bool GAME::ConnectionManager::SendPacketToHost(class GAME::NetPacket &,int)
bool GAME::ServerConnectionManager::SendPacketToHost(class GAME::NetPacket &,int)
bool GAME::StubConnectionManager::SendPacketToHost(class GAME::NetPacket &,int)
bool GAME::ClientConnectionManager::SendPacketToServer(class GAME::NetPacket &)
bool GAME::ConnectionManager::SendPacketToServer(class GAME::NetPacket &)
bool GAME::ServerConnectionManager::SendPacketToServer(class GAME::NetPacket &)
bool GAME::StubConnectionManager::SendPacketToServer(class GAME::NetPacket &)
void GAME::CharacterActionPacket::Serialize(class GAME::NetPacketOutBuffer &)
void GAME::LoadTable::Serialize(struct _iobuf *)
void GAME::LoadTableBinary::Serialize(struct _iobuf *)
unsigned char const * GAME::NetPacketHeader::Serialize(bool)
void GAME::Serializer::Serialize(class GAME::LoadTable const &,class GAME::BinaryWriter *,bool)
void GAME::NetworkServerBrowser::ServerListUpdateComplete(void)
bool GAME::RouterServices::ServicesAvailable(void)
bool GAME::RouterServices::ServicesEnabled(void)
void GAME::Sound::Set3dPosition(float,float,float)
void GAME::InternalParam::Set(int)
void GAME::InternalParam::Set(float)
bool GAME::InternalParam::Set(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> >)
void GAME::WorldCamera::SetAcceleration(float)
void GAME::SteamControllerDevice::SetActionSet(unsigned int)
void GAME::GraphicsMTRenderer::SetAmbientOcclusionEnabled(bool)
void GAME::ChaosBeam::SetAmpScale(float)
void GAME::Effect::SetAnchor1(class GAME::WorldVec3 const &)
void GAME::EffectEntity::SetAnchor1(class GAME::WorldVec3 const &)
void GAME::Emitter::SetAnchor1(class GAME::WorldVec3 const &)
void GAME::Effect::SetAnchor2(class GAME::WorldVec3 const &)
void GAME::EffectEntity::SetAnchor2(class GAME::WorldVec3 const &)
void GAME::Emitter::SetAnchor2(class GAME::WorldVec3 const &)
void GAME::TrailEffect::SetAnchorPoints(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
void GAME::Effect::SetAnchored(bool)
void GAME::EffectEntity::SetAnchored(bool)
void GAME::Emitter::SetAnchored(bool)
void GAME::Actor::SetAnimationSpeedMultiplier(int,float)
void GAME::Engine::SetAreaNameTag(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Engine::SetAsNetworkClient(void)
void GAME::Engine::SetAsNetworkServer(bool)
void GAME::Engine::SetAsNetworkStub(void)
void GAME::Engine::SetAssertHandlerLogPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Entity::SetAttachOffset(class GAME::Coords const &)
void GAME::GameInfo::SetAutoParty(bool)
void GAME::TrailEffect::SetBBox(class GAME::ABBox const &)
void GAME::GraphicsMTRenderer::SetBackgroundMode(enum GAME::GraphicsMTRenderer::BackgroundMode,class GAME::Color const &,class GAME::Color const &)
void GAME::GraphicsMTRenderer::SetBackgroundTexture(class GAME::GraphicsTexture const *)
void GAME::Terrain::SetBaseHeight(unsigned int,unsigned int,float)
void GAME::Actor::SetBaseTexture(char const *)
void GAME::GraphicsMeshInstance::SetBaseTexture(char const *)
void GAME::GraphicsMeshInstance::SetBaseTexture(char const *,unsigned int)
void GAME::Engine::SetBaseUserPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::SkeletalPose::SetBone(class GAME::Name const &,struct GAME::SkeletalPose::AffineParts const &)
void GAME::SkeletalPose::SetBoneCoords(class GAME::Name const &,class GAME::Coords const &)
void GAME::Effect::SetBoneList(class mem::vector<struct GAME::EmitterBone> &)
void GAME::GraphicsMeshInstance::SetBoneTransparancies(class mem::vector<float> const &)
void GAME::Options::SetBool(enum GAME::Options::BoolName,bool)
void GAME::EffectData::SetBoolean(int,int,bool)
void GAME::EmitterData::SetBoolean(int,bool)
void GAME::Effect::SetBoundingBox(class GAME::ABBox const &)
void GAME::Emitter::SetBoundingBox(class GAME::ABBox const &)
void GAME::ImpassableData::SetBoundingBox(class GAME::ABBox const &)
void GAME::NetworkServerBrowser::SetBrowsingMode(enum GAME::NETWORK_BROWSING_MODE)
void GAME::Actor::SetBumpTexture(char const *)
void GAME::GraphicsMeshInstance::SetBumpTexture(char const *)
void GAME::GraphicsMeshInstance::SetBumpTexture(char const *,unsigned int)
void GAME::Engine::SetCDKey(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsPrimitiveDrawer::SetCamera(class GAME::Region const *,class GAME::Camera const &,class GAME::Viewport const &)
void GAME::Camera::SetCameraAspect(float)
void GAME::WorldCamera::SetCameraDistance(float)
void GAME::WorldCamera::SetCameraDistanceDefault(float)
void GAME::WorldCamera::SetCameraFOV(float)
void GAME::WorldCamera::SetCameraFarPlane(float)
void GAME::SoundManager::SetCameraLerp(float)
void GAME::WorldCamera::SetCameraNearPlane(float)
void GAME::WorldCamera::SetCameraPitch(float)
void GAME::WorldCamera::SetCameraPitchDefault(float)
void GAME::GraphicsMTRenderer::SetCameraTarget(class GAME::WorldVec3 const &)
void GAME::WorldCamera::SetCameraYaw(float)
void GAME::Effect::SetCanBeSoft(bool)
void GAME::Emitter::SetCanBeSoft(bool)
void GAME::HwndWindow::SetCaption(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::WinWindow::SetCaption(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Actor::SetCastsShadows(bool)
void GAME::GraphicsLight::SetCastsShadows(bool)
void GAME::GraphicsMeshInstance::SetCastsShadows(bool)
void GAME::Portal::SetCastsShadows(bool)
void GAME::GraphicsLight::SetCastsSpecular(bool)
void GAME::GridRegion::SetCellFeature(int,int,int,signed char,signed char)
void GAME::GridRegion::SetCellFloor(int,int,int,signed char)
void GAME::GridRegion::SetCellVariation(int,int,int,int)
void GAME::GameInfo::SetChallenge(unsigned int)
void GAME::GraphicsCanvas::SetClearColor(class GAME::Color const &)
void GAME::GraphicsMTRenderer::SetClearFlags(unsigned int)
void GAME::ServerConnectionManager::SetClientTagHasAuthKey(int,class mem::vector<unsigned char> const &)
void GAME::GraphicsCanvas::SetClippingPlane(int,class GAME::Plane const &)
void GAME::GraphicsCanvas::SetClippingRect(class GAME::Rect const &,bool)
void GAME::ImpassableData::SetCollisionBuffer(int,char *,int)
void GAME::CurveData::SetColor(enum GAME::PSColor)
void GAME::GraphicsLight::SetColor(class GAME::Color const &)
void GAME::GraphicsPrimitiveDrawer::SetColor(class GAME::Color const &)
void GAME::Light::SetColor(class GAME::Color const &)
void GAME::Lightning2::SetColor(class GAME::Color const &)
void GAME::LineEffect2::SetColor(class GAME::Color const &)
void GAME::ColorPulse::SetColorA(class GAME::Color const &)
void GAME::ColorPulse::SetColorB(class GAME::Color const &)
void GAME::Portal::SetConnectedPortalId(class GAME::UniqueId const &)
void GAME::Portal::SetConnectedRegionId(class GAME::RegionId const &)
void GAME::Engine::SetControllerDebugging(bool)
void GAME::Camera::SetCoords(class GAME::Coords const &)
void GAME::Entity::SetCoords(class GAME::WorldCoords const &)
void GAME::Portal::SetCoords(class GAME::Coords const &)
void GAME::TerrainPatch::SetCoords(class GAME::WorldCoords const &)
void GAME::TransformGizmo::SetCoords(class GAME::Coords const &)
void GAME::World::SetCoords(class GAME::Entity *,class GAME::WorldCoords const &)
void GAME::SectorDataManager::SetCurrentLayer(int)
void GAME::HwndWindow::SetCursor(void *)
void GAME::WinWindow::SetCursor(void *)
void GAME::DayNightCycle::SetDayTime(float)
class GAME::GraphicsShader2 const * GAME::GraphicsMeshInstance::SetDbrOverrideShader(char const *)
void GAME::GraphicsMeshInstance::SetDbrShader(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::AmbianceManager::SetDebug(bool)
void GAME::Jukebox::SetDebug(bool)
void GAME::NavManager::SetDebug(bool)
void GAME::PhysicsEngine2::SetDebug(bool)
void GAME::WeatherManager::SetDebug(bool)
void GAME::EmitterData::SetDebugLines(bool)
void GAME::NavManager::SetDebugReason(char const *)
void GAME::DayNightCycle::SetDefault(void)
void GAME::SoundDescriptor::SetDefault(void)
void GAME::TrailEffect::SetDefaultAnchors(void)
void GAME::ColorPulse::SetDefaultColor(class GAME::Color const &)
void GAME::NavManager::SetDefaultConfig(void)
void GAME::Engine::SetDefaultSettingsPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Engine::SetDefaultShadowBias(float)
void GAME::GraphicsCanvas::SetDefaultState(void)
void GAME::WaterType::SetDefaultValues(void)
void GAME::Engine::SetDeferredRenderer(bool)
void GAME::GraphicsCanvas::SetDeferredRendering(bool)
void GAME::GMIEffectIcey::SetDeflateRate(float)
void GAME::ColorPulse::SetDelayTime(int)
void GAME::AmbianceManager::SetDepthFogClamp(float)
void GAME::AmbianceManager::SetDepthFogClamping(bool)
void GAME::GraphicsMTRenderer::SetDepthFogParams(class GAME::Vec3 const &)
void GAME::GraphicsMTRenderer::SetDepthOfFieldEnabled(bool)
void GAME::GraphicsMTRenderer::SetDepthPassEnabled(bool)
void GAME::GraphicsCanvas::SetDepthTarget(class GAME::RenderSurface *)
void GAME::Actor::SetDescriptionVisible(bool)
void GAME::Options::SetDevice(enum GAME::Options::Device)
void GAME::Engine::SetDeviceLost(void)
void GAME::GameInfo::SetDifficulty(unsigned int)
void GAME::GraphicsMeshInstance::SetDiffuseColor(class GAME::Color const &)
void GAME::Name::SetDigest(unsigned int)
void GAME::GraphicsEngine::SetDirectoryTextureReduction(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)
void GAME::FogOfWar::SetDirty(void)
void GAME::GraphicsEngine::SetDisplay(class GAME::Display const *)
void GAME::CurveData::SetDomain(float)
void GAME::EmitterData::SetDropDecalName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Engine::SetDumpPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Decal::SetDynamic(bool)
void GAME::EffectEntity::SetDynamicLines(class mem::vector<struct GAME::SimpleSeg> const &,class mem::vector<bool> const &)
void GAME::Entity::SetDynamicObstacle(bool)
void GAME::SoundManager::SetEarsOrientation(class GAME::Vec3 const &,class GAME::Vec3 const &)
void GAME::SoundManager::SetEarsPosition(class GAME::WorldVec3 const &)
void GAME::Engine::SetEditorMode(bool)
void GAME::Effect::SetEditorRegion(class GAME::Region *)
void GAME::Emitter::SetEditorRegion(class GAME::Region *)
void GAME::EffectEntity::SetEffectScale(float)
void GAME::EmitterData::SetEnabled(bool)
void GAME::SaveManager::SetEnabled(bool)
void GAME::WeatherManager::SetEnabled(bool)
void GAME::Lightning2::SetEnd(class GAME::WorldVec3 const &)
void GAME::LineEffect2::SetEnd(class GAME::WorldVec3 const &)
void GAME::ChaosBeam::SetEndPoints(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &)
void GAME::InternalParam::SetEndPos(unsigned int)
void GAME::AnimChannel::SetEntity(int,class GAME::Entity *)
void GAME::ConnectionManager::SetEntityList(class GAME::NetworkEntityList *)
void GAME::Engine::SetEntityRenderFilter(class GAME::FilterFunction<class GAME::Entity> *)
void GAME::GameInfo::SetEventInProgress(bool)
void GAME::FFDGizmo::SetFFDAmplitude(float)
void GAME::FFDGizmo::SetFFDBasePoint(int,class GAME::Vec3 const &)
void GAME::FFDGizmo::SetFFDControlPoint(int,class GAME::Vec3 const &)
void GAME::FFDGizmo::SetFFDDefault(class GAME::ABBox const &)
void GAME::FFDGizmo::SetFFDExponent(float)
void GAME::FFDGizmo::SetFFDFrequency(float)
void GAME::Camera::SetFOV(float)
void GAME::GraphicsMTRenderer::SetFXAAEnabled(bool)
void GAME::NavMesh::SetFaceData(unsigned char const *,unsigned int,bool)
void GAME::Sound::SetFalloffDistances(float,float)
void GAME::Camera::SetFarPlane(float)
void GAME::Actor::SetFellFaceDown(bool)
void GAME::World::SetFileName(char const *)
void GAME::Engine::SetFileSystem(class GAME::FileSystem *)
void GAME::EditorFilter::SetFilter(enum GAME::EditorFilter::EditorFilterType,bool)
void GAME::EditorFilter::SetFilterAll(void)
void GAME::EditorFilter::SetFilterNone(void)
void GAME::Sound::SetFinished(void)
void GAME::CurveData::SetFirstLastY(float,float)
bool GAME::GraphicsShader2::SetFloat2(class GAME::Name const &,unsigned int,class GAME::Vec2 const &)
bool GAME::GraphicsShader2::SetFloat2(class GAME::Name const &,unsigned int,float const * const)
bool GAME::GraphicsShader2::SetFloat3(class GAME::Name const &,unsigned int,class GAME::Color const &)
bool GAME::GraphicsShader2::SetFloat3(class GAME::Name const &,unsigned int,class GAME::Vec3 const &)
bool GAME::GraphicsShader2::SetFloat3(class GAME::Name const &,unsigned int,float const * const)
bool GAME::GraphicsShader2::SetFloat4(class GAME::Name const &,unsigned int,float const * const)
bool GAME::GraphicsShader2::SetFloat4x3(class GAME::Name const &,unsigned int,class GAME::Coords const &)
bool GAME::GraphicsShader2::SetFloat4x3(class GAME::Name const &,unsigned int,float const * const)
bool GAME::GraphicsShader2::SetFloat4x4(class GAME::Name const &,unsigned int,class GAME::Mat4 const &)
bool GAME::GraphicsShader2::SetFloat4x4(class GAME::Name const &,unsigned int,float const * const)
void GAME::EffectData::SetFloat(int,int,float)
void GAME::EmitterData::SetFloat(int,float)
bool GAME::GraphicsShader2::SetFloat(class GAME::Name const &,unsigned int,float)
void GAME::Options::SetFloat(enum GAME::Options::FloatName,float)
void GAME::GraphicsMTRenderer::SetFogColor(class GAME::Color const &)
void GAME::GraphicsMTRenderer::SetFogEnabled(bool)
void GAME::DebugRenderManager::SetFont(class GAME::GraphicsFont2 const *)
void GAME::Engine::SetFontDebugging(bool)
void GAME::Light::SetForceShadows(bool)
void GAME::Lightning2::SetFromSky(bool)
bool GAME::WorldVec3::SetFromWorldPosition(class GAME::Vec3 const &,class GAME::Region *)
void GAME::GraphicsScene::SetFrustum(class GAME::Frustum const &)
void GAME::RegionLoader::SetFrustum(class GAME::WorldFrustum const &)
void GAME::Engine::SetFxQualityModifier(enum GAME::Options::Quality)
void GAME::GameInfo::SetGameName(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
void GAME::GameInfo::SetGameNameFromStr(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GameInfo::SetGameStartTime(unsigned int)
void GAME::HwndWindow::SetGammaRamp(void const *)
void GAME::WinWindow::SetGammaRamp(void const *)
void GAME::GameInfo::SetGender(bool)
void GAME::GraphicsEngine::SetGeneration(char const *)
void GAME::GraphicsEngine::SetGeneration(enum GAME::RenderGenerationId)
void GAME::GraphicsMeshInstance::SetGlobalBlendAlphaMultiplier(float)
void GAME::SoundManager::SetGlobalReverbType(int)
void GAME::Actor::SetGlowTexture(char const *)
void GAME::GraphicsMeshInstance::SetGlowTexture(char const *)
void GAME::GraphicsMeshInstance::SetGlowTexture(char const *,unsigned int)
void GAME::TerrainType::SetGrassShaderParams(class GAME::GraphicsShader2 const *)
void GAME::Entity::SetGravityEnabled(bool)
void GAME::TransformGizmo::SetGridSpacing(class GAME::Vec3 const &)
void GAME::GraphicsMTRenderer::SetGroundAmbientColor(class GAME::Color const &)
void GAME::CurveData::SetHalfGraph(bool)
void GAME::GameInfo::SetHardcore(bool)
void GAME::Camera::SetHeight(float)
void GAME::ImpassableData::SetHeight(int,int,int)
void GAME::SectorLayers::SetHeightCallbacks(class GAME::TerrainBase *,class GAME::GridBase *)
void GAME::GraphicsMTRenderer::SetHeightFogParams(class GAME::Vec3 const &)
void GAME::GridRegion::SetHighestVisibleFloor(int)
void GAME::Actor::SetHighlight(bool)
void GAME::GraphicsMeshInstance::SetHighlight(float)
void GAME::NetPacket::SetHostID(int)
void GAME::GraphicsLight::SetId(unsigned int)
void GAME::Portal::SetId(class GAME::UniqueId const &)
void GAME::Region::SetId(class GAME::RegionId const &)
void GAME::Engine::SetIdle(bool)
void GAME::GraphicsMeshInstance::SetIgnoreLightShadows(unsigned int)
void GAME::ImpassableData::SetImpassable(int,int,bool)
void GAME::Terrain::SetImpassableData(class GAME::ImpassableData const &)
void GAME::Entity::SetInRenderPreLoadFrustum(void)
void GAME::InternalParam::SetIndex(unsigned int)
void GAME::NavMesh::SetIndexData(int const *,unsigned int,bool)
void GAME::Resource::SetInitResult(enum GAME::Resource::InitResult)
void GAME::GameInfo::SetInstancedLoot(bool)
void GAME::Options::SetInt2(enum GAME::Options::Int2Name,struct GAME::Options::Int2 const &)
bool GAME::GraphicsShader2::SetInt(class GAME::Name const &,unsigned int,int)
void GAME::Options::SetInt(enum GAME::Options::IntName,int)
void GAME::Tracker::SetInt(char const *,char const *,int)
void GAME::Tracker::SetInt(char const *,char const *,int,bool)
void GAME::EffectData::SetInteger(int,int,int)
void GAME::EmitterData::SetInteger(int,int)
void GAME::Light::SetIntensity(float)
void GAME::ImpassableData::SetInvisible(int,int,bool)
void GAME::Terrain::SetInvisible(int,int,bool)
void GAME::GameInfo::SetIsBackup(bool)
void GAME::GameInfo::SetIsMultiPlayer(bool)
void GAME::Portal::SetIsOpen(bool)
void GAME::GameInfo::SetIsServer(bool)
void GAME::GameInfo::SetJoinedGameIsPvP(bool)
void GAME::Engine::SetKeymapPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Options::SetLanguageOptionsToSystemDefaults(void)
void GAME::GridRegion::SetLatticeValue(int,int,int,signed char)
void GAME::Terrain::SetLayerOpacity(unsigned int,unsigned int,unsigned int,unsigned char)
void GAME::Terrain::SetLayerTerrainType(unsigned int,char const *)
void GAME::Region::SetLevel(class GAME::Level *)
void GAME::GameInfo::SetLevelName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GameInfo::SetLevelName(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
void GAME::GameInfo::SetLevelRange(unsigned int)
void GAME::Effect::SetLightMultiplier(float)
void GAME::Emitter::SetLightMultiplier(float)
void GAME::GraphicsMTRenderer::SetLightRigsEnabled(bool)
void GAME::DayNightCycle::SetLightSetupGroundColor(unsigned int,class GAME::Color const &)
void GAME::DayNightCycle::SetLightSetupLightColor(unsigned int,class GAME::Color const &)
void GAME::DayNightCycle::SetLightSetupSkyColor(unsigned int,class GAME::Color const &)
unsigned int GAME::DayNightCycle::SetLightSetupTime(unsigned int,float)
void GAME::GraphicsMTRenderer::SetLightingEnabled(bool)
void GAME::AmbianceManager::SetLightingTransformAngle(float)
void GAME::Engine::SetLightrigSpec(bool)
void GAME::WorldCamera::SetListenerPosition(void)
void GAME::Resource::SetLoadedState(enum GAME::Resource::LoadState)
void GAME::Portal::SetLocalChokePoint(class GAME::Coords const &)
void GAME::GameInfo::SetLocalMapPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Effect::SetLocalOrientFix(bool)
void GAME::Emitter::SetLocalOrientFix(bool)
void GAME::DebugRenderManager::SetLocalRegion(class GAME::Region *)
void GAME::Engine::SetLogPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::CurveData::SetLoop(bool)
void GAME::EffectData::SetLoop(int,bool)
void GAME::EmitterData::SetLoop(bool)
void GAME::Sound::SetLoopCount(int)
void GAME::TrailEffect::SetLowEfficiencyMode(void)
void GAME::Engine::SetLuaGlueLogging(bool)
void GAME::Engine::SetMapRendering(bool)
void GAME::SoundManager::SetMasterVolume(float)
void GAME::Decal::SetMaxAngle(float)
void GAME::GraphicsMeshInstance::SetMaxGlobalBlendAlphaMultiplier(float)
void GAME::ConnectionManager::SetMaxHosts(unsigned int)
void GAME::GameInfo::SetMaxPlayers(unsigned int)
void GAME::BaseResourceManager::SetMemoryBudget(unsigned int)
void GAME::Actor::SetMesh(char const *)
void GAME::GraphicsMeshInstance::SetMesh(char const *)
void GAME::GraphicsMeshInstance::SetMesh(class GAME::GraphicsMesh const *)
void GAME::Region::SetMinimapData(unsigned int,unsigned int)
void GAME::GameInfo::SetModName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GameInfo::SetModName(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
void GAME::GameInfo::SetMode(unsigned int)
void GAME::TransformGizmo::SetMode(enum GAME::TransformGizmo::Mode)
void GAME::DayNightCycle::SetMoonAzimuth(float)
void GAME::DayNightCycle::SetMoonMinAngle(float)
void GAME::Entity::SetMotion(class GAME::Vec3 const &)
void GAME::GraphicsCanvas::SetMultithreaded(bool)
void GAME::GraphicsMTRenderer::SetMultithreaded(bool)
void GAME::Engine::SetMultithreadedRendering(bool)
void GAME::GraphicsMTRenderer::SetMultithreadingAllowed(bool)
void GAME::EffectData::SetName(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::InstanceGroup::SetName(char const *)
void GAME::Region::SetName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Camera::SetNearPlane(float)
void GAME::NoiseTexture::SetNeedsUpdate(bool)
void GAME::Engine::SetNetPacketCreator(class GAME::NetworkPacketCreatorBase *)
void GAME::NetPacket::SetNetPacketCreator(class GAME::NetworkPacketCreatorBase *)
void GAME::Engine::SetNetworkController(class GAME::NetworkControllerBase *)
void GAME::ConnectionManager::SetNetworkLogging(bool)
void GAME::Engine::SetNetworkLogging(bool)
void GAME::Socket::SetNetworkLogging(bool)
void GAME::ConnectionManager::SetNetworkStatisticsGathering(bool)
void GAME::Engine::SetNetworkStats(bool)
void GAME::NetworkShim::SetNetworkStats(bool)
void GAME::DayNightCycle::SetNightTime(float)
void GAME::Engine::SetNormalSettingsPath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ChaosBeam::SetNumBeams(int)
void GAME::GameInfo::SetNumOfPlayers(unsigned int)
void GAME::World::SetNumQuestFiles(unsigned int)
void GAME::Entity::SetNumUpdates(unsigned int)
void GAME::Terrain::SetNumXSamples(int)
void GAME::Terrain::SetNumYSamples(int)
void GAME::Object::SetObjectId(unsigned int)
void GAME::Object::SetObjectName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Actor::SetObjectSpacePose(class GAME::SkeletalPose const &)
void GAME::GraphicsMeshInstance::SetObjectToRegionCoords(class GAME::Coords const &)
void GAME::GraphicsLight::SetObjectToWorldCoords(class GAME::WorldCoords const &)
void GAME::ChaosBeam::SetOffset(int)
void GAME::ImpassableData::SetOffset(class GAME::IntVec3 const &)
void GAME::Billboard::SetOffsetFromOrigin(class GAME::Vec3 const &)
void GAME::Region::SetOffsetFromWorld(class GAME::IntVec3 const &)
void GAME::TerrainPatch::SetOpacity(int,int,int,int,int,unsigned char *)
void GAME::GraphicsEngine::SetOptimizationTest(bool)
void GAME::GraphicsEngine::SetOptionsToDefaults(class GAME::Options *)
void GAME::WorldCoords::SetOrigin(class GAME::WorldVec3 const &)
void GAME::Actor::SetOutlineColor(class GAME::Color const &)
void GAME::GraphicsMeshInstance::SetOutlineColor(class GAME::Color const &)
void GAME::GraphicsMeshInstance::SetOutlineThickness(float)
void GAME::GraphicsMeshInstance::SetOutlined(bool)
class GAME::GraphicsShader2 const * GAME::GraphicsMeshInstance::SetOverrideShader(char const *)
void GAME::Entity::SetOwner(unsigned int)
void GAME::Engine::SetPSEditorMode(void)
void GAME::ObjectManager::SetPanicThresholdAndRate(unsigned int,unsigned int)
void GAME::Effect::SetParentEntity(class GAME::EffectEntity *)
void GAME::Emitter::SetParentEntity(class GAME::EffectEntity *)
void GAME::Actor::SetParentLevel(unsigned int)
void GAME::Terrain::SetPassable(unsigned int,unsigned int,unsigned char)
void GAME::GameInfo::SetPassword(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
void GAME::ImpassableData::SetPathBuffer(int,char *,int)
void GAME::Engine::SetPathMeshErrorBuffer(class GAME::PathMeshErrorBuffer *)
void GAME::Effect::SetPause(bool)
void GAME::Emitter::SetPause(bool)
void GAME::LineEffect::SetPause(bool)
void GAME::PhysicsEngine2::SetPaused(bool)
void GAME::ImpassableData::SetPhysicsFaceData(int,int,int,class mem::vector<struct GAME::ImpassableData::PassableFace> const &)
void GAME::ImpassableData::SetPhysicsOffsetToWorldCoords(int,int,int,class GAME::Coords const &)
void GAME::Entity::SetPhysicsSimulation(enum GAME::PhysicsSimulation)
void GAME::Sound::SetPlaybackRate(int)
void GAME::GameInfo::SetPlayerInfo(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<class GAME::GameInfoAttachedInventoryItem> const &,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GameInfo::SetPlayerInfo(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class mem::vector<class GAME::GameInfoAttachedInventoryItem> const &,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GameInfo::SetPlayerLevel(unsigned int)
void GAME::World::SetPlayerSpawnPoint(class GAME::WorldCoords const &)
void GAME::WeaponTrail::SetPointSetIndex(int)
void GAME::IPVNetworkAddress::SetPort(unsigned short)
void GAME::Actor::SetPose(class GAME::SkeletalPose const &)
void GAME::GraphicsMeshInstance::SetPoseFromObjectSpace(class GAME::SkeletalPose const &)
void GAME::GraphicsMeshInstance::SetPoseFromObjectSpace(class GAME::SkeletalPose const &,class GAME::Coords const &)
void GAME::GraphicsMTRenderer::SetPostEffectsEnabled(bool)
void GAME::GraphicsCanvas::SetPrimarySurface(class GAME::RenderSurface *)
void GAME::Tracker::SetProperty(char const *,char const *,class GAME::TrackerProperty *)
void GAME::ColorPulse::SetPulseTime(int)
void GAME::GameInfo::SetPvP(bool)
void GAME::Options::SetQuality(enum GAME::Options::QualityName,enum GAME::Options::Quality)
void GAME::World::SetQuestFile(unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsLight::SetRadius(float)
void GAME::Light::SetRadius(float)
void GAME::CurveData::SetRange(float)
void GAME::GraphicsScene::SetReady(void)
void GAME::NetPacket::SetReceiveBuffer(unsigned char *,unsigned int)
void GAME::GraphicsMTRenderer::SetReflectionsEnabled(bool)
void GAME::GraphicsPrimitiveDrawer::SetRegion(class GAME::Region const *)
void GAME::ImpassableData::SetRegion(class GAME::Region *)
void GAME::Portal::SetRegion(class GAME::Region *)
void GAME::Entity::SetRegionBoundingBox(class GAME::ABBox const &,bool)
void GAME::WorldCamera::SetRegionCamera(class GAME::Camera const &)
void GAME::ImpassableData::SetRegionHint(int)
void GAME::World::SetRegionLoaded(class GAME::Region const *,bool)
void GAME::World::SetRegionName(int,char const *)
void GAME::Engine::SetRegionOfNote(class GAME::Region *)
void GAME::GraphicsScene::SetRegionToSceneCoords(class GAME::Region *,class GAME::Coords const &)
void GAME::GraphicsScene::SetRenderFlags(enum GAME::RenderFlag)
void GAME::GraphicsCanvas::SetRenderTarget(int,class GAME::RenderSurface *)
void GAME::GraphicsScene::SetRendered(void)
void GAME::GraphicsScene::SetRendering(void)
void GAME::SmartObjectId::SetReplicationResult(bool)
void GAME::GraphicsCanvas::SetResolution(int,int)
void GAME::GraphicsEngine::SetResolution(unsigned int,unsigned int)
void GAME::GraphicsCanvas::SetResolutionAdjustment(float,float)
void GAME::Resource::SetResourceLoader(class GAME::ResourceLoader *)
void GAME::Entity::SetRestored(bool)
void GAME::Engine::SetRunningCharacterImport(bool)
void GAME::Engine::SetRunningGameSimulation(bool)
void GAME::Engine::SetSSAOParams(float,float)
void GAME::Engine::SetSavePath(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Entity::SetSaveState(bool)
void GAME::EffectEntity::SetSavedByEditor(bool)
void GAME::Actor::SetScale(class GAME::Vec3 const &)
void GAME::Actor::SetScale(float)
void GAME::Effect::SetScale(float)
void GAME::EffectEntity::SetScale(float)
void GAME::Emitter::SetScale(float)
void GAME::GraphicsMeshInstance::SetScale(class GAME::Vec3 const &)
void GAME::GraphicsScene::SetSceneType(enum GAME::GraphicsScene::SceneType)
void GAME::GraphicsMeshInstance::SetSectionOpacity(float,unsigned int)
void GAME::SectorDataManager::SetSectorData(unsigned int,unsigned int,class GAME::SectorData *)
void GAME::EffectEntity::SetSelfRemove(bool)
void GAME::SoundEntity::SetSelfRemove(bool)
void GAME::NetworkServerBrowser::SetServerListTimeout(int)
void GAME::Billboard::SetShader(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsPrimitiveDrawer::SetShader(class GAME::GraphicsShader2 const *)
void GAME::GraphicsPrimitiveDrawer::SetShader(class GAME::GraphicsShader2 const *,class GAME::Name const &)
void GAME::LineEffect::SetShader(char const *)
void GAME::EmitterData::SetShaderName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::FFDGizmo::SetShaderParameters(class GAME::GraphicsShader2 const *)
void GAME::GMIEffect::SetShaderParameters(class GAME::GraphicsShader2 const *)
void GAME::GMIEffectIcey::SetShaderParameters(class GAME::GraphicsShader2 const *)
void GAME::GraphicsMesh::SetShaderParameters(class GAME::GraphicsShader2 const *,int)
void GAME::GraphicsMeshInstance::SetShaderParameters(class GAME::GraphicsShader2 const *,int,int,class GAME::GraphicsMesh::MeshRenderInfo const &)
void GAME::NoiseTexture::SetShaderParams(class GAME::GraphicsShader2 const *,class GAME::RenderTexture * *,int)
void GAME::TerrainType::SetShaderParams(class GAME::GraphicsShader2 const *,int)
void GAME::WaterType::SetShaderParams(class GAME::IntVec3 const &)
void GAME::GraphicsMTRenderer::SetShaderParamsForScene(class GAME::GraphicsScene const &,class GAME::GraphicsShader2 const *,struct GAME::LightEntry const *)
void GAME::GraphicsMTRenderer::SetShaderParamsForShadow(class GAME::GraphicsScene const &,class GAME::GraphicsShader2 const *,struct GAME::LightEntry const *)
void GAME::GraphicsMeshInstance::SetShadowBias(float)
void GAME::GraphicsEngine::SetShadowDebugging(bool)
void GAME::GraphicsLight::SetShadowIntensity(float)
void GAME::GraphicsLight::SetShadowPriority(int)
void GAME::Light::SetShadowPriority(int)
void GAME::GraphicsMTRenderer::SetShadowSoftness(float)
void GAME::World::SetShadowSoftness(float)
void GAME::GraphicsMTRenderer::SetShadowsEnabled(bool)
void GAME::Entity::SetShouldServerSpawn(bool)
void GAME::GraphicsMTRenderer::SetShowLights(bool)
void GAME::Region::SetShrineRecord(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Event::SetSignaled(void)
void GAME::Light::SetSimpleMode(bool)
void GAME::HwndWindow::SetSize(int,int,enum GAME::EWindow::Style)
void GAME::TransformGizmo::SetSize(float)
void GAME::WinWindow::SetSize(int,int,enum GAME::EWindow::Style)
void GAME::GraphicsMeshInstance::SetSkeletalPose(class GAME::SkeletalPose const &)
void GAME::GraphicsMTRenderer::SetSkyAmbientColor(class GAME::Color const &)
void GAME::Region::SetSkyboxRecord(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::NetworkSocket::SetSocketHandle(unsigned __int64)
void GAME::SoundEntity::SetSoundPak(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Actor::SetSpecTexture(char const *)
void GAME::GraphicsMeshInstance::SetSpecTexture(char const *)
void GAME::GraphicsMeshInstance::SetSpecTexture(char const *,unsigned int)
void GAME::Lightning2::SetStart(class GAME::WorldVec3 const &)
void GAME::LineEffect2::SetStart(class GAME::WorldVec3 const &)
void GAME::InternalParam::SetStartPos(unsigned int)
void GAME::WeatherManager::SetStates(class GAME::GraphicsCanvas &)
void GAME::Entity::SetStationaryAttachment(bool)
void GAME::EffectData::SetString(int,int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::EmitterData::SetString(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Options::SetString(enum GAME::Options::StringName,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Tracker::SetString(char const *,char const *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::DayNightCycle::SetSunAzimuth(float)
void GAME::DayNightCycle::SetSunMinAngle(float)
void GAME::DayNightCycle::SetSunRise(float)
void GAME::DayNightCycle::SetSunSet(float)
void GAME::GridRegion::SetSystem(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::AmbianceManager::SetTarget(class GAME::WorldVec3 const &)
void GAME::GraphicsMTRenderer::SetTargetGlowEnabled(bool)
void GAME::GraphicsCanvas::SetTargetSurface(class GAME::RenderSurface *)
void GAME::GraphicsLight::SetTargets(class mem::vector<class GAME::GraphicsRenderable const *> const &)
void GAME::Engine::SetTeleportMode(bool)
void GAME::SoundManager::SetTestMode(int)
void GAME::GraphicsPrimitiveDrawer::SetTexCoord(class GAME::Vec2 const &)
void GAME::GraphicsPrimitiveDrawer::SetTexture0(class GAME::RenderTexture const *)
void GAME::GraphicsPrimitiveDrawer::SetTexture1(class GAME::RenderTexture const *)
void GAME::Billboard::SetTexture(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsPrimitiveDrawer::SetTexture(unsigned int,class GAME::Name const &,class GAME::RenderTexture const *)
bool GAME::GraphicsShader2::SetTexture(class GAME::Name const &,unsigned int,class GAME::RenderTexture const *)
void GAME::LineEffect::SetTexture(char const *)
void GAME::WaterType::SetTexture(unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::EmitterData::SetTextureName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::GraphicsEngine::SetTextureReduction(int)
void GAME::AmbianceManager::SetTime(float)
void GAME::AmbianceManager::SetTimeEnabled(bool)
void GAME::ChaosBeam::SetTimeScale(float)
void GAME::SetTimeScale(float)
void GAME::Actor::SetTintColor(class GAME::Color const &)
void GAME::Options::SetToDefaults(enum GAME::Options::GroupName)
void GAME::ImpassableData::SetTokBuffer(char *,int)
void GAME::LineEffect::SetTopBottomPercent(float,float)
void GAME::HwndWindow::SetTopmost(bool)
void GAME::WinWindow::SetTopmost(bool)
void GAME::Jukebox::SetTrackedBossesDead(bool)
void GAME::Jukebox::SetTrackedPlayer(unsigned int)
void GAME::Jukebox::SetTrackedPlayerDead(bool)
void GAME::Engine::SetTrailDebugging(bool)
void GAME::Actor::SetTransparency(float)
void GAME::Actor::SetTransparency(class GAME::Frustum const &)
void GAME::Entity::SetTransparency(class GAME::Frustum const &)
void GAME::GraphicsMeshInstance::SetTransparency(class GAME::Frustum const &,class GAME::Region *,class GAME::Color const &,bool)
void GAME::GraphicsMeshInstance::SetTransparentDbrShader(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Portal::SetTriangles(class mem::vector<struct GAME::Triangle> const &)
void GAME::GameInfo::SetTunicColorIndex(int)
void GAME::Camera::SetType(enum GAME::CameraType)
void GAME::GraphicsLight::SetType(enum GAME::GraphicsLight::Type)
void GAME::InstanceGroup::SetType(char const *)
void GAME::Light::SetType(enum GAME::Light::Type)
void GAME::GMIEffectIcey::SetUniformScaleFactor(float)
void GAME::Entity::SetUniqueID(class GAME::UniqueId const &,bool)
void GAME::GraphicsMeshInstance::SetUnloadedBoundingBoxExtents(float)
void GAME::PhysicsRigidBody2::SetUserdata(void *)
unsigned int GAME::GPDDefaultVertexBuilder::SetVertex(void *,class GAME::Vec3 const &,class GAME::Vec2 const * const,class GAME::Color const &)
unsigned int GAME::GPDTex2VertexBuilder::SetVertex(void *,class GAME::Vec3 const &,class GAME::Vec2 const * const,class GAME::Color const &)
void GAME::GraphicsPrimitiveDrawer::SetVertex(class GAME::Vec2 const &)
void GAME::GraphicsPrimitiveDrawer::SetVertex(class GAME::Vec3 const &)
void GAME::GraphicsPrimitiveDrawer::SetVertexBuilder(class GAME::IGPDVertexBuilder const *)
void GAME::NavMesh::SetVertexData(class GAME::Vec3 const *,unsigned int,bool)
void GAME::GraphicsScene::SetViewer(class GAME::Camera const &,class GAME::Region *,class GAME::Viewport const &,class GAME::Frustum const &)
void GAME::GraphicsCanvas::SetViewport(class GAME::Viewport const &)
void GAME::GraphicsScene::SetViewport(class GAME::Viewport const &)
void GAME::Actor::SetVisibility(enum GAME::Visibility)
void GAME::Actor::SetVisibility(bool)
void GAME::Entity::SetVisibility(enum GAME::Visibility)
void GAME::Entity::SetVisibility(bool)
void GAME::SoundPak::SetVolume(float,bool)
void GAME::SoundPak::SetVolumeSet(enum GAME::VolumeSet)
void GAME::SoundManager::SetVolumeSetMultiplier(unsigned int,float)
void GAME::WaterRenderInterface::SetWater(class GAME::Water *)
void GAME::WaterPath::SetWaterType(char const *)
void GAME::WeatherManager::SetWeather(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float)
void GAME::AmbianceManager::SetWeatherAdjustments(float,float,float,class GAME::Color const &)
void GAME::PieOmatic::SetWedgeMode(bool)
void GAME::Camera::SetWidth(float)
void GAME::GraphicsMTRenderer::SetWireframeEnabled(bool)
void GAME::GraphicsPrimitiveDrawer::SetWorldToScreenMatrix(class GAME::Mat4 const &)
void GAME::GraphicsScene::SetWorldToScreenMatrix(class GAME::Mat4 const &)
void GAME::Region::SetZoneRecord(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Tracker::Setfloat(char const *,char const *,float)
void GAME::GrassObject::SetupGrassGeometry(class GAME::TerrainBase *,class mem::vector<unsigned int> const &,int,int,int,int,class GAME::TerrainPatch *)
struct GAME::LightEntry const * GAME::GraphicsMTRenderer::SetupLight(class GAME::GraphicsLight const &,class GAME::GraphicsScene &)
struct GAME::LightEntry const * GAME::GraphicsMTRenderer::SetupLights(class GAME::GraphicsScene &)
void GAME::EffectData::ShaderLoad(int,char const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::ShaderName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::ShaderName(void)
void GAME::ImpassableData::ShiftBoxes(class GAME::Vec3 const &)
void GAME::TrailEffect::ShiftForRegionChange(void)
void GAME::World::ShiftFrustum(class GAME::Frustum const &,class GAME::Vec3 const &,class GAME::Frustum &)
bool GAME::Jukebox::ShouldPlayMusic(void)
bool GAME::LightRig::ShouldRender(void)
bool GAME::SmartObjectId::ShouldReplicate(void)
bool GAME::Entity::ShouldSaveState(void)
bool GAME::Entity::ShouldServerSpawn(int)
void GAME::HwndWindow::Show(bool)
void GAME::WinWindow::Show(bool)
void GAME::Engine::ShowCinematicText(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,enum GAME::CinematicTextType,class GAME::Color const &)
void GAME::World::ShowConnections(bool)
void GAME::Engine::ShowMemViewer(void)
void GAME::Engine::ShowNetworkDisplay(bool)
void GAME::Engine::ShowProfiler(bool)
void GAME::Engine::ShowRenderDebugger(bool)
void GAME::LocalizationManager::ShowTagErrors(bool)
void GAME::Terrain::ShowTextureComplexity(bool)
void GAME::Engine::ShowThreadMonitor(bool)
bool GAME::ClientConnectionManager::Shutdown(void)
bool GAME::ConnectionManager::Shutdown(void)
void GAME::Engine::Shutdown(void)
bool GAME::IOAtomicWrite::Shutdown(void)
bool GAME::IOStreamRead::Shutdown(void)
bool GAME::IOStreamWrite::Shutdown(void)
void GAME::LuaManager::Shutdown(void)
void GAME::PhysicsEngine2::Shutdown(void)
bool GAME::ServerConnectionManager::Shutdown(void)
void GAME::SoundManager::Shutdown(void)
void GAME::Steamworks::Shutdown(void)
bool GAME::StubConnectionManager::Shutdown(void)
void GAME::WeatherManager::Shutdown(void)
void GAME::NetworkServerBrowser::ShutdownInternetBrowser(void)
void GAME::NetworkServerBrowser::ShutdownLANBrowser(void)
void GAME::Engine::ShutdownNetwork(void)
void GAME::CurveData::Simplify(float)
unsigned int GAME::NetPacketHeader::Size(void)
int GAME::NetworkServerBrowser::Size(void)
unsigned int const GAME::SmartObjectIdList::Size(void)
bool GAME::Terrain::SlopeImpassable(int,int)
float & GAME::WaterType::Smoothness(void)
float GAME::WaterType::Smoothness(void)
class GAME::Vec3 GAME::TransformGizmo::SnapToGrid(class GAME::Vec3 const &)
float & GAME::WaterType::Specularity(void)
float GAME::WaterType::Specularity(void)
void GAME::GridRegion::SpreadTransparency(class GAME::Vec3 const &,class GAME::Vec3 const &,int,int,int,float)
void GAME::TrailEffect::Start(void)
void GAME::Jukebox::StartAmbient(void)
void GAME::Profile::StartCycleCount(unsigned __int64 &)
void GAME::Effect::StartEmitting(void)
void GAME::EffectEntity::StartEmitting(void)
void GAME::Emitter::StartEmitting(void)
bool GAME::ClientConnectionManager::StartInternet(void)
bool GAME::ConnectionManager::StartInternet(void)
bool GAME::ServerConnectionManager::StartInternet(void)
bool GAME::ConnectionManager::StartLAN(void)
void GAME::Jukebox::StartMusic(void)
void GAME::SoundEntity::StartPlaying(bool)
void GAME::SoundManager::StartStream(class GAME::SoundDescriptor const &)
void GAME::ResourceLoader::StartThreads(void)
bool GAME::Steamworks::StatsAreAvailable(void)
void GAME::Steamworks::StatsCommit(void)
int GAME::Steamworks::StatsGet(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Steamworks::StatsSet(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)
void GAME::Jukebox::Stop(void)
void GAME::SoundPak::Stop(void)
void GAME::SoundStream::Stop(void)
void GAME::TheoraVideoPlayer::Stop(void)
void GAME::TrailEffect::Stop(void)
void GAME::VideoPlayer::Stop(void)
void GAME::SoundManager::StopAll(void)
void GAME::WeatherManager::StopAllSystems(bool)
void GAME::Jukebox::StopAmbient(void)
void GAME::Actor::StopAnimation(int)
void GAME::AnimChannel::StopAnimation(void)
void GAME::Actor::StopAnimations(void)
void GAME::Jukebox::StopBossMusic(void)
void GAME::Effect::StopEmitting(void)
void GAME::EffectEntity::StopEmitting(void)
void GAME::Emitter::StopEmitting(void)
void GAME::Jukebox::StopEventMusic(void)
void GAME::SoundManager::StopExternalStream(void)
void GAME::Jukebox::StopMusic(void)
void GAME::NavManager::StopObject(class GAME::Entity *)
void GAME::SoundEntity::StopPlaying(int)
void GAME::SoundManager::StopPlaying(class GAME::SoundDescriptor const &)
void GAME::ResourceLoader::StopThreads(void)
void GAME::SoundPak::StopTracking(void)
void GAME::FOWManager::Store(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,void const *,unsigned int)
void GAME::AnimChannel::StorePose(class GAME::SkeletalPose const &)
void GAME::WaterRenderInterface::StortElementList(class mem::vector<class GAME::WaterElement *> &)
void GAME::SoundSystem::StreamCloseCallback(void *)
bool GAME::SoundStream::StreamData(float const *,int,int,int)
unsigned int GAME::SoundSystem::StreamOpenCallback(char const *,void * *)
void GAME::TriggerToken::StreamProperties(class GAME::IOStream *)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned char &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,short &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned short &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Coords &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::MD5Digest &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Name &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::UniqueId &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Vec3 &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::WorldCoords &)
void GAME::IOStreamRead::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned char &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,short &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned short &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,float &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Coords &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::MD5Digest &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Name &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::UniqueId &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::Vec3 &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class GAME::WorldCoords &)
void GAME::IOStreamWrite::StreamPropertyEx(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool &)
int GAME::SoundSystem::StreamReadCallback(void *,void *,unsigned int)
int GAME::SoundSystem::StreamSeekCallback(void *,int,int)
long GAME::SoundSystem::StreamTellCallback(void *)
enum GAME::InternalParam::Gender GAME::InternalParam::StringToGender(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &,int &)
unsigned int GAME::StringToNetworkIndex(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::ConnectionManager::SubtractPacketCounts(class mem::map<enum GAME::PACKET_TYPE,struct GAME::NetPacketCounterEntry> const &,class mem::map<enum GAME::PACKET_TYPE,struct GAME::NetPacketCounterEntry> const &,class mem::map<enum GAME::PACKET_TYPE,struct GAME::NetPacketCounterEntry> &)
bool GAME::GraphicsCanvas::Supports16bitColorWithDepth(void)
bool GAME::GraphicsCanvas::SupportsDepthRenderTargets(void)
bool const GAME::ActorConfigCommand::SupportsNetwork(void)
bool GAME::Engine::SurvivalFilesExist(void)
void GAME::RenderDevice::Suspend(void)
void GAME::EditorFilter::Sync(void)
void GAME::ColorPulse::SyncToColorPulse(class GAME::ColorPulse const *)
void GAME::ObjectManager::TableDepotDumpStats(void)
bool GAME::LocalizationManager::TagFoundInMap(char const *)
bool GAME::AmbianceManager::TargetIsInBossMusicZone(void)
bool GAME::WaterLayer::TestBlockArea(unsigned int,unsigned int)
bool GAME::Portal::TestIntersection(class GAME::Frustum const &)
unsigned int GAME::NetworkEntityList::TestListValidity(void)
class GAME::Vec2 & GAME::WaterType::TextureScale(void)
class GAME::Vec2 const & GAME::WaterType::TextureScale(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::LocalizationManager::ToChar(class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > const &)
char * GAME::LocalizationManager::ToChar(unsigned short const *,char *,unsigned int)
enum GAME::JointAxis GAME::PhysicsUtil::ToJointAxis(char const *)
enum GAME::JointType GAME::PhysicsUtil::ToJointType(char const *)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > GAME::IPVNetworkAddress::ToString(void)
char const * GAME::PhysicsUtil::ToText(enum GAME::JointAxis)
char const * GAME::PhysicsUtil::ToText(enum GAME::JointType)
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > GAME::LocalizationManager::ToWChar(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
unsigned short * GAME::LocalizationManager::ToWChar(char const *,unsigned short *,unsigned int)
class GAME::Portal * GAME::World::TraceRayAgainstPortals(class GAME::WorldRay const &,float &,bool)
class GAME::Portal * GAME::Region::TraceSegmentAgainstPortals(class GAME::Ray const &,float &,bool)
void GAME::SoundPak::Track(int)
bool GAME::Jukebox::TrackBossDeathSpawner(void)
class GAME::Vec3 GAME::WorldCoords::TransformVector(class GAME::Vec3 const &)
void GAME::WorldCoords::Translate(class GAME::Vec3 const &)
bool GAME::WorldVec3::Translate(class GAME::Vec3 const &,bool)
void GAME::WorldVec3::TranslateInRegion(class GAME::Vec3 const &)
bool GAME::WorldVec3::TranslateToFloor(class GAME::Vec3 const &)
class GAME::WorldCoords GAME::WorldCoords::Translation(class GAME::WorldVec3 const &)
void GAME::GraphicsMTRenderer::TrapezoidalShadowMapMatrix(class GAME::Camera const &,class GAME::Vec3 const &,float,class GAME::Frustum const &,class GAME::Mat4 &)
bool GAME::CriticalSection::TryToEnter(void)
void GAME::Actor::TweakPose(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::TypeName(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::TypeName(void)
void GAME::SoundManager::UnPause(void)
void GAME::EventManager::UnRegister(unsigned int,class GAME::EventHandlerInterface *)
void GAME::SingletonManager::UnRegister(class GAME::SingletonInterface *)
void GAME::GraphicsMTRenderer::UniformShadowMapMatrix(class GAME::Camera const &,class GAME::Vec3 const &,class GAME::Frustum const &,float,class GAME::Mat4 &)
bool GAME::Level::Unload(bool)
void GAME::SectorDataManager::Unload(void)
void GAME::SoundManager::Unload(class GAME::SoundDescriptor &)
void GAME::Terrain::Unload(void)
void GAME::TerrainBase::Unload(void)
void GAME::World::Unload(void)
void GAME::StyleManager::UnloadAll(void)
void GAME::Engine::UnloadAllRegions(void)
void GAME::World::UnloadAllRegions(void)
bool GAME::BaseResourceManager::UnloadAllResources(void)
void GAME::GraphicsEngine::UnloadAllResources(void)
void GAME::GraphicsEngine::UnloadAnimation(class GAME::GraphicsAnim const *)
void GAME::GraphicsEngine::UnloadCursor(class GAME::GraphicsCursor const *)
void GAME::DecalTypeMgr::UnloadDecalType(class GAME::DecalType const *)
void GAME::Level::UnloadEntities(void)
void GAME::World::UnloadExtraRegions(bool)
void GAME::Region::UnloadFOW(void)
void GAME::World::UnloadFOWForMapClose(void)
void GAME::GraphicsEngine::UnloadFont(class GAME::GraphicsFont2 const *)
void GAME::Region::UnloadLevel(bool,bool)
void GAME::World::UnloadLevel(int,bool)
void GAME::RenderDevice::UnloadLibraries(void)
void GAME::GraphicsEngine::UnloadMesh(class GAME::GraphicsMesh const *)
void GAME::TerrainBase::UnloadOldObjects(void)
void GAME::GraphicsMeshInstance::UnloadOverrideShader(class GAME::GraphicsShader2 const *)
void GAME::SoundManager::UnloadPendingDescriptors(void)
void GAME::BaseResourceManager::UnloadResource(class GAME::Resource const *)
void GAME::ResourceLoader::UnloadResource(class GAME::Resource *,unsigned int)
void GAME::GraphicsEngine::UnloadShader2(class GAME::GraphicsShader2 const *)
void GAME::GraphicsEngine::UnloadTexture(class GAME::GraphicsTexture const *)
void GAME::BaseResourceManager::UnloadUnreferencedResources(void)
void GAME::Engine::UnloadUnreferencedResources(void)
void GAME::GraphicsEngine::UnloadUnreferencedResources(void)
void GAME::SoundManager::UnloadUnreferencedResources(void)
void GAME::Engine::UnloadWorld(void)
void GAME::FileDirectory::Unlock(void)
void GAME::ImpassableData::Unlock(void)
void GAME::Resource::Unlock(void)
void GAME::InstanceGroupManager::UnlockGroupList(void)
void GAME::World::UnlockMapFile(void)
void GAME::RouterServices::UnmapAllGDMappings(void)
bool GAME::RouterServices::UnmapPort(enum GAME::UPnP::Protocol,unsigned short)
void GAME::MemoryMappedFile::UnmapView(void const *,unsigned int)
void GAME::UnpauseGameTime(void)
void GAME::HwndWindow::UnregisterEventHandler(class GAME::WindowEventHandler *)
void GAME::WinWindow::UnregisterEventHandler(class GAME::WindowEventHandler *)
void GAME::Engine::UnregisterForForcedUpdates(unsigned int)
void GAME::LuaManager::UnregisterForUpdates(unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::Engine::UnregisterResetObject(class GAME::ResetObject *)
void GAME::GraphicsEngine::UnregisterVertexDeclaration(class GAME::RenderVertexDeclaration *)
void GAME::AmbianceManager::Update(int)
bool GAME::AnimChannel::Update(int,class GAME::Name const &,class GAME::SkeletalPose &,class GAME::Vec3 &,bool)
void GAME::BoatOverlayActivity::Update(int)
void GAME::ClientConnectionManager::Update(int)
class GAME::Color const & GAME::ColorPulse::Update(int)
void GAME::ConnectionManager::Update(int)
void GAME::DecalSet::Update(int)
void GAME::Display::Update(void)
void GAME::DisplayWidget::Update(int)
void GAME::Effect::Update(class GAME::WorldCoords const &,class GAME::EffectData const *,class GAME::ABBox &)
void GAME::Emitter::Update(class GAME::WorldCoords const &,class GAME::ABBox &,class GAME::EmitterData const *,class mem::vector<struct GAME::EmitterBone> const *)
void GAME::Engine::Update(class GAME::Sphere const *,class GAME::WorldFrustum const *,bool,class GAME::WorldFrustum const *)
void GAME::Entity::Update(int)
void GAME::GMIEffectIcey::Update(int)
void GAME::GraphicsEngine::Update(bool)
void GAME::GraphicsMeshInstance::Update(int,class GAME::Vec3 &,bool)
void GAME::GridBase::Update(class GAME::Frustum const * const,unsigned int,int)
void GAME::GridRegion::Update(class GAME::Frustum const * const,unsigned int,int)
void GAME::Jukebox::Update(int)
void GAME::Level::Update(int,class GAME::Frustum const * const,unsigned int)
void GAME::LuaManager::Update(void)
void GAME::NavManager::Update(int)
void GAME::NetworkEntityList::Update(int)
void GAME::NetworkServerBrowser::Update(int)
void GAME::OverlayActivityManager::Update(int)
void GAME::PieOmatic::Update(int)
void GAME::Region::Update(int)
void GAME::Region::Update(int,class GAME::Frustum const * const,unsigned int,bool,bool,bool,bool,unsigned int)
void GAME::RegionLoader::Update(int)
void GAME::ResourceLoader::Update(void)
void GAME::ServerConnectionManager::Update(int)
void GAME::ServerEntityList::Update(int)
void GAME::SingletonManager::Update(int)
void GAME::Socket::Update(void)
void GAME::Sound::Update(void)
void GAME::SoundManager::Update(int,class GAME::WorldFrustum const *)
void GAME::SoundStream::Update(void)
void GAME::SteamControllerDevice::Update(int)
void GAME::Steamworks::Update(int)
void GAME::StubConnectionManager::Update(int)
void GAME::Terrain::Update(class GAME::Frustum const * const,unsigned int,int)
void GAME::TerrainPatch::Update(int)
void GAME::TerrainPatchRT::Update(int)
void GAME::TheoraVideoPlayer::Update(int)
bool GAME::ThreadMonitor::Update(void)
void GAME::Timer::Update(bool)
void GAME::Tracker::Update(int)
void GAME::VideoPlayer::Update(int)
void GAME::Water::Update(int)
void GAME::WaterLayer::Update(void)
void GAME::WaterPath::Update(void)
void GAME::WaterWaveSet::Update(void)
void GAME::WeatherManager::Update(class GAME::WorldVec3 const &,int)
void GAME::World::Update(class mem::vector<class GAME::Sphere> const &,class mem::vector<class GAME::WorldFrustum> const &)
void GAME::WorldCamera::Update(void)
void GAME::WeatherManager::UpdateAdvancedWind(void)
void GAME::SoundManager::UpdateAllPositions(void)
void GAME::SoundManager::UpdateAllVolumes(void)
void GAME::WeatherManager::UpdateAmbience(int)
void GAME::Entity::UpdateAttachedEntities(int)
void GAME::TransformGizmo::UpdateAxisSelection(class GAME::Camera const &,class GAME::Viewport const &,class GAME::Vec2 const &)
void GAME::Emitter::UpdateBoneList(class mem::vector<struct GAME::EmitterBone> const *)
void GAME::Actor::UpdateBoundingBox(void)
void GAME::Billboard::UpdateBoundingBox(void)
void GAME::Decal::UpdateBoundingBox(void)
void GAME::EffectEntity::UpdateBoundingBox(void)
void GAME::Entity::UpdateBoundingBox(void)
void GAME::GraphicsMeshInstance::UpdateBoundingBox(bool)
void GAME::GridBase::UpdateBoundingBox(void)
void GAME::Light::UpdateBoundingBox(void)
void GAME::Lightning2::UpdateBoundingBox(void)
void GAME::LineEffect2::UpdateBoundingBox(void)
void GAME::LineEffect::UpdateBoundingBox(void)
void GAME::PointDisturbance::UpdateBoundingBox(void)
void GAME::Region::UpdateBoundingBox(void)
void GAME::TrailEffect::UpdateBoundingBox(void)
void GAME::GridRegion::UpdateCell(int,int,int)
void GAME::Engine::UpdateClientEntities(int)
void GAME::WaterCurve::UpdateCurrentControlPoint(void)
void GAME::Emitter::UpdateDropDecal(class GAME::EmitterData const *)
void GAME::TerrainPatch::UpdateEditorData(bool)
void GAME::InstanceGroup::UpdateEntityData(class GAME::Entity *)
void GAME::InstanceGroupManager::UpdateEntityData(class GAME::Entity *)
void GAME::Emitter::UpdateForRegionChange(class GAME::EmitterData const *)
void GAME::Engine::UpdateForcedEntities(void)
void GAME::GraphicsMTRenderer::UpdateFrameBufferCopy(void)
void GAME::ConnectionManager::UpdateFrameStats(bool)
void GAME::WorldCamera::UpdateFromInput(void)
bool GAME::GraphicsEngine::UpdateFromOptions(void)
void GAME::Engine::UpdateFrustum(int,class GAME::WorldFrustum const &,class GAME::Sphere const &)
void GAME::NetworkEntityList::UpdateFrustum(int,class GAME::WorldFrustum const &,class GAME::Sphere const &)
void GAME::ServerEntityList::UpdateFrustum(int,class GAME::WorldFrustum const &,class GAME::Sphere const &)
void GAME::WaterPath::UpdateHeight(float)
void GAME::WaterWaveSet::UpdateHeight(float)
void GAME::Terrain::UpdateHeightMap(class GAME::DirtyRect const &)
void GAME::Terrain::UpdateLayerOpacity(unsigned int)
void GAME::NoiseTexture::UpdateLayers(unsigned int)
void GAME::Emitter::UpdateLight(class GAME::EmitterData const *,float)
void GAME::WeatherManager::UpdateModifiers(int)
void GAME::SoundManager::UpdateMusicVolumes(void)
void GAME::TerrainBase::UpdateObjectInSpace(class GAME::TerrainObject *)
void GAME::TerrainBase::UpdateObjects(class GAME::Frustum const * const,unsigned int,int)
void GAME::GrassObject::UpdateOffsetField(class GAME::TerrainBase &,class mem::vector<unsigned int> const &,int,int,int)
void GAME::Emitter::UpdateParticles(class GAME::EmitterData const *)
void GAME::Engine::UpdatePerfTracker(class GAME::WorldVec3 const &,int)
void GAME::Actor::UpdatePose(class GAME::Actor const *)
void GAME::GraphicsMeshInstance::UpdatePose(class GAME::GraphicsMeshInstance const *,bool)
void GAME::SoundManager::UpdatePosition(class GAME::SoundDescriptor &,class GAME::WorldVec3 const &)
void GAME::Entity::UpdatePunctuation(void)
void GAME::WaterLayer::UpdateReflectionPlane(void)
void GAME::WaterPath::UpdateReflectionPlane(void)
void GAME::GraphicsMTRenderer::UpdateReflectionPlaneBounds(class GAME::GraphicsReflectionPlane const *,class GAME::ABBox const &)
void GAME::World::UpdateRegionBoundingBox(class GAME::Level *)
void GAME::GraphicsMeshInstance::UpdateRegionSpaceBoundingBox(void)
void GAME::World::UpdateRegionUsage(class GAME::Region *)
void GAME::GraphicsMeshInstance::UpdateSectionOpacities(int,float)
void GAME::WaterPath::UpdateSegment(unsigned int)
void GAME::WaterWaveSet::UpdateSegment(unsigned int)
void GAME::CurveData::UpdateSegmentList(void)
void GAME::Actor::UpdateSelf(int)
void GAME::ChaosBeam::UpdateSelf(int)
void GAME::DayNightLight::UpdateSelf(int)
void GAME::Decal::UpdateSelf(int)
void GAME::EffectEntity::UpdateSelf(int)
void GAME::Entity::UpdateSelf(int)
void GAME::FireLight::UpdateSelf(int)
void GAME::FlickerLight::UpdateSelf(int)
void GAME::FlyingBolt::UpdateSelf(int)
void GAME::Lightning2::UpdateSelf(int)
void GAME::LineEffect2::UpdateSelf(int)
void GAME::LineEffect::UpdateSelf(int)
void GAME::PointDisturbance::UpdateSelf(int)
void GAME::PulseLight::UpdateSelf(int)
void GAME::SoundEntity::UpdateSelf(int)
void GAME::TrailEffect::UpdateSelf(int)
void GAME::WeaponTrail::UpdateSelf(int)
bool GAME::NetworkServerBrowser::UpdateServerList(enum GAME::ServerListType)
void GAME::Emitter::UpdateShader(class GAME::EmitterData const *)
void GAME::EmitterData::UpdateShader(enum GAME::RenderBlendFactor,enum GAME::RenderBlendFactor)
void GAME::Emitter::UpdateTexture(class GAME::EmitterData const *)
void GAME::FogOfWar::UpdateTexture(void)
void GAME::UpdateTime(void)
void GAME::GridRegion::UpdateTransparency(class GAME::Frustum const &)
void GAME::GridRegion::UpdateTransparency(class GAME::WorldVec3 const &,class GAME::WorldVec3 const &,float)
void GAME::Region::UpdateUsage(class GAME::Region *)
void GAME::Terrain::UpdateVertexBuffer(class GAME::DirtyRectSet const &)
void GAME::Terrain::UpdateVisibilityMap(class GAME::DirtyRect const &)
void GAME::SoundManager::UpdateVolume(class GAME::SoundDescriptor &,float)
bool GAME::Water::UpdateWaterType(class GAME::WaterType const *)
void GAME::WaterWaveSet::UpdateWaves(int)
void GAME::WeatherManager::UpdateWeatherSystemsForCurrentClimate(void)
bool GAME::Actor::UseAlternateMesh(bool)
bool GAME::Entity::UseExistingObjectForRestore(void)
bool GAME::GraphicsEngine::UseLowQualityLighting(void)
bool GAME::GraphicsMesh::UsesShaderOfType(char const *)
void GAME::ImpassableData::Validate(void)
bool GAME::FileSystem::ValidateFileName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::SectorLayers::ValidateMapping(void)
void GAME::World::ValidateSectorLayers(void)
class GAME::Property * GAME::Serializer::VerboseGetProperty(bool &)
void GAME::Serializer::VerboseWritePropertyID(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int)
void GAME::Serializer::VerboseWriteTerminator(void)
void GAME::NavManager::VisualizeNavData(class GAME::Region *,class mem::vector<class GAME::Vec3> &)
bool GAME::Event::Wait(unsigned int)
void GAME::Event::WaitForAny(class GAME::Event * * const,unsigned int)
void GAME::SaveManager::WaitForCompletion(void)
void GAME::ResourceLoader::WaitForIdle(void)
void GAME::GraphicsMTRenderer::WaitForJobs(void)
void GAME::Region::WaitForLoadingToFinish(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::WakeSplashEffect(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::WakeSplashEffect(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & GAME::WaterType::WakeSplashTexture(void)
class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & GAME::WaterType::WakeSplashTexture(void)
class GAME::Color & GAME::WaterType::WaterColor(void)
class GAME::Color const & GAME::WaterType::WaterColor(void)
__int64 GAME::WinWindow::WindowProc(struct HWND__ *,unsigned int,unsigned __int64,__int64)
int GAME::InstanceGroupManager::WorldGroupSelection(class GAME::WorldRay const &)
void GAME::Actor::Write(class GAME::BinaryWriter &)
void GAME::DayNightCycle::Write(class GAME::BinaryWriter &)
void GAME::DayNightCycleSectorData::Write(class GAME::BinaryWriter &)
void GAME::Entity::Write(class GAME::BinaryWriter &)
void GAME::FOWManager::Write(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool)
void GAME::FileDirectory::Write(unsigned int,void const *,unsigned int)
void GAME::FogOfWar::Write(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)
void GAME::RegionId::Write(class GAME::BinaryWriter &)
void GAME::RegionId::Write(class GAME::ChunkedBinaryWriter &)
void GAME::TerrainPatch::Write(class GAME::BinaryWriter &)
void GAME::WorldCoords::Write(class GAME::BinaryWriter &)
void GAME::WorldCoords::Write(class GAME::ChunkedBinaryWriter &)
void GAME::WorldVec3::Write(class GAME::BinaryWriter &)
void GAME::WorldVec3::Write(class GAME::ChunkedBinaryWriter &)
void GAME::SectorDataManager::WriteAdjustmentData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteAmbientData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteBloomData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteBossData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteChallengeData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteClimateData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteDamageData(class GAME::BinaryWriter &)
void GAME::SkeletalPose::WriteData(class GAME::BinaryWriter &,bool)
void GAME::SectorDataManager::WriteDayNightCycleData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteFogData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteLevelLimitData(class GAME::BinaryWriter &)
void GAME::Engine::WriteMemLog(char const *,char const *,bool,int)
void GAME::Engine::WriteMemTable(char const *,char const *,bool,int)
void GAME::SectorDataManager::WriteNameData(class GAME::BinaryWriter &)
void GAME::Engine::WritePerformanceStatsFile(void)
void GAME::TriggerToken::WriteProperties(class GAME::CheckedWriter &)
void GAME::Serializer::WritePropertyID(bool,unsigned int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int)
void GAME::SectorDataManager::WritePvpData(class GAME::BinaryWriter &)
void GAME::Entity::WriteReplicationData(class GAME::NetPacketOutBuffer &)
void GAME::GraphicsMeshInstance::WriteReplicationData(class GAME::NetPacketOutBuffer &)
void GAME::SkeletalPose::WriteReplicationData(class GAME::NetPacketOutBuffer &)
void GAME::BaseResourceManager::WriteResourceLog(char const *,struct _iobuf *)
void GAME::Engine::WriteResourceLog(char const *)
void GAME::GraphicsEngine::WriteResourceLog(struct _iobuf *)
void GAME::SoundManager::WriteResourceLog(struct _iobuf *)
void GAME::SectorDataManager::WriteRiftgateData(class GAME::BinaryWriter &)
void GAME::SectorDataManager::WriteSectorData(class GAME::SectorData const *,class GAME::BinaryWriter &)
void GAME::Entity::WriteSimulationInformation(void)
bool GAME::Image::WriteTGA(class GAME::BinaryWriter &)
void GAME::Serializer::WriteTerminator(bool)
void GAME::SectorDataManager::WriteViewDistanceData(class GAME::BinaryWriter &)
void GAME::SoundManager::_Pause(void)
void GAME::SoundManager::_UnPause(void)
unsigned int const GAME::TerrainBase::blockSize
int const GAME::GridRegion::cellsPerChunk
unsigned short * `bool GAME::Engine::IsCDKeyValid(void)'::`2'::checksumTable
class GAME::RTTI_ClassInfo const GAME::Actor::classInfo
class GAME::RTTI_ClassInfo const GAME::ChaosBeam::classInfo
class GAME::RTTI_ClassInfo const GAME::DayNightLight::classInfo
class GAME::RTTI_ClassInfo const GAME::Decal::classInfo
class GAME::RTTI_ClassInfo const GAME::EffectEntity::classInfo
class GAME::RTTI_ClassInfo const GAME::Entity::classInfo
class GAME::RTTI_ClassInfo const GAME::FireLight::classInfo
class GAME::RTTI_ClassInfo const GAME::FlickerLight::classInfo
class GAME::RTTI_ClassInfo const GAME::FlyingBolt::classInfo
class GAME::RTTI_ClassInfo const GAME::GridBase::classInfo
class GAME::RTTI_ClassInfo const GAME::GridRegion::classInfo
class GAME::RTTI_ClassInfo const GAME::GridSystem::classInfo
class GAME::RTTI_ClassInfo const GAME::Light::classInfo
class GAME::RTTI_ClassInfo const GAME::Lightning2::classInfo
class GAME::RTTI_ClassInfo const GAME::LineEffect2::classInfo
class GAME::RTTI_ClassInfo const GAME::LineEffect::classInfo
class GAME::RTTI_ClassInfo const GAME::NoiseTexture::classInfo
class GAME::RTTI_ClassInfo const GAME::Object::classInfo
class GAME::RTTI_ClassInfo const GAME::PointDisturbance::classInfo
class GAME::RTTI_ClassInfo const GAME::PulseLight::classInfo
class GAME::RTTI_ClassInfo const GAME::SoundEntity::classInfo
class GAME::RTTI_ClassInfo const GAME::SoundPak::classInfo
class GAME::RTTI_ClassInfo const GAME::TerrainType::classInfo
class GAME::RTTI_ClassInfo const GAME::TrailEffect::classInfo
class GAME::RTTI_ClassInfo const GAME::WeaponTrail::classInfo
class GAME::InputDevice * (* GAME::InputDevice::createImpl)(void)
class GAME::CriticalSection GAME::LocalizationManager::criticalSection
class GAME::Vec3 const GAME::GridSystem::defaultCellSpacing
void (* GAME::InputDevice::destroyImpl)(class GAME::InputDevice * &)
class GAME::Name const GAME::Names::empty
class GAME::Engine * GAME::gEngine
unsigned int GAME::gLogEngine
unsigned int GAME::gLogGraphics
unsigned int GAME::gLogNoCategory
unsigned int GAME::gLogRelease
class GAME::EditorFilter * GAME::EditorFilter::instance
class GAME::WaterTypeManager * GAME::WaterTypeManager::instance
class GAME::ZoneManager * GAME::ZoneManager::instance
int const GAME::Jukebox::kAmbientSwitchDelay
unsigned int const GAME::Socket::kCompressionBufferSize
int const GAME::Jukebox::kCrossFadePeriod
int const GAME::Jukebox::kDayNightChangeDelay
char const * const GAME::WaterType::kDefaultBodyTexture
char const * const GAME::WaterType::kDefaultNoiseTexture
char const * const GAME::WaterType::kDefaultObjectTexture
char const * const GAME::WaterType::kDefaultShaderName
char const * const GAME::WaterType::kDefaultSkyMap
char const * const GAME::WaterType::kDefaultSplashEffect
char const * const GAME::WaterType::kDefaultWakeTexture
class GAME::Mat4 const GAME::GraphicsMTRenderer::kDirectionalShadowMatrix
int const GAME::GMIEffectIcey::kFadePeriod
int const GAME::GrassObject::kGrassDisabled
float const GAME::GrassObject::kGrassHighQualitySpacing
float const GAME::GrassObject::kGrassLowQualityMinHeight
float const GAME::GrassObject::kGrassLowQualityMultiplier
float const GAME::GrassObject::kGrassLowQualitySpacing
int const GAME::GrassObject::kGrassMovementPeriod
int const GAME::GrassObject::kGrassNotReady
float const GAME::PhysicsEngine2::kGravity
char const * const GAME::kHeadingDroppedItemByType
char const * const GAME::kHeadingFrameStats
char const * const GAME::kHeadingGame
char const * const GAME::kHeadingItem
char const * const GAME::kHeadingItemsCreated
char const * const GAME::kHeadingKilledMonsterByType
char const * const GAME::kHeadingMap
char const * const GAME::kHeadingMonster
char const * const GAME::kHeadingMonsterSkill
char const * const GAME::kHeadingMonsterSkillUsedByType
char const * const GAME::kHeadingPathing
char const * const GAME::kHeadingPets
char const * const GAME::kHeadingPetsReleased
char const * const GAME::kHeadingPickedUpItemByType
char const * const GAME::kHeadingPlayer
char const * const GAME::kHeadingPlayerItems
char const * const GAME::kHeadingPlayerSessionEnd
char const * const GAME::kHeadingPlayerSessionStart
char const * const GAME::kHeadingPlayerSkill
char const * const GAME::kHeadingPlayerSkillUsedByType
char const * const GAME::kHeadingPrefix
char const * const GAME::kHeadingProxyStats
char const * const GAME::kHeadingRelic
char const * const GAME::kHeadingRelicUsedByType
char const * const GAME::kHeadingSkills
char const * const GAME::kHeadingSkillsUsedByType
char const * const GAME::kHeadingSuffix
char const * const GAME::kHeadingUsedItemByType
float const GAME::FogOfWar::kInvScale
unsigned int const GAME::FOWManager::kMagic
int const GAME::SoundManager::kMaxConcurrentSounds
unsigned int const GAME::DecalSet::kMaxDecals
unsigned int const GAME::GraphicsMTRenderer::kMaxLargePointShadowTargets
unsigned int const GAME::GraphicsMTRenderer::kMaxSmallPointShadowTargets
unsigned int const GAME::NavManager::kMaxTileCacheMemUsage
unsigned int const GAME::DecalSet::kMaxTypes
int const GAME::Jukebox::kMusicSwitchDelay
class GAME::Sphere const GAME::GraphicsMTRenderer::kNullSphere
unsigned int const GAME::Socket::kReceiveBufferSize
int const GAME::SteamControllerDevice::kReconnectPeriod
float const GAME::FogOfWar::kScale
unsigned int const GAME::Socket::kSendQueueSize
unsigned int const GAME::GraphicsMTRenderer::kShadowCasterBoundMaxVertices
unsigned int const GAME::FOWManager::kVersion
unsigned int const GAME::FogOfWar::kVersion
unsigned int const GAME::WaterType::kVersion
float const GAME::FogOfWar::kVisibleRange
int const GAME::Lightning2::lightningLife
class GAME::InstanceGroupManager * GAME::InstanceGroupManager::manager
int const GAME::Terrain::maxGrassBufferCacheSize
unsigned int const GAME::TerrainBase::maxNumGrassPlanes
int const GAME::TerrainPatch::maxNumGrassPlanes
int const GAME::WeatherManager::maxParticles
int const GAME::Lightning2::maxQuads
int const GAME::LineEffect2::maxQuads
class GAME::Name const GAME::Name::noName
class std::basic_string<unsigned short,struct std::char_traits<unsigned short>,class std::allocator<unsigned short> > GAME::PortableLocalization::noTag
unsigned int const GAME::NoiseTexture::numLayers
unsigned int const GAME::FileSystem::numPartitions
class GAME::CriticalSection * GAME::Singleton<class GAME::AsyncWorker>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::CPUCoreDetector>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::DebugRenderManager>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::EventManager>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::Jukebox>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::NavManager>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::ObjectManager>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::RouterServices>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::StyleManager>::s_criticalSection
class GAME::CriticalSection * GAME::Singleton<class GAME::Tracker>::s_criticalSection
class GAME::AsyncWorker * GAME::Singleton<class GAME::AsyncWorker>::s_instance
class GAME::CPUCoreDetector * GAME::Singleton<class GAME::CPUCoreDetector>::s_instance
class GAME::DebugRenderManager * GAME::Singleton<class GAME::DebugRenderManager>::s_instance
class GAME::EventManager * GAME::Singleton<class GAME::EventManager>::s_instance
class GAME::Jukebox * GAME::Singleton<class GAME::Jukebox>::s_instance
class GAME::NavManager * GAME::Singleton<class GAME::NavManager>::s_instance
class GAME::ObjectManager * GAME::Singleton<class GAME::ObjectManager>::s_instance
class GAME::RouterServices * GAME::Singleton<class GAME::RouterServices>::s_instance
class GAME::StyleManager * GAME::Singleton<class GAME::StyleManager>::s_instance
class GAME::Tracker * GAME::Singleton<class GAME::Tracker>::s_instance
class mem::hash_map<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,struct GAME::FontStyle *,struct std::hash<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > GAME::StyleManager::styleMap
int const GAME::Lightning2::texChangePeriodMax
int const GAME::Lightning2::texChangePeriodMin
class mem::hash_map<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,struct GAME::FontStyle *,struct std::hash<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > GAME::StyleManager::unscaledStyleMap
bool const GAME::Terrain::useGrassBufferCache
LZ4_compressBound
LZ4_compress_default
LZ4_compress_destSize
LZ4_compress_fast
LZ4_compress_fast_continue
LZ4_compress_fast_extState
LZ4_createStream
LZ4_createStreamDecode
LZ4_decompress_fast
LZ4_decompress_fast_continue
LZ4_decompress_fast_usingDict
LZ4_decompress_safe
LZ4_decompress_safe_continue
LZ4_decompress_safe_partial
LZ4_decompress_safe_usingDict
LZ4_freeStream
LZ4_freeStreamDecode
LZ4_loadDict
LZ4_resetStream
LZ4_saveDict
LZ4_setStreamDecode
LZ4_sizeofState
LZ4_versionNumber
LZ4_versionString
